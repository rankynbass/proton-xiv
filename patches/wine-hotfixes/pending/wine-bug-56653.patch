diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
index 461922db7b0..1df4e2f3356 100644
--- a/dlls/ntdll/unix/system.c
+++ b/dlls/ntdll/unix/system.c
@@ -35,6 +35,7 @@
 #include <errno.h>
 #include <assert.h>
 #include <sys/time.h>
+#include <sys/stat.h>
 #include <time.h>
 #include <dirent.h>
 #ifdef HAVE_SYS_PARAM_H
@@ -1148,6 +1149,7 @@ static NTSTATUS create_logical_proc_info(void)
 {
     static const char core_info[] = "/sys/devices/system/cpu/cpu%u/topology/%s";
     static const char cache_info[] = "/sys/devices/system/cpu/cpu%u/cache/index%u/%s";
+    static const char cache_info_dir[] = "/sys/devices/system/cpu/cpu%u/cache";
     static const char numa_info[] = "/sys/devices/system/node/node%u/cpumap";
     const char *env_fake_logical_cores = getenv("WINE_LOGICAL_CPUS_AS_CORES");
     BOOL fake_logical_cpus_as_cores = env_fake_logical_cores && atoi(env_fake_logical_cores);
@@ -1156,6 +1158,7 @@ static NTSTATUS create_logical_proc_info(void)
     char op, name[MAX_PATH];
     ULONG_PTR all_cpus_mask = 0;
     unsigned int cpu_id;
+    struct stat cache_dir_stat;
 
     /* On systems with a large number of CPU cores (32 or 64 depending on 32-bit or 64-bit),
      * we have issues parsing processor information:
@@ -1262,6 +1265,18 @@ static NTSTATUS create_logical_proc_info(void)
             }
 
             cpu_id = cpu_override.mapping.cpu_count ? cpu_override.mapping.host_cpu_id[i] : i;
+            
+            snprintf(name, sizeof(name), cache_info_dir, cpu_id);
+            if(stat(name, &cache_dir_stat) != 0){
+                // Adding cache will fail in the next block so we add a fake one
+                CACHE_DESCRIPTOR fake_cache = { .Associativity = 8, .LineSize = 64, .Type = CacheUnified, .Size = 64 * 1024, .Level = 1 };
+                if (!logical_proc_info_add_cache( all_cpus_mask, &fake_cache ))
+                {
+                    fclose(fcpu_list);
+                    return STATUS_NO_MEMORY;
+                }
+            }
+
 
             for(j = 0; j < 4; j++)
             {

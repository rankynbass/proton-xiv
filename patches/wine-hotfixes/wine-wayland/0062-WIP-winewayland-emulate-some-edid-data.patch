From f6a5f10d6df23c1e732e148d539e4678a6e5d406 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Sat, 24 May 2025 11:09:03 -0400
Subject: [PATCH 062/166] WIP: winewayland: emulate some edid data.

---
 dlls/winewayland.drv/display.c | 57 ++++++++++++++++++++++++++++++++++
 1 file changed, 57 insertions(+)

diff --git a/dlls/winewayland.drv/display.c b/dlls/winewayland.drv/display.c
index c5d599efb54..d85d56f06c2 100644
--- a/dlls/winewayland.drv/display.c
+++ b/dlls/winewayland.drv/display.c
@@ -212,6 +212,62 @@ static void wayland_add_device_source(const struct gdi_device_manager *device_ma
     device_manager->add_source(output_info->output->name, state_flags, dpi, param);
 }
 
+/* emulate some edid data */
+static UINT get_edid(const struct output_info *output_info, unsigned char **data_out)
+{
+    unsigned char *data, *p;
+    unsigned int i, mwidth, mheight;
+    unsigned char c;
+    struct wayland_output_mode *mode = output_info->output->current_mode;
+
+    /* assume ~150 dpi */
+    mwidth = mode->width / 60;
+    mheight = mode->height / 60;
+
+    *data_out = calloc( 1, 128 );
+    data = *data_out;
+
+    if (!data) return 0;
+
+    *(uint64_t*)data = 0x00ffffffffffff00;
+    data[18] = 1;
+    data[19] = 4;
+    data[20] = 0xa0; /* FIXME */
+    data[21] = mwidth;
+    data[22] = mheight;
+    data[24] = 0x6;
+
+    p = data + 54;
+
+    *(uint16_t*)&p[0] = 0x0; /* reserved */
+
+    /* assume blanking time is 0 */
+    p[2] = mode->width;
+    p[4] = (((mode->width >> 8) & 0xf) << 4);
+    p[5] = mode->height;
+    p[7] = (((mode->height >> 8) & 0xf) << 4);
+    p[12] = mwidth;
+    p[13] = mheight;
+    p[14] = (((mwidth >> 8) & 0xf) << 4) | ((mheight >> 8) & 0xf);
+
+    p += 18;
+    p[3] = 0xfc;
+    memcpy((char *)p + 5, output_info->output->name,
+             min(strlen(output_info->output->name), 12));
+
+    p += 18;
+    p[3] = 0x10;
+    p += 18;
+    p[3] = 0x10;
+
+    c = 0;
+    for (i = 0; i < 127; ++i)
+        c += data[i];
+    data[127] = 256 - c;
+
+    return 128;
+}
+
 static void wayland_add_device_monitor(const struct gdi_device_manager *device_manager,
                                        void *param, struct output_info *output_info)
 {
@@ -223,6 +279,7 @@ static void wayland_add_device_monitor(const struct gdi_device_manager *device_m
 
     /* We don't have a direct way to get the work area in Wayland. */
     monitor.rc_work = monitor.rc_monitor;
+    monitor.edid_len = get_edid(output_info, &monitor.edid);
 
     TRACE("name=%s rc_monitor=rc_work=%s\n",
           output_info->output->name, wine_dbgstr_rect(&monitor.rc_monitor));
-- 
2.50.0


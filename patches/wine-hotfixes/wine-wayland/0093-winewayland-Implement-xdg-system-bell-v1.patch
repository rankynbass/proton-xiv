From 34f2e274516177ae99cc8128508ee9de805b76cf Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Fri, 23 May 2025 22:09:55 -0400
Subject: [PATCH 093/166] winewayland: Implement xdg-system-bell-v1

some troll shit bro
---
 dlls/winewayland.drv/Makefile.in            |  1 +
 dlls/winewayland.drv/wayland.c              |  9 ++++
 dlls/winewayland.drv/waylanddrv.h           |  4 +-
 dlls/winewayland.drv/waylanddrv_main.c      |  1 +
 dlls/winewayland.drv/window.c               | 13 +++++
 dlls/winewayland.drv/xdg-system-bell-v1.xml | 58 +++++++++++++++++++++
 6 files changed, 85 insertions(+), 1 deletion(-)
 create mode 100644 dlls/winewayland.drv/xdg-system-bell-v1.xml

diff --git a/dlls/winewayland.drv/Makefile.in b/dlls/winewayland.drv/Makefile.in
index ca313b8f7e6..b023770a858 100644
--- a/dlls/winewayland.drv/Makefile.in
+++ b/dlls/winewayland.drv/Makefile.in
@@ -32,4 +32,5 @@ SOURCES = \
 	wlr-data-control-unstable-v1.xml \
 	xdg-output-unstable-v1.xml \
 	xdg-shell.xml \
+	xdg-system-bell-v1.xml \
 	xdg-toplevel-icon-v1.xml
diff --git a/dlls/winewayland.drv/wayland.c b/dlls/winewayland.drv/wayland.c
index 29f3e48645e..f63e0f5908c 100644
--- a/dlls/winewayland.drv/wayland.c
+++ b/dlls/winewayland.drv/wayland.c
@@ -210,6 +210,12 @@ static void registry_handle_global(void *data, struct wl_registry *registry,
         process_wayland.wp_color_manager_v1 =
             wl_registry_bind(registry, id, &wp_color_manager_v1_interface, 1);
     }
+    else if (strcmp(interface, "xdg_system_bell_v1") == 0)
+    {
+        process_wayland.xdg_system_bell_v1 =
+            wl_registry_bind(registry, id, &xdg_system_bell_v1_interface,
+                             1);
+    }
 }
 
 static void registry_handle_global_remove(void *data, struct wl_registry *registry,
@@ -349,6 +355,9 @@ BOOL wayland_process_init(void)
     if (!process_wayland.wp_color_manager_v1)
         ERR("Wayland compositor doesn't support wp_color_manager_v1 (HDR will not be supported)\n");
 
+    if (!process_wayland.xdg_system_bell_v1)
+        ERR("Wayland compositor doesn't xdg_system_bell_v1! (Beep will not be supported)\n");
+
     process_wayland.initialized = TRUE;
 
     return TRUE;
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index aa440e499b4..30e9321e496 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -41,6 +41,7 @@
 #include "tablet-v2-client-protocol.h"
 #include "cursor-shape-v1-client-protocol.h"
 #include "color-management-v1-client-protocol.h"
+#include "xdg-system-bell-v1-client-protocol.h"
 
 #include "windef.h"
 #include "winbase.h"
@@ -204,6 +205,7 @@ struct wayland
     struct xdg_toplevel_icon_manager_v1 *xdg_toplevel_icon_manager_v1;
     struct wp_cursor_shape_manager_v1 *wp_cursor_shape_manager_v1;
     struct wp_color_manager_v1 *wp_color_manager_v1;
+    struct xdg_system_bell_v1 *xdg_system_bell_v1;
     struct wayland_seat seat;
     struct wayland_keyboard keyboard;
     struct wayland_pointer pointer;
@@ -499,7 +501,7 @@ RGNDATA *get_region_data(HRGN region);
 /**********************************************************************
  *          USER driver functions
  */
-
+void WAYLAND_Beep(void);
 LRESULT WAYLAND_ClipboardWindowProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam);
 BOOL WAYLAND_ClipCursor(const RECT *clip, BOOL reset);
 LRESULT WAYLAND_DesktopWindowProc(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp);
diff --git a/dlls/winewayland.drv/waylanddrv_main.c b/dlls/winewayland.drv/waylanddrv_main.c
index 9da551d13b1..0624c6d019f 100644
--- a/dlls/winewayland.drv/waylanddrv_main.c
+++ b/dlls/winewayland.drv/waylanddrv_main.c
@@ -39,6 +39,7 @@ BOOL option_use_system_cursors = TRUE;
 
 static const struct user_driver_funcs waylanddrv_funcs =
 {
+    .pBeep = WAYLAND_Beep,
     .pClipboardWindowProc = WAYLAND_ClipboardWindowProc,
     .pClipCursor = WAYLAND_ClipCursor,
     .pDesktopWindowProc = WAYLAND_DesktopWindowProc,
diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index 2752ad2a469..0f15506b20c 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -780,6 +780,19 @@ LRESULT WAYLAND_SysCommand(HWND hwnd, WPARAM wparam, LPARAM lparam, const POINT
     return ret;
 }
 
+/**********************************************************************
+ *          WAYLAND_Beep
+ */
+void WAYLAND_Beep(void)
+{
+    if (!process_wayland.xdg_system_bell_v1) return;
+
+    TRACE("\n");
+
+    xdg_system_bell_v1_ring(process_wayland.xdg_system_bell_v1, NULL);
+    wl_display_flush(process_wayland.wl_display);
+}
+
 /**********************************************************************
  *          get_client_surface
  */
diff --git a/dlls/winewayland.drv/xdg-system-bell-v1.xml b/dlls/winewayland.drv/xdg-system-bell-v1.xml
new file mode 100644
index 00000000000..f00508de850
--- /dev/null
+++ b/dlls/winewayland.drv/xdg-system-bell-v1.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<protocol name="xdg_system_bell_v1">
+  <copyright>
+    Copyright Â© 2016, 2023 Red Hat
+
+    Permission is hereby granted, free of charge, to any person obtaining a
+    copy of this software and associated documentation files (the "Software"),
+    to deal in the Software without restriction, including without limitation
+    the rights to use, copy, modify, merge, publish, distribute, sublicense,
+    and/or sell copies of the Software, and to permit persons to whom the
+    Software is furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice (including the next
+    paragraph) shall be included in all copies or substantial portions of the
+    Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+    DEALINGS IN THE SOFTWARE.
+  </copyright>
+
+  <interface name="xdg_system_bell_v1" version="1">
+    <description summary="system bell">
+      This global interface enables clients to ring the system bell.
+
+      Warning! The protocol described in this file is currently in the testing
+      phase. Backward compatible changes may be added together with the
+      corresponding interface version bump. Backward incompatible changes can
+      only be done by creating a new major version of the extension.
+    </description>
+
+    <request name="destroy" type="destructor">
+      <description summary="destroy the system bell object">
+	Notify that the object will no longer be used.
+      </description>
+    </request>
+
+    <request name="ring">
+      <description summary="ring the system bell">
+	This requests rings the system bell on behalf of a client. How ringing
+	the bell is implemented is up to the compositor. It may be an audible
+	sound, a visual feedback of some kind, or any other thing including
+	nothing.
+
+        The passed surface should correspond to a toplevel like surface role,
+        or be null, meaning the client doesn't have a particular toplevel it
+        wants to associate the bell ringing with. See the xdg-shell protocol
+        extension for a toplevel like surface role.
+      </description>
+      <arg name="surface" type="object" interface="wl_surface"
+	   allow-null="true" summary="associated surface"/>
+    </request>
+  </interface>
+</protocol>
-- 
2.50.0


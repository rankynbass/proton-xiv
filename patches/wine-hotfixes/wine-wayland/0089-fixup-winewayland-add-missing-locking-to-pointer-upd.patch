From 5a4020f34b5db3e562f21a68abeec9549a224925 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Sat, 7 Jun 2025 23:32:42 -0400
Subject: [PATCH 089/166] fixup! winewayland: add missing locking to pointer
 updates

will be needed soon... i think
---
 dlls/winewayland.drv/wayland_pointer.c | 26 ++++++++++++++++++++++----
 1 file changed, 22 insertions(+), 4 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_pointer.c b/dlls/winewayland.drv/wayland_pointer.c
index 0df5e2dcd7c..09cc289e8f8 100644
--- a/dlls/winewayland.drv/wayland_pointer.c
+++ b/dlls/winewayland.drv/wayland_pointer.c
@@ -161,24 +161,30 @@ static void pointer_handle_motion_internal(wl_fixed_t sx, wl_fixed_t sy, uint32_
           hwnd, wl_fixed_to_double(sx), wl_fixed_to_double(sy),
           (int)screen.x, (int)screen.y);
 
-    if (InterlockedCompareExchange(&pointer->confinement_updated, FALSE, TRUE))
+    /* ignore when time = 0 since we need to store the initial position upon enter */
+    if (InterlockedCompareExchange(&pointer->confinement_updated, FALSE, TRUE) || !time)
     {
-        TRACE("Ignoring, confinement was updated recently!\n");
+        if (time) TRACE("Ignoring, confinement was updated recently!\n");
+        else NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_RAW, &input, 0);
+        pthread_mutex_lock(&pointer->mutex);
         pointer->last_x = screen.x;
         pointer->last_y = screen.y;
+        pthread_mutex_unlock(&pointer->mutex);
         return;
     }
 
     NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_RAW, &input, 0);
 
+    pthread_mutex_lock(&pointer->mutex);
     input.mi.dx -= pointer->last_x;
     input.mi.dy -= pointer->last_y;
     input.mi.dwFlags = MOUSEEVENTF_MOVE;
 
-    TRACE("relative=%d,%d\n", input.mi.dx, input.mi.dy);
-
     pointer->last_x = screen.x;
     pointer->last_y = screen.y;
+    pthread_mutex_unlock(&pointer->mutex);
+
+    TRACE("relative=%d,%d\n", input.mi.dx, input.mi.dy);
 
     NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_MSG, &input, 0);
 }
@@ -316,6 +322,8 @@ static void pointer_handle_axis(void *data, struct wl_pointer *wl_pointer,
 
     input.type = INPUT_MOUSE;
 
+    pthread_mutex_lock(&pointer->mutex);
+
     /*
         Truncation makes the most sense:
         Imagine a infinite resolution scroll wheel
@@ -342,14 +350,24 @@ static void pointer_handle_axis(void *data, struct wl_pointer *wl_pointer,
         default: break;
     }
 
+    pthread_mutex_unlock(&pointer->mutex);
+
     TRACE("hwnd=%p axis=%u value=%lf out=%d\n", hwnd, axis, scroll_value, (int)input.mi.mouseData);
 
     if (input.mi.mouseData)
         NtUserSendHardwareInput(hwnd, 0, &input, 0);
 }
 
+/* TODO: move hardware input logic into the pointer frame (only for pointers)
+         maybe for future upstream implementation we can move everything?
+*/
 static void pointer_handle_frame(void *data, struct wl_pointer *wl_pointer)
 {
+    HWND hwnd;
+
+    if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
+
+    TRACE("hwnd=%p\n", hwnd);
 }
 
 static void pointer_handle_axis_source(void *data, struct wl_pointer *wl_pointer,
-- 
2.50.0


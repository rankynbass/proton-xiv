From e7862939b699f67da8472bdc0ba88f9a960167a7 Mon Sep 17 00:00:00 2001
From: Byeongsik Jeon <bsjeon@hanmail.net>
Date: Mon, 21 Oct 2024 08:19:49 +0900
Subject: [PATCH 117/166] win32u: Preserve result string from multiple
 WINE_IME_POST_UPDATE calls during ImeProcessKey.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

In winemac.drv, there are multiple ime update calls occur during ImeProcessKey.
These multiple ime update calls need to be properly merged into ‘data->update’.
However, currently win32u/imm.c::post_ime_update() only keeps the last ime
update call.

Valid rules are:
 - The previous comp_str is discarded when the new ime update call occurs,
   so it is only valid if the last ime update call comp_str is not NULL.
 - The previous result_str is kept if the new ime update call result_str is NULL.
 - If both the previous and the new ime update call result_str are not NULL, then
   concatenate them.

Test key sequences are:
 - "Japanese Romanji" : 'nihongo-SPACE-n'
 - "Korean 2-Set Keyboard" : 'r-k-s-k'
 - "Korean 2-Set Keyboard" : 'r-k-1" or 'r-k-SPACE'
---
 dlls/win32u/imm.c | 25 +++++++++++++++++++++++--
 1 file changed, 23 insertions(+), 2 deletions(-)

diff --git a/dlls/win32u/imm.c b/dlls/win32u/imm.c
index 99dc3e5e225..717dbf43ee6 100644
--- a/dlls/win32u/imm.c
+++ b/dlls/win32u/imm.c
@@ -440,7 +440,8 @@ static void post_ime_update( HWND hwnd, UINT cursor_pos, WCHAR *comp_str, WCHAR
     static UINT ime_update_count;
 
     struct imm_thread_data *data = get_imm_thread_data();
-    UINT id = -1, comp_len, result_len;
+    UINT id = -1, comp_len, result_len, prev_result_len;
+    WCHAR *prev_result_str, *tmp;
     struct ime_update *update;
 
     TRACE( "hwnd %p, cursor_pos %u, comp_str %s, result_str %s\n", hwnd, cursor_pos,
@@ -449,7 +450,25 @@ static void post_ime_update( HWND hwnd, UINT cursor_pos, WCHAR *comp_str, WCHAR
     comp_len = comp_str ? wcslen( comp_str ) + 1 : 0;
     result_len = result_str ? wcslen( result_str ) + 1 : 0;
 
-    if (!(update = malloc( offsetof(struct ime_update, buffer[comp_len + result_len]) ))) return;
+    /* prepend or keep the previous result string, if there was any */
+    if (!data->ime_process_vkey || !data->update) prev_result_str = NULL;
+    else prev_result_str = data->update->result_str;
+    prev_result_len = prev_result_str ? wcslen( prev_result_str ) + 1 : 0;
+
+    if (!prev_result_len && !result_len) tmp = NULL;
+    else if (!(tmp = malloc( (prev_result_len + result_len) * sizeof(WCHAR) ))) return;
+
+    if (prev_result_len && result_len) prev_result_len -= 1; /* concat both strings */
+    if (prev_result_len) memcpy( tmp, prev_result_str, prev_result_len * sizeof(WCHAR) );
+    if (result_len) memcpy( tmp + prev_result_len, result_str, result_len * sizeof(WCHAR) );
+    result_len += prev_result_len;
+    result_str = tmp;
+
+    if (!(update = malloc( offsetof(struct ime_update, buffer[comp_len + result_len]) )))
+    {
+        free( tmp );
+        return;
+    }
     update->cursor_pos = cursor_pos;
     update->comp_str = comp_str ? memcpy( update->buffer, comp_str, comp_len * sizeof(WCHAR) ) : NULL;
     update->result_str = result_str ? memcpy( update->buffer + comp_len, result_str, result_len * sizeof(WCHAR) ) : NULL;
@@ -470,6 +489,8 @@ static void post_ime_update( HWND hwnd, UINT cursor_pos, WCHAR *comp_str, WCHAR
         free( data->update );
         data->update = update;
     }
+
+    free( tmp );
 }
 
 static struct ime_update *find_ime_update( WORD vkey, WORD scan )
-- 
2.50.0


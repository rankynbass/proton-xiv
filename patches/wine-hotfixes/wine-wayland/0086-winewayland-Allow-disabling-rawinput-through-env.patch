From 54004b6d08dc4c316d45109ed298733e94cc5b0a Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Sat, 7 Jun 2025 22:49:21 -0400
Subject: [PATCH 086/166] winewayland: Allow disabling rawinput through env

---
 dlls/winewayland.drv/wayland_pointer.c | 36 ++++++++++++++++++++++----
 1 file changed, 31 insertions(+), 5 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_pointer.c b/dlls/winewayland.drv/wayland_pointer.c
index 900b3f1708a..0df5e2dcd7c 100644
--- a/dlls/winewayland.drv/wayland_pointer.c
+++ b/dlls/winewayland.drv/wayland_pointer.c
@@ -411,7 +411,6 @@ static const struct wl_pointer_listener pointer_listener =
  *
  * Converts the surface-local delta to window (logical) coordinate delta.
  */
-/*
 static void wayland_motion_delta_to_window(struct wayland_surface *surface,
                                            double surface_x, double surface_y,
                                            double *window_x, double *window_y)
@@ -419,7 +418,25 @@ static void wayland_motion_delta_to_window(struct wayland_surface *surface,
     *window_x = surface_x * surface->window.scale;
     *window_y = surface_y * surface->window.scale;
 }
-*/
+
+/* Some compositors seem to have broken rawinput so allow users to disable */
+static BOOL is_rawinput_disabled(void)
+{
+    static int cached;
+    const char *env;
+
+    if (cached) return cached - 1;
+
+    env = getenv("WAYLANDDRV_RAWINPUT");
+    cached = 1;
+
+    if (env && !strcmp(env, "0"))
+    {
+        cached = 2;
+    }
+
+    return cached - 1;
+}
 
 static void relative_pointer_v1_relative_motion(void *private,
                                                 struct zwp_relative_pointer_v1 *zwp_relative_pointer_v1,
@@ -440,8 +457,17 @@ static void relative_pointer_v1_relative_motion(void *private,
     /* Use "raw" input by default. However, it's not nessessarily raw.
        Additionally, we don't need to scale this value
     */
-    screen_x = wl_fixed_to_double(dx_unaccel);
-    screen_y = wl_fixed_to_double(dy_unaccel);
+    if (!is_rawinput_disabled())
+    {
+        screen_x = wl_fixed_to_double(dx_unaccel);
+        screen_y = wl_fixed_to_double(dy_unaccel);
+    } else {
+        wayland_motion_delta_to_window(data->wayland_surface,
+                                       wl_fixed_to_double(dx),
+                                       wl_fixed_to_double(dy),
+                                       &screen_x, &screen_y);
+    }
+
     wayland_win_data_release(data);
 
     pthread_mutex_lock(&pointer->mutex);
@@ -461,7 +487,7 @@ static void relative_pointer_v1_relative_motion(void *private,
     pthread_mutex_unlock(&pointer->mutex);
 
     TRACE("hwnd=%p wayland_dxdy=%.2f,%.2f accum_dxdy=%d,%d\n",
-          hwnd, wl_fixed_to_double(dx_unaccel), wl_fixed_to_double(dy_unaccel),
+          hwnd, screen_x, screen_y,
           (int)input.mi.dx, (int)input.mi.dy);
 
     NtUserSendHardwareInput(hwnd, 0, &input, 0);
-- 
2.50.0


From 66d1fd1b2d78353889617cb4b9e038525d5cdb78 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Thu, 22 May 2025 21:51:13 -0400
Subject: [PATCH 058/166] winewayland: Place fullscreen windows on associated
 output.

---
 dlls/winewayland.drv/display.c    |  7 ++++++
 dlls/winewayland.drv/waylanddrv.h |  6 +++++
 dlls/winewayland.drv/window.c     | 41 ++++++++++++++++++++++++++++++-
 3 files changed, 53 insertions(+), 1 deletion(-)

diff --git a/dlls/winewayland.drv/display.c b/dlls/winewayland.drv/display.c
index 851c9638252..c5d599efb54 100644
--- a/dlls/winewayland.drv/display.c
+++ b/dlls/winewayland.drv/display.c
@@ -180,6 +180,13 @@ static void output_info_array_arrange_physical_coords(struct wl_array *output_in
            ++steps < num_outputs)
         continue;
 
+    /* Initialize resolved coordinates with updated coordinates */
+    wl_array_for_each(info, output_info_array)
+    {
+        info->output->resolved_x = info->x;
+        info->output->resolved_y = info->y;
+    }
+
     /* Now that we have our physical pixel coordinates, sort from physical left
      * to right, but ensure the primary output is first. */
     qsort(output_info_array->data, num_outputs, sizeof(struct output_info),
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index b4afe72e1a7..52a4f1b160c 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -207,6 +207,7 @@ struct wayland_output_state
     struct rb_tree modes;
     struct wayland_output_mode *current_mode;
     char *name;
+    int resolved_x, resolved_y; /* store positions post overlap correction */
     int logical_x, logical_y;
     int logical_w, logical_h;
     int transform;
@@ -442,6 +443,11 @@ static inline BOOL intersect_rect(RECT *dst, const RECT *src1, const RECT *src2)
     return !IsRectEmpty(dst);
 }
 
+static inline LONG area_rect(const RECT *rect)
+{
+    return (rect->bottom - rect->top) * (rect->right - rect->left);
+}
+
 static inline LRESULT send_message(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)
 {
     return NtUserMessageCall(hwnd, msg, wparam, lparam, NULL, NtUserSendMessage, FALSE);
diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index 648792616af..70b3c2080c0 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -239,6 +239,42 @@ static BOOL wayland_win_data_create_wayland_surface(struct wayland_win_data *dat
     return TRUE;
 }
 
+static struct wl_output *wayland_surface_get_best_output(struct wayland_surface *surface)
+{
+    struct wayland_output *output;
+    struct wl_output *best = NULL;
+    RECT output_rect, temp, intersect = {0};
+    const RECT *window_rect = &surface->window.rect;
+
+    wl_list_for_each(output, &process_wayland.output_list, link)
+    {
+        SetRect(&output_rect, 0, 0,
+                output->current.current_mode->width,
+                output->current.current_mode->height);
+        OffsetRect(&output_rect,
+                output->current.resolved_x,
+                output->current.resolved_y);
+
+        TRACE("output %s, %s window %s\n",
+              output->current.name,
+              wine_dbgstr_rect(&output_rect),
+              wine_dbgstr_rect(window_rect));
+
+        if (intersect_rect(&temp, window_rect, &output_rect) &&
+                area_rect(&temp) > area_rect(&intersect))
+        {
+            intersect = temp;
+            best = output->wl_output;
+        }
+    }
+
+    if (!best)
+        WARN("Could not find associated wl_output for rect %s!\n",
+             wine_dbgstr_rect(window_rect));
+
+    return best;
+}
+
 static void wayland_surface_update_state_toplevel(struct wayland_surface *surface)
 {
     BOOL processing_config = surface->processing.serial &&
@@ -274,7 +310,10 @@ static void wayland_surface_update_state_toplevel(struct wayland_surface *surfac
         if ((surface->window.state & WAYLAND_SURFACE_CONFIG_STATE_FULLSCREEN) &&
            !(surface->current.state & WAYLAND_SURFACE_CONFIG_STATE_FULLSCREEN))
         {
-            xdg_toplevel_set_fullscreen(surface->xdg_toplevel, NULL);
+            pthread_mutex_lock(&process_wayland.output_mutex);
+            xdg_toplevel_set_fullscreen(surface->xdg_toplevel,
+                        wayland_surface_get_best_output(surface));
+            pthread_mutex_unlock(&process_wayland.output_mutex);
         }
     }
     else
-- 
2.50.0


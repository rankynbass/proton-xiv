From de89d16c3fcee47f62b9bed064d77345bca5677f Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Fri, 11 Jul 2025 22:01:55 -0400
Subject: [PATCH 167/177] winewayland: Attempt to guess the primary monitor.

---
 dlls/winewayland.drv/display.c        | 38 ++++++++++++++++++++-------
 dlls/winewayland.drv/wayland_output.c | 22 ----------------
 2 files changed, 29 insertions(+), 31 deletions(-)

diff --git a/dlls/winewayland.drv/display.c b/dlls/winewayland.drv/display.c
index 530dd30bd25..30f8a4f5f28 100644
--- a/dlls/winewayland.drv/display.c
+++ b/dlls/winewayland.drv/display.c
@@ -163,21 +163,41 @@ static BOOL output_info_array_resolve_overlaps(struct wl_array *output_info_arra
 }
 
 /* Grab offset based on the user specified monitor name */
-static void get_user_named_offset(struct wl_array *output_info_array, int *x, int *y)
+static void apply_monitor_adjustment(struct wl_array *output_info_array, int *x, int *y)
 {
     struct output_info *info = NULL;
     char *env = getenv("WAYLANDDRV_PRIMARY_MONITOR");
     *x = *y = 0;
 
-    if (!env) return;
-
-    wl_array_for_each(info, output_info_array)
+    /* use the env if available */
+    if (env)
     {
-        if (!strcmp(info->output->name, env))
+        wl_array_for_each(info, output_info_array)
+        {
+            if (!strcmp(info->output->name, env))
+            {
+                *x = info->x;
+                *y = info->y;
+                break;
+            }
+        }
+    } else {
+
+        /* attempt to guess the best monitor based on resolution and refresh rate */
+        UINT64 max_score = 0;
+
+        wl_array_for_each(info, output_info_array)
         {
-            *x = info->x;
-            *y = info->y;
-            break;
+            struct wayland_output_mode *mode = info->output->current_mode;
+            UINT64 score = (UINT64)mode->height *
+                           (UINT64)mode->width * (UINT64)mode->refresh;
+
+            if (score > max_score)
+            {
+                *x = info->x;
+                *y = info->y;
+                max_score = score;
+            }
         }
     }
 }
@@ -202,7 +222,7 @@ static void output_info_array_arrange_physical_coords(struct wl_array *output_in
            ++steps < num_outputs)
         continue;
 
-    get_user_named_offset(output_info_array, &x_offset, &y_offset);
+    apply_monitor_adjustment(output_info_array, &x_offset, &y_offset);
 
     wl_array_for_each(info, output_info_array)
     {
diff --git a/dlls/winewayland.drv/wayland_output.c b/dlls/winewayland.drv/wayland_output.c
index c0ce474ed8f..7b444b8c628 100644
--- a/dlls/winewayland.drv/wayland_output.c
+++ b/dlls/winewayland.drv/wayland_output.c
@@ -132,27 +132,6 @@ static void wayland_output_mode_free_rb(struct rb_entry *entry, void *ctx)
     free(RB_ENTRY_VALUE(entry, struct wayland_output_mode, entry));
 }
 
-/* Check environment variables to look for coordinate offset */
-static void apply_user_coord_offset(int *x, int *y)
-{
-    const char *env;
-    int offset;
-
-    env = getenv("WAYLANDDRV_XOFFSET");
-    if (env && sscanf(env, "%d", &offset) == 1)
-    {
-        *x -= offset;
-        TRACE("x offset %d\n", offset);
-    }
-
-    env = getenv("WAYLANDDRV_YOFFSET");
-    if (env && sscanf(env, "%d", &offset) == 1)
-    {
-        *y -= offset;
-        TRACE("y offset %d\n", offset);
-    }
-}
-
 static void wayland_output_done(struct wayland_output *output)
 {
     struct wayland_output_mode *mode;
@@ -191,7 +170,6 @@ static void wayland_output_done(struct wayland_output *output)
     {
         output->current.logical_x = output->pending.logical_x;
         output->current.logical_y = output->pending.logical_y;
-        apply_user_coord_offset(&output->current.logical_x, &output->current.logical_y);
     }
 
     if (output->pending_flags & WAYLAND_OUTPUT_CHANGED_LOGICAL_WH)
-- 
2.50.0


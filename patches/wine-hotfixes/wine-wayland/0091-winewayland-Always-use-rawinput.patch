From 434088ed34f66dbb9d48fbebb461d4136fcc0190 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Sun, 8 Jun 2025 13:46:36 -0400
Subject: [PATCH 091/166] winewayland: Always use rawinput.

---
 dlls/winewayland.drv/wayland_pointer.c | 55 +++++++++-----------------
 dlls/winewayland.drv/waylanddrv.h      |  1 -
 2 files changed, 19 insertions(+), 37 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_pointer.c b/dlls/winewayland.drv/wayland_pointer.c
index b67da1c4fa2..f90086f2df4 100644
--- a/dlls/winewayland.drv/wayland_pointer.c
+++ b/dlls/winewayland.drv/wayland_pointer.c
@@ -199,8 +199,6 @@ static void pointer_handle_enter(void *data, struct wl_pointer *wl_pointer,
     /* reset all accumulators */
     pointer->pointer_frame.dx = 0;
     pointer->pointer_frame.dy = 0;
-    pointer->pointer_frame.dx_unaccel = 0;
-    pointer->pointer_frame.dy_unaccel = 0;
     pointer->pointer_frame.wheel = 0;
     pointer->pointer_frame.wheelH = 0;
     pthread_mutex_unlock(&pointer->mutex);
@@ -357,30 +355,20 @@ static void pointer_handle_frame(void *data, struct wl_pointer *wl_pointer)
         input.mi.dy = pointer->pointer_frame.y;
         input.mi.dwFlags = MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE;
         NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_RAW, &input, 0);
+    }
 
-        if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_REL)
-        {
-            input.mi.dx = round(pointer->pointer_frame.dx);
-            input.mi.dy = round(pointer->pointer_frame.dy);
-            pointer->pointer_frame.dx -= input.mi.dx;
-            pointer->pointer_frame.dy -= input.mi.dy;
-            pointer->pointer_frame.dx_unaccel
-                -= round(pointer->pointer_frame.dx_unaccel);
-            pointer->pointer_frame.dy_unaccel
-                -= round(pointer->pointer_frame.dy_unaccel);
-            input.mi.dwFlags = MOUSEEVENTF_MOVE;
-            NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_MSG, &input, 0);
-        }
-    } else if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_REL) {
-        /* HACK: use raw input when there is only relative motion */
-        input.mi.dx = round(pointer->pointer_frame.dx_unaccel);
-        input.mi.dy = round(pointer->pointer_frame.dy_unaccel);
-        pointer->pointer_frame.dx_unaccel -= input.mi.dx;
-        pointer->pointer_frame.dy_unaccel -= input.mi.dy;
-        pointer->pointer_frame.dx -= round(pointer->pointer_frame.dx);
-        pointer->pointer_frame.dy -= round(pointer->pointer_frame.dy);
+    /*
+     * Always send raw input
+     * FIXME: is this correct behavior?
+    */
+    if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_REL) {
+        input.mi.dx = round(pointer->pointer_frame.dx);
+        input.mi.dy = round(pointer->pointer_frame.dy);
+        pointer->pointer_frame.dx -= input.mi.dx;
+        pointer->pointer_frame.dy -= input.mi.dy;
         input.mi.dwFlags = MOUSEEVENTF_MOVE;
-        NtUserSendHardwareInput(hwnd, 0, &input, 0); /* FIXME: flags ? */
+        if (input.mi.dx != 0 || input.mi.dy != 0)
+            NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_MSG, &input, 0);
     }
 
     /* zero these values just in case */
@@ -544,25 +532,22 @@ static void relative_pointer_v1_relative_motion(void *private,
 
     pthread_mutex_lock(&pointer->mutex);
 
-    pointer->pointer_frame.dx_unaccel += f_dxu;
-    pointer->pointer_frame.dy_unaccel += f_dyu;
-    pointer->pointer_frame.dx += f_dx;
-    pointer->pointer_frame.dy += f_dy;
 
     if (is_rawinput_disabled())
     {
-        pointer->pointer_frame.dx_unaccel = pointer->pointer_frame.dx;
-        pointer->pointer_frame.dy_unaccel = pointer->pointer_frame.dy;
+        pointer->pointer_frame.dx += f_dx;
+        pointer->pointer_frame.dy += f_dy;
+    } else {
+        pointer->pointer_frame.dx += f_dxu;
+        pointer->pointer_frame.dy += f_dyu;
     }
 
     pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_REL;
 
-    TRACE("hwnd=%p dxdy=%.2f,%.2f dxdy_raw=%.2f,%.2f\n",
+    TRACE("hwnd=%p dxdy=%.2f,%.2f\n",
           hwnd,
           pointer->pointer_frame.dx,
-          pointer->pointer_frame.dy,
-          pointer->pointer_frame.dx_unaccel,
-          pointer->pointer_frame.dy_unaccel);
+          pointer->pointer_frame.dy);
 
     pthread_mutex_unlock(&pointer->mutex);
 }
@@ -1166,8 +1151,6 @@ static void wayland_pointer_update_constraint(struct wl_surface *wl_surface,
     {
         pointer->pointer_frame.dx = 0;
         pointer->pointer_frame.dy = 0;
-        pointer->pointer_frame.dx_unaccel = 0;
-        pointer->pointer_frame.dy_unaccel = 0;
         TRACE("Enabling relative only motion\n");
     }
     else if (!needs_relative && pointer->relative_only)
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 81af253d215..aa440e499b4 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -139,7 +139,6 @@ struct wayland_pointer
         LONG discrete_event_handled;
         int x, y;
         double dx, dy;
-        double dx_unaccel, dy_unaccel;
         double wheel, wheelH;
         unsigned int flags;
         unsigned int axis_stop;
-- 
2.50.0


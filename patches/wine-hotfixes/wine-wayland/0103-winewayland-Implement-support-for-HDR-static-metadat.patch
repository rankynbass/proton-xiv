From 000dd7740f8c4c378b1df7fe2a4eb3a88cca0235 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty <etaash.mathamsetty@gmail.com>
Date: Sat, 14 Jun 2025 13:19:02 -0400
Subject: [PATCH 103/166] winewayland: Implement support for HDR static
 metadata extension

---
 dlls/win32u/sysparams.c               |  4 +-
 dlls/winewayland.drv/display.c        | 43 +++++++++++++++++++-
 dlls/winewayland.drv/wayland_output.c | 58 ++++++++++++++++++---------
 dlls/winewayland.drv/waylanddrv.h     |  4 +-
 4 files changed, 85 insertions(+), 24 deletions(-)

diff --git a/dlls/win32u/sysparams.c b/dlls/win32u/sysparams.c
index fd427528d32..4ebdfe24a58 100644
--- a/dlls/win32u/sysparams.c
+++ b/dlls/win32u/sysparams.c
@@ -7559,8 +7559,10 @@ NTSTATUS WINAPI NtUserDisplayConfigGetDeviceInfo( DISPLAYCONFIG_DEVICE_INFO_HEAD
     {
         DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO *info = (DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO *)packet;
         const char *env;
+        static int once;
 
-        FIXME( "DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO semi-stub.\n" );
+        if (!once++)
+            FIXME( "DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO semi-stub.\n" );
 
         if (packet->size < sizeof(*info))
             return STATUS_INVALID_PARAMETER;
diff --git a/dlls/winewayland.drv/display.c b/dlls/winewayland.drv/display.c
index 60768fd620b..530dd30bd25 100644
--- a/dlls/winewayland.drv/display.c
+++ b/dlls/winewayland.drv/display.c
@@ -235,9 +235,19 @@ static void wayland_add_device_source(const struct gdi_device_manager *device_ma
     device_manager->add_source(output_info->output->name, state_flags, dpi, param);
 }
 
+/* We love gamescope */
+static uint8_t encode_max_luminance(float nits)
+{
+    if (nits == 0.0f)
+        return 0;
+
+    return ceilf((logf(nits / 50.0f) / logf(2.0f)) * 32.0f);
+}
+
 /* emulate some edid data */
 static UINT get_edid(const struct output_info *output_info, unsigned char **data_out)
 {
+    const unsigned int edid_size = 256;
     unsigned char *data, *p;
     unsigned int i, mwidth, mheight;
     unsigned char c;
@@ -248,7 +258,8 @@ static UINT get_edid(const struct output_info *output_info, unsigned char **data
     mwidth = mode->width / 60;
     mheight = mode->height / 60;
 
-    *data_out = calloc( 1, 128 );
+    /* another 128 bytes needed for CTA-861 extension */
+    *data_out = calloc( 1, edid_size );
     data = *data_out;
 
     if (!data) return 0;
@@ -299,11 +310,39 @@ static UINT get_edid(const struct output_info *output_info, unsigned char **data
     p[3] = 0x10;
 
     c = 0;
+    data[126] = 1; /* one extension */
     for (i = 0; i < 127; ++i)
         c += data[i];
     data[127] = 256 - c;
 
-    return 128;
+    p = data + 128;
+
+    p[0] = 2;
+    p[1] = 3;
+    p[2] = 0xa; /* FIXME: is this correct?  */
+
+    p += 4;
+
+    p[0] = (0x7 << 5) | 0x5; /* HDR static metadata size */
+    p[1] = 6;
+
+    /* HDR static metadata block */
+
+    p[2] = 0x7; /* ST2084 | SDR | HDR */
+    p[3] = 1;
+    p[4] = encode_max_luminance(output_info->output->max_cll);
+    p[5] = encode_max_luminance(output_info->output->max_fall);
+    p[6] = 0; /* assume undefined */
+
+    /* reset p to beginning of the CTA block */
+    p = data + 128;
+    c = 0;
+
+    for (i = 0; i < 127; ++i)
+        c += p[i];
+    p[127] = 256 - c;
+
+    return edid_size;
 }
 
 static void wayland_add_device_monitor(const struct gdi_device_manager *device_manager,
diff --git a/dlls/winewayland.drv/wayland_output.c b/dlls/winewayland.drv/wayland_output.c
index 7c1bc4bb264..74923ffe93e 100644
--- a/dlls/winewayland.drv/wayland_output.c
+++ b/dlls/winewayland.drv/wayland_output.c
@@ -41,7 +41,8 @@ static uint32_t next_output_id = 0;
 #define WAYLAND_OUTPUT_CHANGED_LOGICAL_WH 0x08
 #define WAYLAND_OUTPUT_CHANGED_TRANSFORM  0x10
 #define WAYLAND_OUTPUT_CHANGED_PRIMARIES  0x20
-#define WAYLAND_OUTPUT_CHANGED_LUMINANCE  0x40
+#define WAYLAND_OUTPUT_CHANGED_FALL       0x40
+#define WAYLAND_OUTPUT_CHANGED_CLL        0x80
 
 /**********************************************************************
  *          Output handling
@@ -204,17 +205,21 @@ static void wayland_output_done(struct wayland_output *output)
         output->current.transform = output->pending.transform;
     }
 
+
+    /* Copy here as well in case this gets called first */
     if (output->pending_flags & WAYLAND_OUTPUT_CHANGED_PRIMARIES)
     {
-        /* Copy here as well in case this gets called first */
         output->current.primaries = output->pending.primaries;
     }
 
-    if (output->pending_flags & WAYLAND_OUTPUT_CHANGED_LUMINANCE)
+    if (output->pending_flags & WAYLAND_OUTPUT_CHANGED_FALL)
     {
-        output->current.max_luminance = output->pending.max_luminance;
-        output->current.min_luminance = output->pending.min_luminance;
+        output->current.max_fall = output->pending.max_fall;
+    }
 
+    if (output->pending_flags & WAYLAND_OUTPUT_CHANGED_CLL)
+    {
+        output->current.max_cll = output->pending.max_cll;
     }
 
     output->pending_flags = 0;
@@ -366,11 +371,16 @@ static void wp_image_description_info_v1_done(void *data,
         output->pending_flags &= ~WAYLAND_OUTPUT_CHANGED_PRIMARIES;
     }
 
-    if (output->pending_flags & WAYLAND_OUTPUT_CHANGED_LUMINANCE)
+    if (output->pending_flags & WAYLAND_OUTPUT_CHANGED_FALL)
     {
-        output->current.max_luminance = output->pending.max_luminance;
-        output->current.min_luminance = output->pending.min_luminance;
-        output->pending_flags &= ~WAYLAND_OUTPUT_CHANGED_LUMINANCE;
+        output->current.max_fall = output->pending.max_fall;
+        output->pending_flags &= ~WAYLAND_OUTPUT_CHANGED_FALL;
+    }
+
+    if (output->pending_flags & WAYLAND_OUTPUT_CHANGED_CLL)
+    {
+        output->current.max_cll = output->pending.max_cll;
+        output->pending_flags &= ~WAYLAND_OUTPUT_CHANGED_CLL;
     }
 
     TRACE("%p\n", output);
@@ -441,19 +451,10 @@ static void wayland_image_description_info_v1_luminance(void *data,
                             struct wp_image_description_info_v1 *info,
                             uint32_t min, uint32_t max, uint32_t ref)
 {
-    struct wayland_output *output = data;
-    pthread_mutex_lock(&process_wayland.output_mutex);
-
-    output->pending.max_luminance = max;
-    output->pending.min_luminance = min;
-    output->pending_flags |= WAYLAND_OUTPUT_CHANGED_LUMINANCE;
-
-    TRACE("min %lf max %u ref %u\n", min * 1e-4, max, ref);
-
-    pthread_mutex_unlock(&process_wayland.output_mutex);
 
 }
 
+/* FIXME: Make use of this event */
 static void wayland_image_description_info_v1_target_primaries(void *data,
 				 struct wp_image_description_info_v1 *info,
 				 int32_t r_x,
@@ -479,14 +480,33 @@ static void wayland_image_description_info_v1_target_max_cll(void *data,
 				            struct wp_image_description_info_v1 *info,
 				            uint32_t max)
 {
+    struct wayland_output *output = data;
 
+    pthread_mutex_lock(&process_wayland.output_mutex);
+
+
+    TRACE("Max CLL: %u\n", max);
+
+    output->pending.max_cll = max;
+    output->pending_flags |= WAYLAND_OUTPUT_CHANGED_CLL;
+
+    pthread_mutex_unlock(&process_wayland.output_mutex);
 }
 
 static void wayland_image_description_info_v1_target_max_fall(void *data,
 				            struct wp_image_description_info_v1 *info,
 				            uint32_t max)
 {
+    struct wayland_output *output = data;
+
+    pthread_mutex_lock(&process_wayland.output_mutex);
 
+    TRACE("Max FALL: %u\n", max);
+
+    output->pending.max_fall = max;
+    output->pending_flags |= WAYLAND_OUTPUT_CHANGED_FALL;
+
+    pthread_mutex_unlock(&process_wayland.output_mutex);
 }
 
 static const struct wp_image_description_info_v1_listener image_description_info_listener = {
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 189beef37d4..2dcc22ef392 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -245,8 +245,8 @@ struct wayland_output_state
     struct rb_tree modes;
     struct wayland_output_mode *current_mode;
     struct wayland_primaries primaries;
-    uint32_t max_luminance;
-    uint32_t min_luminance;
+    uint32_t max_fall;
+    uint32_t max_cll;
     char *name;
     int logical_x, logical_y;
     int logical_w, logical_h;
-- 
2.50.0


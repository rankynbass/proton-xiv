From a7c33b88687de05029ecb26d277722958602110e Mon Sep 17 00:00:00 2001
From: Byeongsik Jeon <bsjeon@hanmail.net>
Date: Tue, 8 Apr 2025 21:00:28 +0900
Subject: [PATCH 118/166] win32u: Support WM_IME_KEYDOWN message during
 ImeProcessKey.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

In Korean input, when ime is in the composition state, if a non-printable key
(ENTER, HOME, etc) is pressed, it returns a result_string and passes the key
to WinProc with the WM_IME_KEYDOWN message.

This can be seen in ‘imm32/test/imm32.c::test_ga_na_da()’.

In the current winemac.drv, if I select the “Korean 2-Set Keyboard” as the
input source and type ‘r-k-ENTER’, it only returns the result string ‘0xAC00’.
No WM_IME_KEYDOWN message is generated.

At this point, the WINE_IME_POST_UPDATE call occurs and macdrv_ImeProcessKey
returns FALSE. A FALSE return value means that the key has not been consumed
by ime and the key should be passed to the WinProc as a raw WM_KEYDOWN.

However, because the ime_update call have occurred, ImeProcessKey should return
TRUE and a raw WM_KEYDOWN message should be generated via a different path.
So a WM_IME_KEYDOWN message is required.

This patch allows the macdrv_ImeProcessKey return value to be passed to
ImeToAsciiEx() to determine if a WM_IME_KEYDOWN message should be generated.
---
 dlls/imm32/ime.c     |  8 ++++++++
 dlls/win32u/imm.c    | 10 ++++++++--
 dlls/wow64win/user.c |  2 ++
 include/ntuser.h     |  1 +
 4 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/dlls/imm32/ime.c b/dlls/imm32/ime.c
index 6f1d68ad0d4..77caf884efa 100644
--- a/dlls/imm32/ime.c
+++ b/dlls/imm32/ime.c
@@ -529,6 +529,7 @@ UINT WINAPI ImeToAsciiEx( UINT vkey, UINT vsc, BYTE *state, TRANSMSGLIST *msgs,
     UINT size, count = 0;
     INPUTCONTEXT *ctx;
     NTSTATUS status;
+    BOOL key_consumed = TRUE;
 
     TRACE( "vkey %#x, vsc %#x, state %p, msgs %p, flags %#x, himc %p\n",
            vkey, vsc, state, msgs, flags, himc );
@@ -547,6 +548,7 @@ UINT WINAPI ImeToAsciiEx( UINT vkey, UINT vsc, BYTE *state, TRANSMSGLIST *msgs,
         if (!(compstr = ImmLockIMCC( (ctx->hCompStr = himcc) ))) goto done;
 
         params.compstr = compstr;
+        params.key_consumed = &key_consumed;
         status = NtUserMessageCall( ctx->hWnd, WINE_IME_TO_ASCII_EX, vkey, vsc, &params,
                                     NtUserImeDriverCall, FALSE );
         size = compstr->dwSize;
@@ -575,6 +577,12 @@ UINT WINAPI ImeToAsciiEx( UINT vkey, UINT vsc, BYTE *state, TRANSMSGLIST *msgs,
             else msg.lParam |= CS_INSERTCHAR|CS_NOMOVECARET;
             msgs->TransMsg[count++] = msg;
         }
+
+        if (!key_consumed)
+        {
+            TRANSMSG msg = {.message = WM_IME_KEYDOWN, .wParam = vkey, .lParam = vsc};
+            msgs->TransMsg[count++] = msg;
+        }
     }
 
     ImmUnlockIMCC( ctx->hCompStr );
diff --git a/dlls/win32u/imm.c b/dlls/win32u/imm.c
index 717dbf43ee6..c0ed670e779 100644
--- a/dlls/win32u/imm.c
+++ b/dlls/win32u/imm.c
@@ -39,6 +39,7 @@ struct ime_update
     struct list entry;
     WORD vkey;
     WORD scan;
+    BOOL key_consumed;
     DWORD cursor_pos;
     WCHAR *comp_str;
     WCHAR *result_str;
@@ -478,6 +479,7 @@ static void post_ime_update( HWND hwnd, UINT cursor_pos, WCHAR *comp_str, WCHAR
         pthread_mutex_lock( &imm_mutex );
         id = update->scan = ++ime_update_count;
         update->vkey = VK_PROCESSKEY;
+        update->key_consumed = TRUE;
         list_add_tail( &ime_updates, &update->entry );
         pthread_mutex_unlock( &imm_mutex );
 
@@ -503,7 +505,8 @@ static struct ime_update *find_ime_update( WORD vkey, WORD scan )
     return NULL;
 }
 
-UINT ime_to_tascii_ex( UINT vkey, UINT lparam, const BYTE *state, COMPOSITIONSTRING *compstr, HIMC himc )
+static UINT ime_to_tascii_ex( UINT vkey, UINT lparam, const BYTE *state, COMPOSITIONSTRING *compstr,
+                              BOOL *key_consumed, HIMC himc )
 {
     UINT needed = sizeof(COMPOSITIONSTRING), comp_len, result_len;
     struct ime_update *update;
@@ -519,6 +522,8 @@ UINT ime_to_tascii_ex( UINT vkey, UINT lparam, const BYTE *state, COMPOSITIONSTR
         return STATUS_NOT_FOUND;
     }
 
+    *key_consumed = update->key_consumed;
+
     if (!update->comp_str) comp_len = 0;
     else
     {
@@ -611,6 +616,7 @@ LRESULT ime_driver_call( HWND hwnd, enum wine_ime_call call, WPARAM wparam, LPAR
 
         if (data->update)
         {
+            data->update->key_consumed = res;
             pthread_mutex_lock( &imm_mutex );
             list_add_tail( &ime_updates, &data->update->entry );
             pthread_mutex_unlock( &imm_mutex );
@@ -622,7 +628,7 @@ LRESULT ime_driver_call( HWND hwnd, enum wine_ime_call call, WPARAM wparam, LPAR
         return res;
     }
     case WINE_IME_TO_ASCII_EX:
-        return ime_to_tascii_ex( wparam, lparam, params->state, params->compstr, params->himc );
+        return ime_to_tascii_ex( wparam, lparam, params->state, params->compstr, params->key_consumed, params->himc );
     case WINE_IME_POST_UPDATE:
         post_ime_update( hwnd, wparam, (WCHAR *)lparam, (WCHAR *)params );
         return 0;
diff --git a/dlls/wow64win/user.c b/dlls/wow64win/user.c
index b75c2962398..effe8ebffae 100644
--- a/dlls/wow64win/user.c
+++ b/dlls/wow64win/user.c
@@ -3662,12 +3662,14 @@ NTSTATUS WINAPI wow64_NtUserMessageCall( UINT *args )
                 ULONG himc;
                 ULONG state;
                 ULONG compstr;
+                ULONG key_consumed;
             } *params32 = result_info;
             struct ime_driver_call_params params;
             if (msg == WINE_IME_POST_UPDATE) ERR( "Unexpected WINE_IME_POST_UPDATE message\n" );
             params.himc = UlongToPtr( params32->himc );
             params.state = UlongToPtr( params32->state );
             params.compstr = UlongToPtr( params32->compstr );
+            params.key_consumed = UlongToPtr( params32->key_consumed );
             return NtUserMessageCall( hwnd, msg, wparam, lparam, &params, type, ansi );
         }
 
diff --git a/include/ntuser.h b/include/ntuser.h
index 9bd04a647dd..6f5c0eba0ee 100644
--- a/include/ntuser.h
+++ b/include/ntuser.h
@@ -647,6 +647,7 @@ struct ime_driver_call_params
     HIMC himc;
     const BYTE *state;
     COMPOSITIONSTRING *compstr;
+    BOOL *key_consumed;
 };
 
 /* NtUserSystemTrayCall calls */
-- 
2.50.0


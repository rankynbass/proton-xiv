From 97b7581a4cb27d7d51df75c766d93b01c1fb6ab9 Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Thu, 24 Apr 2025 15:46:33 +0300
Subject: [PATCH 028/166] winewayland: Introduce helper to check whether a
 surface is toplevel.

---
 dlls/winewayland.drv/wayland_surface.c | 11 ++++-------
 dlls/winewayland.drv/waylanddrv.h      |  5 +++++
 dlls/winewayland.drv/window.c          | 16 +++++-----------
 3 files changed, 14 insertions(+), 18 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_surface.c b/dlls/winewayland.drv/wayland_surface.c
index b7121d5ed96..4daf56d10b3 100644
--- a/dlls/winewayland.drv/wayland_surface.c
+++ b/dlls/winewayland.drv/wayland_surface.c
@@ -48,8 +48,7 @@ static void xdg_surface_handle_configure(void *private, struct xdg_surface *xdg_
 
     /* Handle this event only if wayland_surface is still associated with
      * the target xdg_surface. */
-    if ((surface = data->wayland_surface) &&
-        surface->role == WAYLAND_SURFACE_ROLE_TOPLEVEL &&
+    if ((surface = data->wayland_surface) && wayland_surface_is_toplevel(surface) &&
         surface->xdg_surface == xdg_surface)
     {
         /* If we have a previously requested config, we have already sent a
@@ -118,9 +117,7 @@ static void xdg_toplevel_handle_configure(void *private,
 
     if (!(data = wayland_win_data_get(hwnd))) return;
 
-    if ((surface = data->wayland_surface) &&
-        surface->role == WAYLAND_SURFACE_ROLE_TOPLEVEL &&
-        surface->xdg_toplevel == xdg_toplevel)
+    if ((surface = data->wayland_surface) && wayland_surface_is_toplevel(surface))
     {
         surface->pending.width = width;
         surface->pending.height = height;
@@ -1171,7 +1168,7 @@ void wayland_surface_set_title(struct wayland_surface *surface, LPCWSTR text)
     DWORD utf8_count;
     char *utf8 = NULL;
 
-    assert(surface->role == WAYLAND_SURFACE_ROLE_TOPLEVEL && surface->xdg_toplevel);
+    assert(wayland_surface_is_toplevel(surface));
 
     TRACE("surface=%p hwnd=%p text='%s'\n",
           surface, surface->hwnd, wine_dbgstr_w(text));
@@ -1197,7 +1194,7 @@ void wayland_surface_set_icon(struct wayland_surface *surface, UINT type, ICONIN
     struct wayland_shm_buffer *icon_buf;
 
     assert(ii);
-    assert(surface->role == WAYLAND_SURFACE_ROLE_TOPLEVEL && surface->xdg_toplevel);
+    assert(wayland_surface_is_toplevel(surface));
 
     hDC = NtGdiCreateCompatibleDC(0);
     icon_buf = wayland_shm_buffer_from_color_bitmaps(hDC, ii->hbmColor, ii->hbmMask);
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 3c42272ccde..b3d3016174a 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -330,6 +330,11 @@ void wayland_surface_ensure_contents(struct wayland_surface *surface);
 void wayland_surface_set_title(struct wayland_surface *surface, LPCWSTR title);
 void wayland_surface_set_icon(struct wayland_surface *surface, UINT type, ICONINFO *ii);
 
+static inline BOOL wayland_surface_is_toplevel(struct wayland_surface *surface)
+{
+    return surface->role == WAYLAND_SURFACE_ROLE_TOPLEVEL && surface->xdg_toplevel;
+}
+
 /**********************************************************************
  *          Wayland SHM buffer
  */
diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index 03dff29a4cc..acc34a18218 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -494,8 +494,7 @@ void WAYLAND_WindowPosChanged(HWND hwnd, HWND insert_after, HWND owner_hint, UIN
     }
 
     needs_icon = data->wayland_surface && !data->wayland_surface->big_icon_buffer &&
-                 data->wayland_surface->role == WAYLAND_SURFACE_ROLE_TOPLEVEL &&
-                 data->wayland_surface->xdg_toplevel &&
+                 wayland_surface_is_toplevel(data->wayland_surface) &&
                  process_wayland.xdg_toplevel_icon_manager_v1;
 
     wayland_win_data_release(data);
@@ -537,7 +536,7 @@ static void wayland_configure_window(HWND hwnd)
         return;
     }
 
-    if (surface->role != WAYLAND_SURFACE_ROLE_TOPLEVEL || !surface->xdg_toplevel)
+    if (!wayland_surface_is_toplevel(surface))
     {
         TRACE("missing xdg_toplevel, returning\n");
         wayland_win_data_release(data);
@@ -700,9 +699,7 @@ void WAYLAND_SetWindowIcon(HWND hwnd, UINT type, HICON icon)
         icon = get_window_icon(hwnd, type, icon, &ii);
         if (icon && (data = wayland_win_data_get(hwnd)))
         {
-            if (data->wayland_surface &&
-                data->wayland_surface->role == WAYLAND_SURFACE_ROLE_TOPLEVEL &&
-                data->wayland_surface->xdg_toplevel)
+            if (data->wayland_surface && wayland_surface_is_toplevel(data->wayland_surface))
                 wayland_surface_set_icon(data->wayland_surface, type, &ii);
             wayland_win_data_release(data);
         }
@@ -721,9 +718,7 @@ void WAYLAND_SetWindowText(HWND hwnd, LPCWSTR text)
 
     if ((data = wayland_win_data_get(hwnd)))
     {
-        if ((surface = data->wayland_surface) &&
-            surface->role == WAYLAND_SURFACE_ROLE_TOPLEVEL &&
-            surface->xdg_toplevel)
+        if ((surface = data->wayland_surface) && wayland_surface_is_toplevel(surface))
             wayland_surface_set_title(surface, text);
         wayland_win_data_release(data);
     }
@@ -758,8 +753,7 @@ LRESULT WAYLAND_SysCommand(HWND hwnd, WPARAM wparam, LPARAM lparam, const POINT
             pthread_mutex_lock(&process_wayland.seat.mutex);
             wl_seat = process_wayland.seat.wl_seat;
             if (wl_seat && (surface = data->wayland_surface) &&
-                surface->role == WAYLAND_SURFACE_ROLE_TOPLEVEL &&
-                surface->xdg_toplevel && button_serial)
+                wayland_surface_is_toplevel(surface) && button_serial)
             {
                 if (command == SC_MOVE)
                 {
-- 
2.50.0


From 2739e038d34ef1e82852246247c331fc32aba35e Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Wed, 28 May 2025 16:04:21 -0400
Subject: [PATCH 070/166] winewayland: Refactor output selection

---
 dlls/winewayland.drv/display.c         | 64 +++++++++++++++++++++++---
 dlls/winewayland.drv/wayland_output.c  |  2 -
 dlls/winewayland.drv/wayland_surface.c | 38 +--------------
 dlls/winewayland.drv/waylanddrv.h      |  3 +-
 dlls/winewayland.drv/window.c          |  6 ++-
 5 files changed, 63 insertions(+), 50 deletions(-)

diff --git a/dlls/winewayland.drv/display.c b/dlls/winewayland.drv/display.c
index cc2cc9283e8..f1eb6be8e46 100644
--- a/dlls/winewayland.drv/display.c
+++ b/dlls/winewayland.drv/display.c
@@ -40,6 +40,7 @@ struct output_info
 {
     int x, y;
     struct wayland_output_state *output;
+    struct wl_output *wl_output; /* FIXME: find a better place to store this */
 };
 
 static int output_info_cmp_primary_x_y(const void *va, const void *vb)
@@ -180,13 +181,6 @@ static void output_info_array_arrange_physical_coords(struct wl_array *output_in
            ++steps < num_outputs)
         continue;
 
-    /* Initialize resolved coordinates with updated coordinates */
-    wl_array_for_each(info, output_info_array)
-    {
-        info->output->resolved_x = info->x;
-        info->output->resolved_y = info->y;
-    }
-
     /* Now that we have our physical pixel coordinates, sort from physical left
      * to right, but ensure the primary output is first. */
     qsort(output_info_array->data, num_outputs, sizeof(struct output_info),
@@ -340,6 +334,62 @@ static void wayland_add_device_modes(const struct gdi_device_manager *device_man
     free(modes);
 }
 
+/* Locking is done externally to ensure wl_output remains valid */
+struct wl_output *wayland_get_best_output_for_rect(const RECT *window_rect)
+{
+    struct wayland_output *output;
+    struct wl_output *best = NULL;
+    RECT output_rect, temp, intersect = {0};
+    struct wl_array output_info_array;
+    struct output_info *output_info;
+
+    wl_array_init(&output_info_array);
+
+    wl_list_for_each(output, &process_wayland.output_list, link)
+    {
+        if (!output->current.current_mode) continue;
+        output_info = wl_array_add(&output_info_array, sizeof(*output_info));
+        if (output_info)
+        {
+            output_info->output = &output->current;
+            output_info->wl_output = output->wl_output;
+        }
+        else ERR("Failed to allocate space for output_info\n");
+    }
+
+    output_info_array_arrange_physical_coords(&output_info_array);
+
+    wl_array_for_each(output_info, &output_info_array)
+    {
+        SetRect(&output_rect, 0, 0,
+                output_info->output->current_mode->width,
+                output_info->output->current_mode->height);
+        OffsetRect(&output_rect,
+                output_info->x,
+                output_info->y);
+
+        TRACE("output %s: %s, window %s\n",
+              debugstr_a(output_info->output->name),
+              wine_dbgstr_rect(&output_rect),
+              wine_dbgstr_rect(window_rect));
+
+        if (intersect_rect(&temp, window_rect, &output_rect) &&
+                area_rect(&temp) > area_rect(&intersect))
+        {
+            intersect = temp;
+            best = output_info->wl_output;
+        }
+    }
+
+    wl_array_release(&output_info_array);
+
+    if (!best)
+        WARN("Could not find associated wl_output for rect %s!\n",
+             wine_dbgstr_rect(window_rect));
+
+    return best;
+}
+
 /***********************************************************************
  *      UpdateDisplayDevices (WAYLAND.@)
  */
diff --git a/dlls/winewayland.drv/wayland_output.c b/dlls/winewayland.drv/wayland_output.c
index 84eee57714b..7c1bc4bb264 100644
--- a/dlls/winewayland.drv/wayland_output.c
+++ b/dlls/winewayland.drv/wayland_output.c
@@ -191,8 +191,6 @@ static void wayland_output_done(struct wayland_output *output)
         output->current.logical_x = output->pending.logical_x;
         output->current.logical_y = output->pending.logical_y;
         apply_user_coord_offset(&output->current.logical_x, &output->current.logical_y);
-        output->current.resolved_x = output->current.logical_x;
-        output->current.resolved_y = output->current.logical_y;
     }
 
     if (output->pending_flags & WAYLAND_OUTPUT_CHANGED_LOGICAL_WH)
diff --git a/dlls/winewayland.drv/wayland_surface.c b/dlls/winewayland.drv/wayland_surface.c
index ea314dea032..e0d89ba7cf6 100644
--- a/dlls/winewayland.drv/wayland_surface.c
+++ b/dlls/winewayland.drv/wayland_surface.c
@@ -611,42 +611,6 @@ static void wayland_surface_get_rect_in_monitor(struct wayland_surface *surface,
     OffsetRect(rect, -surface->window.rect.left, -surface->window.rect.top);
 }
 
-struct wl_output *wayland_surface_get_best_output(struct wayland_surface *surface)
-{
-    struct wayland_output *output;
-    struct wl_output *best = NULL;
-    RECT output_rect, temp, intersect = {0};
-    const RECT *window_rect = &surface->window.rect;
-
-    wl_list_for_each(output, &process_wayland.output_list, link)
-    {
-        SetRect(&output_rect, 0, 0,
-                output->current.current_mode->width,
-                output->current.current_mode->height);
-        OffsetRect(&output_rect,
-                output->current.resolved_x,
-                output->current.resolved_y);
-
-        TRACE("output %s: %s, window %s\n",
-              output->current.name,
-              wine_dbgstr_rect(&output_rect),
-              wine_dbgstr_rect(window_rect));
-
-        if (intersect_rect(&temp, window_rect, &output_rect) &&
-                area_rect(&temp) > area_rect(&intersect))
-        {
-            intersect = temp;
-            best = output->wl_output;
-        }
-    }
-
-    if (!best)
-        WARN("Could not find associated wl_output for rect %s!\n",
-             wine_dbgstr_rect(window_rect));
-
-    return best;
-}
-
 /**********************************************************************
  *          wayland_surface_reconfigure_geometry
  *
@@ -704,7 +668,7 @@ static void wayland_surface_reconfigure_geometry(struct wayland_surface *surface
         {
             struct wl_output *output;
             pthread_mutex_lock(&process_wayland.output_mutex);
-            output = wayland_surface_get_best_output(surface);
+            output = wayland_get_best_output_for_rect(&surface->window.rect);
             if (output != surface->wl_output)
             {
                 TRACE("Resetting fullscreen state: output %p surface output %p\n",
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 33864f6eab1..a8e9d35ba02 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -224,7 +224,6 @@ struct wayland_output_state
     uint32_t max_luminance;
     uint32_t min_luminance;
     char *name;
-    int resolved_x, resolved_y; /* store positions post overlap correction */
     int logical_x, logical_y;
     int logical_w, logical_h;
     int transform;
@@ -335,6 +334,7 @@ BOOL wayland_process_init(void);
 BOOL wayland_output_create(uint32_t id, uint32_t version);
 void wayland_output_destroy(struct wayland_output *output);
 void wayland_output_use_xdg_extension(struct wayland_output *output);
+struct wl_output *wayland_get_best_output_for_rect(const RECT *window_rect);
 
 /**********************************************************************
  *          Wayland surface
@@ -366,7 +366,6 @@ void wayland_client_surface_detach(struct wayland_client_surface *client);
 void wayland_surface_ensure_contents(struct wayland_surface *surface);
 void wayland_surface_set_title(struct wayland_surface *surface, LPCWSTR title);
 void wayland_surface_set_icon(struct wayland_surface *surface, UINT type, ICONINFO *ii);
-struct wl_output *wayland_surface_get_best_output(struct wayland_surface *surface);
 
 static inline BOOL wayland_surface_is_toplevel(struct wayland_surface *surface)
 {
diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index 99769dce0b5..2752ad2a469 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -274,9 +274,11 @@ static void wayland_surface_update_state_toplevel(struct wayland_surface *surfac
         if ((surface->window.state & WAYLAND_SURFACE_CONFIG_STATE_FULLSCREEN) &&
            !(surface->current.state & WAYLAND_SURFACE_CONFIG_STATE_FULLSCREEN))
         {
+            struct wl_output *output;
             pthread_mutex_lock(&process_wayland.output_mutex);
-            xdg_toplevel_set_fullscreen(surface->xdg_toplevel,
-                        wayland_surface_get_best_output(surface));
+            output = wayland_get_best_output_for_rect(&surface->window.rect);
+            xdg_toplevel_set_fullscreen(surface->xdg_toplevel, output);
+            surface->wl_output = output;
             pthread_mutex_unlock(&process_wayland.output_mutex);
         }
     }
-- 
2.50.0


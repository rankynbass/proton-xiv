From c2189e27cab8d0a832bf27357215e39cea9e2c41 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Fri, 30 May 2025 11:17:38 -0400
Subject: [PATCH 073/166] winewayland: Update min/max window based on window
 resizability

---
 dlls/winewayland.drv/wayland_surface.c | 70 +++++++++++++++++++-------
 1 file changed, 53 insertions(+), 17 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_surface.c b/dlls/winewayland.drv/wayland_surface.c
index e0d89ba7cf6..3d30c37e58a 100644
--- a/dlls/winewayland.drv/wayland_surface.c
+++ b/dlls/winewayland.drv/wayland_surface.c
@@ -611,6 +611,15 @@ static void wayland_surface_get_rect_in_monitor(struct wayland_surface *surface,
     OffsetRect(rect, -surface->window.rect.left, -surface->window.rect.top);
 }
 
+static BOOL is_window_resizable(struct wayland_surface *surface)
+{
+    DWORD style = NtUserGetWindowLongW(surface->hwnd, GWL_STYLE);
+
+    if (style & WS_THICKFRAME) return TRUE;
+
+    return surface->current.state & WAYLAND_SURFACE_CONFIG_STATE_FULLSCREEN;
+}
+
 /**********************************************************************
  *          wayland_surface_reconfigure_geometry
  *
@@ -662,26 +671,53 @@ static void wayland_surface_reconfigure_geometry(struct wayland_surface *surface
                                         rect.left, rect.top,
                                         rect.right - rect.left,
                                         rect.bottom - rect.top);
-        /* HACK: reset fullscreen state to ensure surface is on correct output */
-        if (surface->current.state & WAYLAND_SURFACE_CONFIG_STATE_FULLSCREEN
-            && wayland_surface_is_toplevel(surface))
+        if (wayland_surface_is_toplevel(surface))
         {
-            struct wl_output *output;
-            pthread_mutex_lock(&process_wayland.output_mutex);
-            output = wayland_get_best_output_for_rect(&surface->window.rect);
-            if (output != surface->wl_output)
+            /* HACK: update min/max size depending on if the window is resizable */
+            if (!is_window_resizable(surface))
             {
-                TRACE("Resetting fullscreen state: output %p surface output %p\n",
-                      output, surface->wl_output);
-                xdg_toplevel_unset_fullscreen(surface->xdg_toplevel);
-                wl_display_flush(process_wayland.wl_display);
-                xdg_toplevel_set_fullscreen(surface->xdg_toplevel, output);
-                /* In case we don't get enter event from compositor
-                   happens on sway for instance
-                */
-                surface->wl_output = output;
+                xdg_toplevel_set_min_size(
+                    surface->xdg_toplevel,
+                    rect.right - rect.left,
+                    rect.bottom - rect.top);
+                xdg_toplevel_set_max_size(
+                    surface->xdg_toplevel,
+                    rect.right - rect.left,
+                    rect.bottom - rect.top
+                );
+            }
+            else
+            {
+                xdg_toplevel_set_min_size(
+                    surface->xdg_toplevel,
+                    0, 0
+                );
+                xdg_toplevel_set_max_size(
+                    surface->xdg_toplevel,
+                    0, 0
+                );
+            }
+
+            /* HACK: reset fullscreen state to ensure surface is on correct output */
+            if (surface->current.state & WAYLAND_SURFACE_CONFIG_STATE_FULLSCREEN)
+            {
+                struct wl_output *output;
+                pthread_mutex_lock(&process_wayland.output_mutex);
+                output = wayland_get_best_output_for_rect(&surface->window.rect);
+                if (output != surface->wl_output)
+                {
+                    TRACE("Resetting fullscreen state: output %p surface output %p\n",
+                        output, surface->wl_output);
+                    xdg_toplevel_unset_fullscreen(surface->xdg_toplevel);
+                    wl_display_flush(process_wayland.wl_display);
+                    xdg_toplevel_set_fullscreen(surface->xdg_toplevel, output);
+                    /* In case we don't get enter event from compositor
+                    happens on sway for instance
+                    */
+                    surface->wl_output = output;
+                }
+                pthread_mutex_unlock(&process_wayland.output_mutex);
             }
-            pthread_mutex_unlock(&process_wayland.output_mutex);
         }
     }
 }
-- 
2.50.0


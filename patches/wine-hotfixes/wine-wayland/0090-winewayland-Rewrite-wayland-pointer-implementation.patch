From 24f7f4335d34c3761c74b7aa2f80c091926b16f3 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Sun, 8 Jun 2025 13:14:24 -0400
Subject: [PATCH 090/166] winewayland: Rewrite wayland pointer implementation.

---
 dlls/winewayland.drv/wayland_pointer.c | 287 +++++++++++++++----------
 dlls/winewayland.drv/waylanddrv.h      |  32 ++-
 2 files changed, 203 insertions(+), 116 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_pointer.c b/dlls/winewayland.drv/wayland_pointer.c
index 09cc289e8f8..b67da1c4fa2 100644
--- a/dlls/winewayland.drv/wayland_pointer.c
+++ b/dlls/winewayland.drv/wayland_pointer.c
@@ -116,9 +116,8 @@ static HWND wayland_pointer_get_focused_hwnd(void)
     return hwnd;
 }
 
-static void pointer_handle_motion_internal(wl_fixed_t sx, wl_fixed_t sy, uint32_t time)
+static void pointer_handle_motion_internal(wl_fixed_t sx, wl_fixed_t sy)
 {
-    INPUT input = {0};
     RECT *window_rect;
     HWND hwnd;
     POINT screen;
@@ -151,42 +150,18 @@ static void pointer_handle_motion_internal(wl_fixed_t sx, wl_fixed_t sy, uint32_
 
     wayland_win_data_release(data);
 
-    input.type = INPUT_MOUSE;
-    input.mi.time = time;
-    input.mi.dx = screen.x;
-    input.mi.dy = screen.y;
-    input.mi.dwFlags = MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE;
+    pthread_mutex_lock(&pointer->mutex);
 
-    TRACE("hwnd=%p wayland_xy=%.2f,%.2f screen_xy=%d,%d\n",
-          hwnd, wl_fixed_to_double(sx), wl_fixed_to_double(sy),
-          (int)screen.x, (int)screen.y);
+    pointer->pointer_frame.x = screen.x;
+    pointer->pointer_frame.y = screen.y;
 
-    /* ignore when time = 0 since we need to store the initial position upon enter */
-    if (InterlockedCompareExchange(&pointer->confinement_updated, FALSE, TRUE) || !time)
-    {
-        if (time) TRACE("Ignoring, confinement was updated recently!\n");
-        else NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_RAW, &input, 0);
-        pthread_mutex_lock(&pointer->mutex);
-        pointer->last_x = screen.x;
-        pointer->last_y = screen.y;
-        pthread_mutex_unlock(&pointer->mutex);
-        return;
-    }
+    pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_ABS;
 
-    NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_RAW, &input, 0);
-
-    pthread_mutex_lock(&pointer->mutex);
-    input.mi.dx -= pointer->last_x;
-    input.mi.dy -= pointer->last_y;
-    input.mi.dwFlags = MOUSEEVENTF_MOVE;
-
-    pointer->last_x = screen.x;
-    pointer->last_y = screen.y;
     pthread_mutex_unlock(&pointer->mutex);
 
-    TRACE("relative=%d,%d\n", input.mi.dx, input.mi.dy);
-
-    NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_MSG, &input, 0);
+    TRACE("hwnd=%p wayland_xy=%.2f,%.2f screen_xy=%d,%d\n",
+                 hwnd, wl_fixed_to_double(sx), wl_fixed_to_double(sy),
+                 (int)screen.x, (int)screen.y);
 }
 
 static void pointer_handle_motion(void *data, struct wl_pointer *wl_pointer,
@@ -195,9 +170,9 @@ static void pointer_handle_motion(void *data, struct wl_pointer *wl_pointer,
     struct wayland_pointer *pointer = &process_wayland.pointer;
 
     /* Ignore absolute motion events if in relative mode. */
-    if (pointer->zwp_relative_pointer_v1) return;
+    if (pointer->relative_only) return;
 
-    pointer_handle_motion_internal(sx, sy, time);
+    pointer_handle_motion_internal(sx, sy);
 }
 
 static void wayland_set_cursor(HWND hwnd, HCURSOR hcursor, BOOL use_hcursor);
@@ -221,6 +196,13 @@ static void pointer_handle_enter(void *data, struct wl_pointer *wl_pointer,
     pthread_mutex_lock(&pointer->mutex);
     pointer->focused_hwnd = hwnd;
     pointer->enter_serial = serial;
+    /* reset all accumulators */
+    pointer->pointer_frame.dx = 0;
+    pointer->pointer_frame.dy = 0;
+    pointer->pointer_frame.dx_unaccel = 0;
+    pointer->pointer_frame.dy_unaccel = 0;
+    pointer->pointer_frame.wheel = 0;
+    pointer->pointer_frame.wheelH = 0;
     pthread_mutex_unlock(&pointer->mutex);
 
     /* The cursor is undefined at every enter, so we set it again with
@@ -230,7 +212,7 @@ static void pointer_handle_enter(void *data, struct wl_pointer *wl_pointer,
     /* Handle the enter as a motion, to account for cases where the
      * window first appears beneath the pointer and won't get a separate
      * motion event. */
-    pointer_handle_motion_internal(sx, sy, 0);
+    pointer_handle_motion_internal(sx, sy);
 }
 
 static void pointer_handle_leave(void *data, struct wl_pointer *wl_pointer,
@@ -298,7 +280,6 @@ static void pointer_handle_axis(void *data, struct wl_pointer *wl_pointer,
                                 uint32_t time, uint32_t axis, wl_fixed_t value)
 {
     HWND hwnd;
-    INPUT input = {0};
     /*
         We are given a distance in the surface local coordinate system.
         However, we need to convert that into a WHEEL_DELTA which represents
@@ -318,9 +299,7 @@ static void pointer_handle_axis(void *data, struct wl_pointer *wl_pointer,
     struct wayland_pointer *pointer = &process_wayland.pointer;
 
     if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
-    if (InterlockedCompareExchange(&pointer->discrete_event_handled, FALSE, TRUE)) return;
-
-    input.type = INPUT_MOUSE;
+    if (InterlockedCompareExchange(&pointer->pointer_frame.discrete_event_handled, FALSE, TRUE)) return;
 
     pthread_mutex_lock(&pointer->mutex);
 
@@ -336,38 +315,108 @@ static void pointer_handle_axis(void *data, struct wl_pointer *wl_pointer,
     switch (axis)
     {
         case WL_POINTER_AXIS_VERTICAL_SCROLL:
-            input.mi.dwFlags = MOUSEEVENTF_WHEEL;
-            pointer->accum_wheel += -scroll_value;
-            input.mi.mouseData = trunc(pointer->accum_wheel / WHEEL_DELTA) * WHEEL_DELTA;
-            pointer->accum_wheel -= (int)input.mi.mouseData;
+            pointer->pointer_frame.wheel -= scroll_value;
+            pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_WHEEL;
             break;
         case WL_POINTER_AXIS_HORIZONTAL_SCROLL:
-            input.mi.dwFlags = MOUSEEVENTF_HWHEEL;
-            pointer->accum_wheelH += scroll_value;
-            input.mi.mouseData = trunc(pointer->accum_wheelH / WHEEL_DELTA) * WHEEL_DELTA;
-            pointer->accum_wheelH -= (int)input.mi.mouseData;
+            pointer->pointer_frame.wheel += scroll_value;
+            pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_WHEELH;
             break;
         default: break;
     }
 
     pthread_mutex_unlock(&pointer->mutex);
 
-    TRACE("hwnd=%p axis=%u value=%lf out=%d\n", hwnd, axis, scroll_value, (int)input.mi.mouseData);
-
-    if (input.mi.mouseData)
-        NtUserSendHardwareInput(hwnd, 0, &input, 0);
+    TRACE("hwnd=%p axis=%u value=%.2f\n", hwnd, axis, scroll_value);
 }
 
-/* TODO: move hardware input logic into the pointer frame (only for pointers)
-         maybe for future upstream implementation we can move everything?
-*/
+/* FIXME: do we want to handle buttons here? */
 static void pointer_handle_frame(void *data, struct wl_pointer *wl_pointer)
 {
     HWND hwnd;
+    INPUT input = {0};
+    struct wayland_pointer *pointer = &process_wayland.pointer;
 
     if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
+    /* Drop the frame if the confinement was updated recently */
+    if (InterlockedCompareExchange(&pointer->confinement_updated, FALSE, TRUE))
+    {
+        TRACE("confinement updated! dropping pointer frame!\n");
+        return;
+    }
 
     TRACE("hwnd=%p\n", hwnd);
+
+    pthread_mutex_lock(&pointer->mutex);
+
+    input.type = INPUT_MOUSE;
+
+    if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_ABS)
+    {
+        input.mi.dx = pointer->pointer_frame.x;
+        input.mi.dy = pointer->pointer_frame.y;
+        input.mi.dwFlags = MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE;
+        NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_RAW, &input, 0);
+
+        if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_REL)
+        {
+            input.mi.dx = round(pointer->pointer_frame.dx);
+            input.mi.dy = round(pointer->pointer_frame.dy);
+            pointer->pointer_frame.dx -= input.mi.dx;
+            pointer->pointer_frame.dy -= input.mi.dy;
+            pointer->pointer_frame.dx_unaccel
+                -= round(pointer->pointer_frame.dx_unaccel);
+            pointer->pointer_frame.dy_unaccel
+                -= round(pointer->pointer_frame.dy_unaccel);
+            input.mi.dwFlags = MOUSEEVENTF_MOVE;
+            NtUserSendHardwareInput(hwnd, SEND_HWMSG_NO_MSG, &input, 0);
+        }
+    } else if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_REL) {
+        /* HACK: use raw input when there is only relative motion */
+        input.mi.dx = round(pointer->pointer_frame.dx_unaccel);
+        input.mi.dy = round(pointer->pointer_frame.dy_unaccel);
+        pointer->pointer_frame.dx_unaccel -= input.mi.dx;
+        pointer->pointer_frame.dy_unaccel -= input.mi.dy;
+        pointer->pointer_frame.dx -= round(pointer->pointer_frame.dx);
+        pointer->pointer_frame.dy -= round(pointer->pointer_frame.dy);
+        input.mi.dwFlags = MOUSEEVENTF_MOVE;
+        NtUserSendHardwareInput(hwnd, 0, &input, 0); /* FIXME: flags ? */
+    }
+
+    /* zero these values just in case */
+    input.mi.dx = 0;
+    input.mi.dy = 0;
+
+    if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_WHEEL)
+    {
+        input.mi.mouseData = trunc(pointer->pointer_frame.wheel / WHEEL_DELTA) * WHEEL_DELTA;
+        pointer->pointer_frame.wheel -= (int)input.mi.mouseData;
+        input.mi.dwFlags = MOUSEEVENTF_WHEEL;
+        if (input.mi.mouseData)
+            NtUserSendHardwareInput(hwnd, 0, &input, 0);
+    }
+
+    if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_WHEELH)
+    {
+        input.mi.mouseData = trunc(pointer->pointer_frame.wheelH / WHEEL_DELTA) * WHEEL_DELTA;
+        pointer->pointer_frame.wheelH -= (int)input.mi.mouseData;
+        input.mi.dwFlags = MOUSEEVENTF_HWHEEL;
+        if (input.mi.mouseData)
+            NtUserSendHardwareInput(hwnd, 0, &input, 0);
+    }
+
+    /* reset accumulators when scroll event ends */
+    if (pointer->pointer_frame.axis_stop & WAYLAND_POINTER_AXIS_STOP_VERTICAL)
+        pointer->pointer_frame.wheel = 0;
+    if (pointer->pointer_frame.axis_stop & WAYLAND_POINTER_AXIS_STOP_HORIZONTAL)
+        pointer->pointer_frame.wheelH = 0;
+
+    /* reset flags */
+    pointer->pointer_frame.flags = 0;
+    pointer->pointer_frame.axis_stop = 0;
+    InterlockedExchange(&pointer->pointer_frame.discrete_event_handled, FALSE);
+
+    pthread_mutex_unlock(&pointer->mutex);
 }
 
 static void pointer_handle_axis_source(void *data, struct wl_pointer *wl_pointer,
@@ -378,37 +427,51 @@ static void pointer_handle_axis_source(void *data, struct wl_pointer *wl_pointer
 static void pointer_handle_axis_stop(void *data, struct wl_pointer *wl_pointer,
                                      uint32_t time, uint32_t axis)
 {
+    HWND hwnd;
+    struct wayland_pointer *pointer = &process_wayland.pointer;
+
+    if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
+
+    pthread_mutex_lock(&pointer->mutex);
+
+    if (axis == WL_POINTER_AXIS_VERTICAL_SCROLL)
+        pointer->pointer_frame.axis_stop |= WAYLAND_POINTER_AXIS_STOP_VERTICAL;
+    if (axis == WL_POINTER_AXIS_HORIZONTAL_SCROLL)
+        pointer->pointer_frame.axis_stop |= WAYLAND_POINTER_AXIS_STOP_HORIZONTAL;
+
+    pthread_mutex_unlock(&pointer->mutex);
+
+    TRACE("hwnd=%p axis=%u\n", hwnd, axis);
 }
 
 static void pointer_handle_axis_discrete(void *data, struct wl_pointer *wl_pointer,
                                          uint32_t axis, int32_t discrete)
 {
-    INPUT input = {0};
     HWND hwnd;
     struct wayland_pointer *pointer = &process_wayland.pointer;
 
     if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
 
-    InterlockedExchange(&pointer->discrete_event_handled, TRUE);
+    InterlockedExchange(&pointer->pointer_frame.discrete_event_handled, TRUE);
 
-    input.type = INPUT_MOUSE;
+    pthread_mutex_lock(&pointer->mutex);
 
     switch (axis)
     {
         case WL_POINTER_AXIS_VERTICAL_SCROLL:
-            input.mi.dwFlags = MOUSEEVENTF_WHEEL;
-            input.mi.mouseData = -WHEEL_DELTA * discrete;
+            pointer->pointer_frame.wheel = -WHEEL_DELTA * discrete;
+            pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_WHEEL;
             break;
         case WL_POINTER_AXIS_HORIZONTAL_SCROLL:
-            input.mi.dwFlags = MOUSEEVENTF_HWHEEL;
-            input.mi.mouseData = WHEEL_DELTA * discrete;
+            pointer->pointer_frame.wheelH = WHEEL_DELTA * discrete;
+            pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_WHEELH;
             break;
         default: break;
     }
 
-    TRACE("hwnd=%p axis=%u discrete=%d\n", hwnd, axis, discrete);
+    pthread_mutex_unlock(&pointer->mutex);
 
-    NtUserSendHardwareInput(hwnd, 0, &input, 0);
+    TRACE("hwnd=%p axis=%u discrete=%d\n", hwnd, axis, discrete);
 }
 
 static const struct wl_pointer_listener pointer_listener =
@@ -462,53 +525,46 @@ static void relative_pointer_v1_relative_motion(void *private,
                                                 wl_fixed_t dx, wl_fixed_t dy,
                                                 wl_fixed_t dx_unaccel, wl_fixed_t dy_unaccel)
 {
-    INPUT input = {0};
     HWND hwnd;
     struct wayland_win_data *data;
-    double screen_x = 0.0, screen_y = 0.0;
+    double f_dx = 0.0, f_dy = 0.0, f_dxu = 0.0, f_dyu = 0.0;
     struct wayland_pointer *pointer = &process_wayland.pointer;
-    ULONG64 time_us = ((ULONG64)utime_hi << 32) | utime_lo;
 
     if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
     if (!(data = wayland_win_data_get(hwnd))) return;
 
-    /* Use "raw" input by default. However, it's not nessessarily raw.
-       Additionally, we don't need to scale this value
-    */
-    if (!is_rawinput_disabled())
-    {
-        screen_x = wl_fixed_to_double(dx_unaccel);
-        screen_y = wl_fixed_to_double(dy_unaccel);
-    } else {
-        wayland_motion_delta_to_window(data->wayland_surface,
-                                       wl_fixed_to_double(dx),
-                                       wl_fixed_to_double(dy),
-                                       &screen_x, &screen_y);
-    }
+    f_dxu = wl_fixed_to_double(dx_unaccel);
+    f_dyu = wl_fixed_to_double(dy_unaccel);
+    wayland_motion_delta_to_window(data->wayland_surface,
+                                   wl_fixed_to_double(dx),
+                                   wl_fixed_to_double(dy),
+                                   &f_dx, &f_dy);
 
     wayland_win_data_release(data);
 
     pthread_mutex_lock(&pointer->mutex);
 
-    pointer->accum_x += screen_x;
-    pointer->accum_y += screen_y;
+    pointer->pointer_frame.dx_unaccel += f_dxu;
+    pointer->pointer_frame.dy_unaccel += f_dyu;
+    pointer->pointer_frame.dx += f_dx;
+    pointer->pointer_frame.dy += f_dy;
 
-    input.type = INPUT_MOUSE;
-    input.mi.time = round(time_us / 1000.0);
-    input.mi.dx = round(pointer->accum_x);
-    input.mi.dy = round(pointer->accum_y);
-    input.mi.dwFlags = MOUSEEVENTF_MOVE;
-
-    pointer->accum_x -= input.mi.dx;
-    pointer->accum_y -= input.mi.dy;
+    if (is_rawinput_disabled())
+    {
+        pointer->pointer_frame.dx_unaccel = pointer->pointer_frame.dx;
+        pointer->pointer_frame.dy_unaccel = pointer->pointer_frame.dy;
+    }
 
-    pthread_mutex_unlock(&pointer->mutex);
+    pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_REL;
 
-    TRACE("hwnd=%p wayland_dxdy=%.2f,%.2f accum_dxdy=%d,%d\n",
-          hwnd, screen_x, screen_y,
-          (int)input.mi.dx, (int)input.mi.dy);
+    TRACE("hwnd=%p dxdy=%.2f,%.2f dxdy_raw=%.2f,%.2f\n",
+          hwnd,
+          pointer->pointer_frame.dx,
+          pointer->pointer_frame.dy,
+          pointer->pointer_frame.dx_unaccel,
+          pointer->pointer_frame.dy_unaccel);
 
-    NtUserSendHardwareInput(hwnd, 0, &input, 0);
+    pthread_mutex_unlock(&pointer->mutex);
 }
 
 static const struct zwp_relative_pointer_v1_listener relative_pointer_v1_listener =
@@ -524,8 +580,24 @@ void wayland_pointer_init(struct wl_pointer *wl_pointer)
     pointer->wl_pointer = wl_pointer;
     pointer->focused_hwnd = NULL;
     pointer->enter_serial = 0;
+    memset(&pointer->pointer_frame, 0, sizeof(pointer->pointer_frame));
     pthread_mutex_unlock(&pointer->mutex);
     wl_pointer_add_listener(pointer->wl_pointer, &pointer_listener, NULL);
+
+    /* Always enable relative pointer */
+    if (process_wayland.zwp_relative_pointer_manager_v1)
+    {
+        pointer->zwp_relative_pointer_v1 =
+            zwp_relative_pointer_manager_v1_get_relative_pointer(
+            process_wayland.zwp_relative_pointer_manager_v1,
+            pointer->wl_pointer);
+
+            zwp_relative_pointer_v1_add_listener(
+            pointer->zwp_relative_pointer_v1,
+            &relative_pointer_v1_listener,
+            NULL
+        );
+    }
 }
 
 void wayland_pointer_deinit(void)
@@ -1090,24 +1162,21 @@ static void wayland_pointer_update_constraint(struct wl_surface *wl_surface,
     needs_relative = !is_visible && pointer->constraint_hwnd &&
                      pointer->constraint_hwnd == pointer->focused_hwnd;
 
-    if (needs_relative && !pointer->zwp_relative_pointer_v1)
+    if (needs_relative && !pointer->relative_only)
     {
-        pointer->accum_x = pointer->accum_y = 0;
-        pointer->zwp_relative_pointer_v1 =
-            zwp_relative_pointer_manager_v1_get_relative_pointer(
-                process_wayland.zwp_relative_pointer_manager_v1,
-                pointer->wl_pointer);
-        zwp_relative_pointer_v1_add_listener(pointer->zwp_relative_pointer_v1,
-                                             &relative_pointer_v1_listener, NULL);
-        TRACE("Enabling relative motion\n");
+        pointer->pointer_frame.dx = 0;
+        pointer->pointer_frame.dy = 0;
+        pointer->pointer_frame.dx_unaccel = 0;
+        pointer->pointer_frame.dy_unaccel = 0;
+        TRACE("Enabling relative only motion\n");
     }
-    else if (!needs_relative && pointer->zwp_relative_pointer_v1)
+    else if (!needs_relative && pointer->relative_only)
     {
-        zwp_relative_pointer_v1_destroy(pointer->zwp_relative_pointer_v1);
-        pointer->zwp_relative_pointer_v1 = NULL;
-        TRACE("Disabling relative motion\n");
+        TRACE("Disabling relative only motion\n");
     }
 
+    pointer->relative_only = needs_relative;
+
     InterlockedExchange(&pointer->confinement_updated, TRUE);
 }
 
@@ -1134,7 +1203,7 @@ BOOL WAYLAND_SetCursorPos(INT x, INT y)
     struct wayland_pointer *pointer = &process_wayland.pointer;
 
     pthread_mutex_lock(&pointer->mutex);
-    if (pointer->zwp_relative_pointer_v1)
+    if (pointer->relative_only)
     {
         pthread_mutex_unlock(&pointer->mutex);
         return FALSE;
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 29f692a891e..81af253d215 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -88,6 +88,20 @@ enum wayland_surface_role
     WAYLAND_SURFACE_ROLE_SUBSURFACE,
 };
 
+enum wayland_pointer_frame_flags
+{
+    WAYLAND_POINTER_FRAME_ABS = (1 << 0),
+    WAYLAND_POINTER_FRAME_REL = (1 << 1),
+    WAYLAND_POINTER_FRAME_WHEEL = (1 << 2),
+    WAYLAND_POINTER_FRAME_WHEELH = (1 << 3)
+};
+
+enum wayland_pointer_axis_stop_flags
+{
+    WAYLAND_POINTER_AXIS_STOP_VERTICAL = (1 << 0),
+    WAYLAND_POINTER_AXIS_STOP_HORIZONTAL = (1 << 1)
+};
+
 struct wayland_keyboard
 {
     struct wl_keyboard *wl_keyboard;
@@ -116,16 +130,20 @@ struct wayland_pointer
     HWND constraint_hwnd;
     BOOL pending_warp;
     BOOL confinement_updated;
+    BOOL relative_only;
     uint32_t enter_serial;
     uint32_t button_serial;
-    LONG last_x;
-    LONG last_y;
     struct wayland_cursor cursor;
-    double accum_x;
-    double accum_y;
-    double accum_wheel;
-    double accum_wheelH;
-    LONG discrete_event_handled;
+    struct
+    {
+        LONG discrete_event_handled;
+        int x, y;
+        double dx, dy;
+        double dx_unaccel, dy_unaccel;
+        double wheel, wheelH;
+        unsigned int flags;
+        unsigned int axis_stop;
+    } pointer_frame;
     pthread_mutex_t mutex;
 };
 
-- 
2.50.0


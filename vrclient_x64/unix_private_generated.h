/* This file is auto-generated, do not edit. */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

struct u_IVRSystem_IVRSystem_003
{
#ifdef __cplusplus
    virtual void GetWindowBounds( int32_t *, int32_t *, uint32_t *, uint32_t * ) = 0;
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual void GetEyeOutputViewport( uint32_t, uint32_t *, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float, uint32_t ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual DistortionCoordinates_t ComputeDistortion( uint32_t, float, float ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t *, int32_t * ) = 0;
    virtual int8_t AttachToWindow( void * ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual int8_t LoadRenderModel( const char *, u_RenderModel_t_090 * ) = 0;
    virtual void FreeRenderModel( u_RenderModel_t_090 * ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_090 * ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_090 *, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t * ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( const Compositor_OverlaySettings *, HmdVector2_t, HmdVector2_t, uint32_t, uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRChaperone_IVRChaperone_002
{
#ifdef __cplusplus
    virtual uint32_t GetCalibrationState(  ) = 0;
    virtual int8_t GetSoftBoundsInfo( ChaperoneSoftBoundsInfo_t * ) = 0;
    virtual int8_t GetHardBoundsInfo( HmdQuad_t *, uint32_t * ) = 0;
    virtual int8_t GetSeatedBoundsInfo( ChaperoneSeatedBoundsInfo_t * ) = 0;
    virtual void ReloadInfo(  ) = 0;
    virtual void SetSceneColor( HmdColor_t ) = 0;
    virtual void GetBoundsColor( HmdColor_t *, int32_t ) = 0;
    virtual int8_t AreBoundsVisible(  ) = 0;
    virtual void ForceBoundsVisible( int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_005
{
#ifdef __cplusplus
    virtual uint32_t GetLastError( char *, uint32_t ) = 0;
    virtual void SetVSync( int8_t ) = 0;
    virtual int8_t GetVSync(  ) = 0;
    virtual void SetGamma( float ) = 0;
    virtual float GetGamma(  ) = 0;
    virtual void SetGraphicsDevice( uint32_t, void * ) = 0;
    virtual void WaitGetPoses( TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void Submit( uint32_t, void *, Compositor_TextureBounds * ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void GetOverlayDefaults( Compositor_OverlaySettings * ) = 0;
    virtual void SetOverlay( void *, Compositor_OverlaySettings * ) = 0;
    virtual void SetOverlayRaw( void *, uint32_t, uint32_t, uint32_t, Compositor_OverlaySettings * ) = 0;
    virtual void SetOverlayFromFile( const char *, Compositor_OverlaySettings * ) = 0;
    virtual void ClearOverlay(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_090 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual int8_t ComputeOverlayIntersection( const Compositor_OverlaySettings *, float, uint32_t, HmdVector3_t, HmdVector3_t, HmdVector2_t *, HmdVector3_t * ) = 0;
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_004
{
#ifdef __cplusplus
    virtual void GetWindowBounds( int32_t *, int32_t *, uint32_t *, uint32_t * ) = 0;
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual void GetEyeOutputViewport( uint32_t, uint32_t *, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float, uint32_t ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual DistortionCoordinates_t ComputeDistortion( uint32_t, float, float ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t *, int32_t * ) = 0;
    virtual int8_t AttachToWindow( void * ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_092 * ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_092 *, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t * ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_006
{
#ifdef __cplusplus
    virtual uint32_t GetLastError( char *, uint32_t ) = 0;
    virtual void SetVSync( int8_t ) = 0;
    virtual int8_t GetVSync(  ) = 0;
    virtual void SetGamma( float ) = 0;
    virtual float GetGamma(  ) = 0;
    virtual void SetGraphicsDevice( uint32_t, void * ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t Submit( uint32_t, void *, VRTextureBounds_t * ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_090 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_001
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayGamma( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayGamma( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayVisibility( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayVisibility( uint64_t, uint32_t ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_092 * ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, void * ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual int8_t IsSystemOverlayVisible(  ) = 0;
    virtual int8_t IsActiveSystemOverlay( uint64_t ) = 0;
    virtual uint32_t SetSystemOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetSystemOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRRenderModels_IVRRenderModels_001
{
#ifdef __cplusplus
    virtual int8_t LoadRenderModel( const char *, u_RenderModel_t_090 * ) = 0;
    virtual void FreeRenderModel( u_RenderModel_t_090 * ) = 0;
    virtual uint32_t GetRenderModelName( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetRenderModelCount(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_005
{
#ifdef __cplusplus
    virtual void GetWindowBounds( int32_t *, int32_t *, uint32_t *, uint32_t * ) = 0;
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual void GetEyeOutputViewport( uint32_t, uint32_t *, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float, uint32_t ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual DistortionCoordinates_t ComputeDistortion( uint32_t, float, float ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t *, int32_t * ) = 0;
    virtual int8_t AttachToWindow( void * ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_097 * ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_097 *, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t * ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_007
{
#ifdef __cplusplus
    virtual uint32_t GetLastError( char *, uint32_t ) = 0;
    virtual void SetVSync( int8_t ) = 0;
    virtual int8_t GetVSync(  ) = 0;
    virtual void SetGamma( float ) = 0;
    virtual float GetGamma(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t Submit( uint32_t, uint32_t, void *, const VRTextureBounds_t * ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_093 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_002
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayGamma( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayGamma( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_093 * ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, uint32_t, void * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRNotifications_IVRNotifications_001
{
#ifdef __cplusplus
    virtual uint32_t GetErrorString( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t CreateNotification( uint64_t, uint64_t, const char *, const char *, const char *, const u_NotificationBitmap *, uint32_t * ) = 0;
    virtual uint32_t DismissNotification( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_003
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayGamma( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayGamma( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_097 * ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, uint32_t, void * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRApplications_IVRApplications_001
{
#ifdef __cplusplus
    virtual uint32_t AddApplicationManifest( const char *, int8_t ) = 0;
    virtual uint32_t RemoveApplicationManifest( const char * ) = 0;
    virtual int8_t IsApplicationInstalled( const char * ) = 0;
    virtual uint32_t GetApplicationCount(  ) = 0;
    virtual uint32_t GetApplicationKeyByIndex( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationKeyByProcessId( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t LaunchApplication( const char * ) = 0;
    virtual uint32_t LaunchDashboardOverlay( const char * ) = 0;
    virtual uint32_t IdentifyApplication( uint32_t, const char * ) = 0;
    virtual uint32_t GetApplicationProcessId( const char * ) = 0;
    virtual const char * GetApplicationsErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t GetApplicationPropertyString( const char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetApplicationPropertyBool( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetHomeApplication( char *, uint32_t ) = 0;
    virtual uint32_t SetHomeApplication( const char * ) = 0;
    virtual uint32_t SetApplicationAutoLaunch( const char *, int8_t ) = 0;
    virtual int8_t GetApplicationAutoLaunch( const char * ) = 0;
    virtual uint32_t GetStartingApplication( char *, uint32_t ) = 0;
    virtual uint32_t GetTransitionState(  ) = 0;
    virtual uint32_t PerformApplicationPrelaunchCheck( const char * ) = 0;
    virtual const char * GetApplicationsTransitionStateNameFromEnum( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_004
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayGamma( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayGamma( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_097 * ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, uint32_t, void * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_006
{
#ifdef __cplusplus
    virtual void GetWindowBounds( int32_t *, int32_t *, uint32_t *, uint32_t * ) = 0;
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual void GetEyeOutputViewport( uint32_t, uint32_t *, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float, uint32_t ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual DistortionCoordinates_t ComputeDistortion( uint32_t, float, float ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t *, int32_t * ) = 0;
    virtual int8_t AttachToWindow( void * ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_0910 * ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_0910 *, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t * ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSettings_IVRSettings_001
{
#ifdef __cplusplus
    virtual const char * GetSettingsErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t Sync( int8_t, uint32_t * ) = 0;
    virtual int8_t GetBool( const char *, const char *, int8_t, uint32_t * ) = 0;
    virtual void SetBool( const char *, const char *, int8_t, uint32_t * ) = 0;
    virtual int32_t GetInt32( const char *, const char *, int32_t, uint32_t * ) = 0;
    virtual void SetInt32( const char *, const char *, int32_t, uint32_t * ) = 0;
    virtual float GetFloat( const char *, const char *, float, uint32_t * ) = 0;
    virtual void SetFloat( const char *, const char *, float, uint32_t * ) = 0;
    virtual void GetString( const char *, const char *, char *, uint32_t, const char *, uint32_t * ) = 0;
    virtual void SetString( const char *, const char *, const char *, uint32_t * ) = 0;
    virtual void RemoveSection( const char *, uint32_t * ) = 0;
    virtual void RemoveKeyInSection( const char *, const char *, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_008
{
#ifdef __cplusplus
    virtual uint32_t GetLastError( char *, uint32_t ) = 0;
    virtual void SetVSync( int8_t ) = 0;
    virtual int8_t GetVSync(  ) = 0;
    virtual void SetGamma( float ) = 0;
    virtual float GetGamma(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t Submit( uint32_t, uint32_t, void *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_093 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual void SetSkyboxOverride( uint32_t, void *, void *, void *, void *, void *, void * ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_005
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayGamma( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayGamma( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_0910 * ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual int8_t IsFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, uint32_t, void * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_009
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float, uint32_t ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual DistortionCoordinates_t ComputeDistortion( uint32_t, float, float ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_0912 * ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_0912 *, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t * ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual void AcknowledgeQuit_UserPrompt(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRApplications_IVRApplications_002
{
#ifdef __cplusplus
    virtual uint32_t AddApplicationManifest( const char *, int8_t ) = 0;
    virtual uint32_t RemoveApplicationManifest( const char * ) = 0;
    virtual int8_t IsApplicationInstalled( const char * ) = 0;
    virtual uint32_t GetApplicationCount(  ) = 0;
    virtual uint32_t GetApplicationKeyByIndex( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationKeyByProcessId( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t LaunchApplication( const char * ) = 0;
    virtual uint32_t LaunchDashboardOverlay( const char * ) = 0;
    virtual uint32_t IdentifyApplication( uint32_t, const char * ) = 0;
    virtual uint32_t GetApplicationProcessId( const char * ) = 0;
    virtual const char * GetApplicationsErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t GetApplicationPropertyString( const char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetApplicationPropertyBool( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetApplicationAutoLaunch( const char *, int8_t ) = 0;
    virtual int8_t GetApplicationAutoLaunch( const char * ) = 0;
    virtual uint32_t GetStartingApplication( char *, uint32_t ) = 0;
    virtual uint32_t GetTransitionState(  ) = 0;
    virtual uint32_t PerformApplicationPrelaunchCheck( const char * ) = 0;
    virtual const char * GetApplicationsTransitionStateNameFromEnum( uint32_t ) = 0;
    virtual int8_t IsQuitUserPromptRequested(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRChaperone_IVRChaperone_003
{
#ifdef __cplusplus
    virtual uint32_t GetCalibrationState(  ) = 0;
    virtual int8_t GetPlayAreaSize( float *, float * ) = 0;
    virtual int8_t GetPlayAreaRect( HmdQuad_t * ) = 0;
    virtual void ReloadInfo(  ) = 0;
    virtual void SetSceneColor( HmdColor_t ) = 0;
    virtual void GetBoundsColor( HmdColor_t *, int32_t, float, HmdColor_t * ) = 0;
    virtual int8_t AreBoundsVisible(  ) = 0;
    virtual void ForceBoundsVisible( int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRChaperoneSetup_IVRChaperoneSetup_004
{
#ifdef __cplusplus
    virtual int8_t CommitWorkingCopy( uint32_t ) = 0;
    virtual void RevertWorkingCopy(  ) = 0;
    virtual int8_t GetWorkingPlayAreaSize( float *, float * ) = 0;
    virtual int8_t GetWorkingPlayAreaRect( HmdQuad_t * ) = 0;
    virtual int8_t GetWorkingCollisionBoundsInfo( HmdQuad_t *, uint32_t * ) = 0;
    virtual int8_t GetLiveCollisionBoundsInfo( HmdQuad_t *, uint32_t * ) = 0;
    virtual int8_t GetWorkingSeatedZeroPoseToRawTrackingPose( HmdMatrix34_t * ) = 0;
    virtual int8_t GetWorkingStandingZeroPoseToRawTrackingPose( HmdMatrix34_t * ) = 0;
    virtual void SetWorkingPlayAreaSize( float, float ) = 0;
    virtual void SetWorkingCollisionBoundsInfo( HmdQuad_t *, uint32_t ) = 0;
    virtual void SetWorkingSeatedZeroPoseToRawTrackingPose( const HmdMatrix34_t * ) = 0;
    virtual void SetWorkingStandingZeroPoseToRawTrackingPose( const HmdMatrix34_t * ) = 0;
    virtual void ReloadFromDisk( uint32_t ) = 0;
    virtual int8_t GetLiveSeatedZeroPoseToRawTrackingPose( HmdMatrix34_t * ) = 0;
    virtual void SetWorkingWallTagInfo( uint8_t *, uint32_t ) = 0;
    virtual int8_t GetLiveWallTagInfo( uint8_t *, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_009
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_0913 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRNotifications_IVRNotifications_002
{
#ifdef __cplusplus
    virtual uint32_t CreateNotification( uint64_t, uint64_t, uint32_t, const char *, uint32_t, const u_NotificationBitmap_t *, uint32_t * ) = 0;
    virtual uint32_t RemoveNotification( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_007
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_0912 * ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRRenderModels_IVRRenderModels_002
{
#ifdef __cplusplus
    virtual int8_t LoadRenderModel( const char *, u_RenderModel_t_0912 ** ) = 0;
    virtual void FreeRenderModel( u_RenderModel_t_0912 * ) = 0;
    virtual int8_t LoadTexture( int32_t, u_RenderModel_TextureMap_t_090 ** ) = 0;
    virtual void FreeTexture( u_RenderModel_TextureMap_t_090 * ) = 0;
    virtual uint32_t GetRenderModelName( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetRenderModelCount(  ) = 0;
    virtual uint32_t GetComponentCount( const char * ) = 0;
    virtual uint32_t GetComponentName( const char *, uint32_t, char *, uint32_t ) = 0;
    virtual uint64_t GetComponentButtonMask( const char *, const char * ) = 0;
    virtual uint32_t GetComponentRenderModelName( const char *, const char *, char *, uint32_t ) = 0;
    virtual int8_t GetComponentState( const char *, const char *, const u_VRControllerState001_t *, RenderModel_ComponentState_t * ) = 0;
    virtual int8_t RenderModelHasComponent( const char *, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRTrackedCamera_IVRTrackedCamera_001
{
#ifdef __cplusplus
    virtual int8_t HasCamera( uint32_t ) = 0;
    virtual int8_t GetCameraFirmwareDescription( uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetCameraFrameDimensions( uint32_t, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t SetCameraVideoStreamFormat( uint32_t, uint32_t ) = 0;
    virtual uint32_t GetCameraVideoStreamFormat( uint32_t ) = 0;
    virtual int8_t EnableCameraForStreaming( uint32_t, int8_t ) = 0;
    virtual int8_t StartVideoStream( uint32_t ) = 0;
    virtual int8_t StopVideoStream( uint32_t ) = 0;
    virtual int8_t IsVideoStreamActive( uint32_t ) = 0;
    virtual float GetVideoStreamElapsedTime( uint32_t ) = 0;
    virtual const u_CameraVideoStreamFrame_t_0914 * GetVideoStreamFrame( uint32_t ) = 0;
    virtual int8_t ReleaseVideoStreamFrame( uint32_t, const u_CameraVideoStreamFrame_t_0914 * ) = 0;
    virtual int8_t SetAutoExposure( uint32_t, int8_t ) = 0;
    virtual int8_t PauseVideoStream( uint32_t ) = 0;
    virtual int8_t ResumeVideoStream( uint32_t ) = 0;
    virtual int8_t IsVideoStreamPaused( uint32_t ) = 0;
    virtual int8_t GetCameraDistortion( uint32_t, float, float, float *, float * ) = 0;
    virtual int8_t GetCameraProjection( uint32_t, float, float, float, float, HmdMatrix44_t * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRExtendedDisplay_IVRExtendedDisplay_001
{
#ifdef __cplusplus
    virtual void GetWindowBounds( int32_t *, int32_t *, uint32_t *, uint32_t * ) = 0;
    virtual void GetEyeOutputViewport( uint32_t, uint32_t *, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual void GetDXGIOutputInfo( int32_t *, int32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_010
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float, uint32_t ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual DistortionCoordinates_t ComputeDistortion( uint32_t, float, float ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_0914 * ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_0914 *, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t * ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual void AcknowledgeQuit_UserPrompt(  ) = 0;
    virtual void PerformanceTestEnableCapture( int8_t ) = 0;
    virtual void PerformanceTestReportFidelityLevelChange( int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_008
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_0914 * ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_010
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_0914 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_011
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float, uint32_t ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual DistortionCoordinates_t ComputeDistortion( uint32_t, float, float ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_0918 *, uint32_t ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_0918 *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t * ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual void AcknowledgeQuit_UserPrompt(  ) = 0;
    virtual void PerformanceTestEnableCapture( int8_t ) = 0;
    virtual void PerformanceTestReportFidelityLevelChange( int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRApplications_IVRApplications_003
{
#ifdef __cplusplus
    virtual uint32_t AddApplicationManifest( const char *, int8_t ) = 0;
    virtual uint32_t RemoveApplicationManifest( const char * ) = 0;
    virtual int8_t IsApplicationInstalled( const char * ) = 0;
    virtual uint32_t GetApplicationCount(  ) = 0;
    virtual uint32_t GetApplicationKeyByIndex( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationKeyByProcessId( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t LaunchApplication( const char * ) = 0;
    virtual uint32_t LaunchDashboardOverlay( const char * ) = 0;
    virtual uint32_t IdentifyApplication( uint32_t, const char * ) = 0;
    virtual uint32_t GetApplicationProcessId( const char * ) = 0;
    virtual const char * GetApplicationsErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t GetApplicationPropertyString( const char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetApplicationPropertyBool( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetApplicationPropertyUint64( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetApplicationAutoLaunch( const char *, int8_t ) = 0;
    virtual int8_t GetApplicationAutoLaunch( const char * ) = 0;
    virtual uint32_t GetStartingApplication( char *, uint32_t ) = 0;
    virtual uint32_t GetTransitionState(  ) = 0;
    virtual uint32_t PerformApplicationPrelaunchCheck( const char * ) = 0;
    virtual const char * GetApplicationsTransitionStateNameFromEnum( uint32_t ) = 0;
    virtual int8_t IsQuitUserPromptRequested(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRChaperoneSetup_IVRChaperoneSetup_005
{
#ifdef __cplusplus
    virtual int8_t CommitWorkingCopy( uint32_t ) = 0;
    virtual void RevertWorkingCopy(  ) = 0;
    virtual int8_t GetWorkingPlayAreaSize( float *, float * ) = 0;
    virtual int8_t GetWorkingPlayAreaRect( HmdQuad_t * ) = 0;
    virtual int8_t GetWorkingCollisionBoundsInfo( HmdQuad_t *, uint32_t * ) = 0;
    virtual int8_t GetLiveCollisionBoundsInfo( HmdQuad_t *, uint32_t * ) = 0;
    virtual int8_t GetWorkingSeatedZeroPoseToRawTrackingPose( HmdMatrix34_t * ) = 0;
    virtual int8_t GetWorkingStandingZeroPoseToRawTrackingPose( HmdMatrix34_t * ) = 0;
    virtual void SetWorkingPlayAreaSize( float, float ) = 0;
    virtual void SetWorkingCollisionBoundsInfo( HmdQuad_t *, uint32_t ) = 0;
    virtual void SetWorkingSeatedZeroPoseToRawTrackingPose( const HmdMatrix34_t * ) = 0;
    virtual void SetWorkingStandingZeroPoseToRawTrackingPose( const HmdMatrix34_t * ) = 0;
    virtual void ReloadFromDisk( uint32_t ) = 0;
    virtual int8_t GetLiveSeatedZeroPoseToRawTrackingPose( HmdMatrix34_t * ) = 0;
    virtual void SetWorkingCollisionBoundsTagsInfo( uint8_t *, uint32_t ) = 0;
    virtual int8_t GetLiveCollisionBoundsTagsInfo( uint8_t *, uint32_t * ) = 0;
    virtual int8_t SetWorkingPhysicalBoundsInfo( HmdQuad_t *, uint32_t ) = 0;
    virtual int8_t GetLivePhysicalBoundsInfo( HmdQuad_t *, uint32_t * ) = 0;
    virtual int8_t ExportLiveToBuffer( char *, uint32_t * ) = 0;
    virtual int8_t ImportFromBufferToWorking( const char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_011
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_0915 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_010
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_0918 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRRenderModels_IVRRenderModels_004
{
#ifdef __cplusplus
    virtual uint32_t LoadRenderModel_Async( const char *, u_RenderModel_t_0912 ** ) = 0;
    virtual void FreeRenderModel( u_RenderModel_t_0912 * ) = 0;
    virtual uint32_t LoadTexture_Async( int32_t, u_RenderModel_TextureMap_t_090 ** ) = 0;
    virtual void FreeTexture( u_RenderModel_TextureMap_t_090 * ) = 0;
    virtual uint32_t LoadTextureD3D11_Async( int32_t, void *, void ** ) = 0;
    virtual void FreeTextureD3D11( void * ) = 0;
    virtual uint32_t GetRenderModelName( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetRenderModelCount(  ) = 0;
    virtual uint32_t GetComponentCount( const char * ) = 0;
    virtual uint32_t GetComponentName( const char *, uint32_t, char *, uint32_t ) = 0;
    virtual uint64_t GetComponentButtonMask( const char *, const char * ) = 0;
    virtual uint32_t GetComponentRenderModelName( const char *, const char *, char *, uint32_t ) = 0;
    virtual int8_t GetComponentState( const char *, const char *, const u_VRControllerState001_t *, const RenderModel_ControllerMode_State_t *, RenderModel_ComponentState_t * ) = 0;
    virtual int8_t RenderModelHasComponent( const char *, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRApplications_IVRApplications_004
{
#ifdef __cplusplus
    virtual uint32_t AddApplicationManifest( const char *, int8_t ) = 0;
    virtual uint32_t RemoveApplicationManifest( const char * ) = 0;
    virtual int8_t IsApplicationInstalled( const char * ) = 0;
    virtual uint32_t GetApplicationCount(  ) = 0;
    virtual uint32_t GetApplicationKeyByIndex( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationKeyByProcessId( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t LaunchApplication( const char * ) = 0;
    virtual uint32_t LaunchDashboardOverlay( const char * ) = 0;
    virtual int8_t CancelApplicationLaunch( const char * ) = 0;
    virtual uint32_t IdentifyApplication( uint32_t, const char * ) = 0;
    virtual uint32_t GetApplicationProcessId( const char * ) = 0;
    virtual const char * GetApplicationsErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t GetApplicationPropertyString( const char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetApplicationPropertyBool( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetApplicationPropertyUint64( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetApplicationAutoLaunch( const char *, int8_t ) = 0;
    virtual int8_t GetApplicationAutoLaunch( const char * ) = 0;
    virtual uint32_t GetStartingApplication( char *, uint32_t ) = 0;
    virtual uint32_t GetTransitionState(  ) = 0;
    virtual uint32_t PerformApplicationPrelaunchCheck( const char * ) = 0;
    virtual const char * GetApplicationsTransitionStateNameFromEnum( uint32_t ) = 0;
    virtual int8_t IsQuitUserPromptRequested(  ) = 0;
    virtual uint32_t LaunchInternalProcess( const char *, const char *, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_012
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_0915 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_013
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_0915 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_012
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float, uint32_t ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual DistortionCoordinates_t ComputeDistortion( uint32_t, float, float ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_103 *, uint32_t ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_103 *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t * ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual void AcknowledgeQuit_UserPrompt(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRApplications_IVRApplications_005
{
#ifdef __cplusplus
    virtual uint32_t AddApplicationManifest( const char *, int8_t ) = 0;
    virtual uint32_t RemoveApplicationManifest( const char * ) = 0;
    virtual int8_t IsApplicationInstalled( const char * ) = 0;
    virtual uint32_t GetApplicationCount(  ) = 0;
    virtual uint32_t GetApplicationKeyByIndex( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationKeyByProcessId( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t LaunchApplication( const char * ) = 0;
    virtual uint32_t LaunchTemplateApplication( const char *, const char *, const u_AppOverrideKeys_t *, uint32_t ) = 0;
    virtual uint32_t LaunchDashboardOverlay( const char * ) = 0;
    virtual int8_t CancelApplicationLaunch( const char * ) = 0;
    virtual uint32_t IdentifyApplication( uint32_t, const char * ) = 0;
    virtual uint32_t GetApplicationProcessId( const char * ) = 0;
    virtual const char * GetApplicationsErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t GetApplicationPropertyString( const char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetApplicationPropertyBool( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetApplicationPropertyUint64( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetApplicationAutoLaunch( const char *, int8_t ) = 0;
    virtual int8_t GetApplicationAutoLaunch( const char * ) = 0;
    virtual uint32_t GetStartingApplication( char *, uint32_t ) = 0;
    virtual uint32_t GetTransitionState(  ) = 0;
    virtual uint32_t PerformApplicationPrelaunchCheck( const char * ) = 0;
    virtual const char * GetApplicationsTransitionStateNameFromEnum( uint32_t ) = 0;
    virtual int8_t IsQuitUserPromptRequested(  ) = 0;
    virtual uint32_t LaunchInternalProcess( const char *, const char *, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_011
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_0918 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRRenderModels_IVRRenderModels_005
{
#ifdef __cplusplus
    virtual uint32_t LoadRenderModel_Async( const char *, u_RenderModel_t_0912 ** ) = 0;
    virtual void FreeRenderModel( u_RenderModel_t_0912 * ) = 0;
    virtual uint32_t LoadTexture_Async( int32_t, u_RenderModel_TextureMap_t_090 ** ) = 0;
    virtual void FreeTexture( u_RenderModel_TextureMap_t_090 * ) = 0;
    virtual uint32_t LoadTextureD3D11_Async( int32_t, void *, void ** ) = 0;
    virtual uint32_t LoadIntoTextureD3D11_Async( int32_t, void * ) = 0;
    virtual void FreeTextureD3D11( void * ) = 0;
    virtual uint32_t GetRenderModelName( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetRenderModelCount(  ) = 0;
    virtual uint32_t GetComponentCount( const char * ) = 0;
    virtual uint32_t GetComponentName( const char *, uint32_t, char *, uint32_t ) = 0;
    virtual uint64_t GetComponentButtonMask( const char *, const char * ) = 0;
    virtual uint32_t GetComponentRenderModelName( const char *, const char *, char *, uint32_t ) = 0;
    virtual int8_t GetComponentState( const char *, const char *, const u_VRControllerState001_t *, const RenderModel_ControllerMode_State_t *, RenderModel_ComponentState_t * ) = 0;
    virtual int8_t RenderModelHasComponent( const char *, const char * ) = 0;
    virtual uint32_t GetRenderModelThumbnailURL( const char *, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetRenderModelOriginalPath( const char *, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetRenderModelErrorNameFromEnum( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_014
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_0920 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_015
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_0920 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_100 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t RequestScreenshot( uint32_t, const char *, const char * ) = 0;
    virtual uint32_t GetCurrentScreenshotType(  ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_012
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_101 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRTrackedCamera_IVRTrackedCamera_002
{
#ifdef __cplusplus
    virtual const char * GetCameraErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t HasCamera( uint32_t, int8_t * ) = 0;
    virtual uint32_t GetCameraFrameSize( uint32_t, uint32_t, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetCameraIntrinisics( uint32_t, uint32_t, HmdVector2_t *, HmdVector2_t * ) = 0;
    virtual uint32_t GetCameraProjection( uint32_t, uint32_t, float, float, HmdMatrix44_t * ) = 0;
    virtual uint32_t AcquireVideoStreamingService( uint32_t, void ** ) = 0;
    virtual uint32_t ReleaseVideoStreamingService( void * ) = 0;
    virtual uint32_t GetVideoStreamFrameBuffer( void *, uint32_t, void *, uint32_t, u_CameraVideoStreamFrameHeader_t_100 *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRTrackedCamera_IVRTrackedCamera_003
{
#ifdef __cplusplus
    virtual const char * GetCameraErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t HasCamera( uint32_t, int8_t * ) = 0;
    virtual uint32_t GetCameraFrameSize( uint32_t, uint32_t, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetCameraIntrinsics( uint32_t, uint32_t, HmdVector2_t *, HmdVector2_t * ) = 0;
    virtual uint32_t GetCameraProjection( uint32_t, uint32_t, float, float, HmdMatrix44_t * ) = 0;
    virtual uint32_t AcquireVideoStreamingService( uint32_t, uint64_t * ) = 0;
    virtual uint32_t ReleaseVideoStreamingService( uint64_t ) = 0;
    virtual uint32_t GetVideoStreamFrameBuffer( uint64_t, uint32_t, void *, uint32_t, u_CameraVideoStreamFrameHeader_t_100 *, uint32_t ) = 0;
    virtual uint32_t GetVideoStreamTextureSize( uint32_t, uint32_t, VRTextureBounds_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetVideoStreamTextureD3D11( uint64_t, uint32_t, void *, void **, u_CameraVideoStreamFrameHeader_t_100 *, uint32_t ) = 0;
    virtual uint32_t GetVideoStreamTextureGL( uint64_t, uint32_t, uint32_t *, u_CameraVideoStreamFrameHeader_t_100 *, uint32_t ) = 0;
    virtual uint32_t ReleaseVideoStreamTextureGL( uint64_t, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRScreenshots_IVRScreenshots_001
{
#ifdef __cplusplus
    virtual uint32_t RequestScreenshot( uint32_t *, uint32_t, const char *, const char * ) = 0;
    virtual uint32_t HookScreenshot( uint32_t *, int32_t ) = 0;
    virtual uint32_t GetScreenshotPropertyType( uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetScreenshotPropertyFilename( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t UpdateScreenshotProgress( uint32_t, float ) = 0;
    virtual uint32_t TakeStereoScreenshot( uint32_t *, const char *, const char * ) = 0;
    virtual uint32_t SubmitScreenshot( uint32_t, uint32_t, const char *, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRApplications_IVRApplications_006
{
#ifdef __cplusplus
    virtual uint32_t AddApplicationManifest( const char *, int8_t ) = 0;
    virtual uint32_t RemoveApplicationManifest( const char * ) = 0;
    virtual int8_t IsApplicationInstalled( const char * ) = 0;
    virtual uint32_t GetApplicationCount(  ) = 0;
    virtual uint32_t GetApplicationKeyByIndex( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationKeyByProcessId( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t LaunchApplication( const char * ) = 0;
    virtual uint32_t LaunchTemplateApplication( const char *, const char *, const u_AppOverrideKeys_t *, uint32_t ) = 0;
    virtual uint32_t LaunchApplicationFromMimeType( const char *, const char * ) = 0;
    virtual uint32_t LaunchDashboardOverlay( const char * ) = 0;
    virtual int8_t CancelApplicationLaunch( const char * ) = 0;
    virtual uint32_t IdentifyApplication( uint32_t, const char * ) = 0;
    virtual uint32_t GetApplicationProcessId( const char * ) = 0;
    virtual const char * GetApplicationsErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t GetApplicationPropertyString( const char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetApplicationPropertyBool( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetApplicationPropertyUint64( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetApplicationAutoLaunch( const char *, int8_t ) = 0;
    virtual int8_t GetApplicationAutoLaunch( const char * ) = 0;
    virtual uint32_t SetDefaultApplicationForMimeType( const char *, const char * ) = 0;
    virtual int8_t GetDefaultApplicationForMimeType( const char *, char *, uint32_t ) = 0;
    virtual int8_t GetApplicationSupportedMimeTypes( const char *, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationsThatSupportMimeType( const char *, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationLaunchArguments( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetStartingApplication( char *, uint32_t ) = 0;
    virtual uint32_t GetTransitionState(  ) = 0;
    virtual uint32_t PerformApplicationPrelaunchCheck( const char * ) = 0;
    virtual const char * GetApplicationsTransitionStateNameFromEnum( uint32_t ) = 0;
    virtual int8_t IsQuitUserPromptRequested(  ) = 0;
    virtual uint32_t LaunchInternalProcess( const char *, const char *, const char * ) = 0;
    virtual uint32_t GetCurrentSceneProcessId(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_016
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_102 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_100 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_013
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_103 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRResources_IVRResources_001
{
#ifdef __cplusplus
    virtual uint32_t LoadSharedResource( const char *, char *, uint32_t ) = 0;
    virtual uint32_t GetResourceFullPath( const char *, const char *, char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSettings_IVRSettings_002
{
#ifdef __cplusplus
    virtual const char * GetSettingsErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t Sync( int8_t, uint32_t * ) = 0;
    virtual void SetBool( const char *, const char *, int8_t, uint32_t * ) = 0;
    virtual void SetInt32( const char *, const char *, int32_t, uint32_t * ) = 0;
    virtual void SetFloat( const char *, const char *, float, uint32_t * ) = 0;
    virtual void SetString( const char *, const char *, const char *, uint32_t * ) = 0;
    virtual int8_t GetBool( const char *, const char *, uint32_t * ) = 0;
    virtual int32_t GetInt32( const char *, const char *, uint32_t * ) = 0;
    virtual float GetFloat( const char *, const char *, uint32_t * ) = 0;
    virtual void GetString( const char *, const char *, char *, uint32_t, uint32_t * ) = 0;
    virtual void RemoveSection( const char *, uint32_t * ) = 0;
    virtual void RemoveKeyInSection( const char *, const char *, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_014
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float, uint32_t ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual int8_t ComputeDistortion( uint32_t, float, float, DistortionCoordinates_t * ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_103 *, uint32_t ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_103 *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t, uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t *, uint32_t ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual void AcknowledgeQuit_UserPrompt(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_017
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_103a *, uint32_t ) = 0;
    virtual uint32_t GetFrameTimings( u_Compositor_FrameTiming_103a *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_100 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRClientCore_IVRClientCore_002
{
#ifdef __cplusplus
    virtual uint32_t Init( uint32_t ) = 0;
    virtual void Cleanup(  ) = 0;
    virtual uint32_t IsInterfaceVersionValid( const char * ) = 0;
    virtual void * GetGenericInterface( const char *, uint32_t * ) = 0;
    virtual int8_t BIsHmdPresent(  ) = 0;
    virtual const char * GetEnglishStringForHmdError( uint32_t ) = 0;
    virtual const char * GetIDForVRInitError( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_018
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_103a *, uint32_t ) = 0;
    virtual uint32_t GetFrameTimings( u_Compositor_FrameTiming_103a *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_100 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual HmdColor_t GetCurrentFadeColor( int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual float GetCurrentGridAlpha(  ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_015
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual int8_t ComputeDistortion( uint32_t, float, float, DistortionCoordinates_t * ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_106 *, uint32_t ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_106 *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t, uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t *, uint32_t ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual void AcknowledgeQuit_UserPrompt(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_019
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_103a *, uint32_t ) = 0;
    virtual uint32_t GetFrameTimings( u_Compositor_FrameTiming_103a *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_100 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual HmdColor_t GetCurrentFadeColor( int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual float GetCurrentGridAlpha(  ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
    virtual uint32_t GetVulkanInstanceExtensionsRequired( char *, uint32_t ) = 0;
    virtual uint32_t GetVulkanDeviceExtensionsRequired( VkPhysicalDevice_T *, char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_014
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_106 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_020
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_103a *, uint32_t ) = 0;
    virtual uint32_t GetFrameTimings( u_Compositor_FrameTiming_103a *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_100 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual HmdColor_t GetCurrentFadeColor( int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual float GetCurrentGridAlpha(  ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual void ReleaseMirrorTextureD3D11( void * ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
    virtual uint32_t GetVulkanInstanceExtensionsRequired( char *, uint32_t ) = 0;
    virtual uint32_t GetVulkanDeviceExtensionsRequired( VkPhysicalDevice_T *, char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_016
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayRenderModel( uint64_t, char *, uint32_t, HmdColor_t *, uint32_t * ) = 0;
    virtual uint32_t SetOverlayRenderModel( uint64_t, const char *, const HmdColor_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t GetOverlayTransformOverlayRelative( uint64_t, uint64_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformOverlayRelative( uint64_t, uint64_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_106 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_016
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual int8_t ComputeDistortion( uint32_t, float, float, DistortionCoordinates_t * ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual void GetOutputDevice( uint64_t *, uint32_t ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_106 *, uint32_t ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_106 *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t, uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t *, uint32_t ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual void AcknowledgeQuit_UserPrompt(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRDriverManager_IVRDriverManager_001
{
#ifdef __cplusplus
    virtual uint32_t GetDriverCount(  ) = 0;
    virtual uint32_t GetDriverName( uint32_t, char *, uint32_t ) = 0;
    virtual uint64_t GetDriverHandle( const char * ) = 0;
    virtual int8_t IsEnabled( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_017
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual int8_t ComputeDistortion( uint32_t, float, float, DistortionCoordinates_t * ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual void GetOutputDevice( uint64_t *, uint32_t, VkInstance_T * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_1011 *, uint32_t ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_1011 *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t, uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t *, uint32_t ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t CaptureInputFocus(  ) = 0;
    virtual void ReleaseInputFocus(  ) = 0;
    virtual int8_t IsInputFocusCapturedByAnotherProcess(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual void AcknowledgeQuit_UserPrompt(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_021
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_103a *, uint32_t ) = 0;
    virtual uint32_t GetFrameTimings( u_Compositor_FrameTiming_103a *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_100 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual HmdColor_t GetCurrentFadeColor( int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual float GetCurrentGridAlpha(  ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual void ReleaseMirrorTextureD3D11( void * ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
    virtual uint32_t GetVulkanInstanceExtensionsRequired( char *, uint32_t ) = 0;
    virtual uint32_t GetVulkanDeviceExtensionsRequired( VkPhysicalDevice_T *, char *, uint32_t ) = 0;
    virtual void SetExplicitTimingMode( int8_t ) = 0;
    virtual uint32_t SubmitExplicitTimingData(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRClientCore_IVRClientCore_003
{
#ifdef __cplusplus
    virtual uint32_t Init( uint32_t, const char * ) = 0;
    virtual void Cleanup(  ) = 0;
    virtual uint32_t IsInterfaceVersionValid( const char * ) = 0;
    virtual void * GetGenericInterface( const char *, uint32_t * ) = 0;
    virtual int8_t BIsHmdPresent(  ) = 0;
    virtual const char * GetEnglishStringForHmdError( uint32_t ) = 0;
    virtual const char * GetIDForVRInitError( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_022
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_1017 *, uint32_t ) = 0;
    virtual uint32_t GetFrameTimings( u_Compositor_FrameTiming_1017 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_100 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual HmdColor_t GetCurrentFadeColor( int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual float GetCurrentGridAlpha(  ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual void ReleaseMirrorTextureD3D11( void * ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
    virtual uint32_t GetVulkanInstanceExtensionsRequired( char *, uint32_t ) = 0;
    virtual uint32_t GetVulkanDeviceExtensionsRequired( VkPhysicalDevice_T *, char *, uint32_t ) = 0;
    virtual void SetExplicitTimingMode( uint32_t ) = 0;
    virtual uint32_t SubmitExplicitTimingData(  ) = 0;
    virtual int8_t IsMotionSmoothingEnabled(  ) = 0;
    virtual int8_t IsMotionSmoothingSupported(  ) = 0;
    virtual int8_t IsCurrentSceneFocusAppLoading(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_017
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayRenderModel( uint64_t, char *, uint32_t, HmdColor_t *, uint32_t * ) = 0;
    virtual uint32_t SetOverlayRenderModel( uint64_t, const char *, const HmdColor_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t GetOverlayTransformOverlayRelative( uint64_t, uint64_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformOverlayRelative( uint64_t, uint64_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_1011 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t HandleControllerOverlayInteractionAsMouse( uint64_t, uint32_t ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayDualAnalogTransform( uint64_t, uint32_t, const HmdVector2_t *, float ) = 0;
    virtual uint32_t GetOverlayDualAnalogTransform( uint64_t, uint32_t, HmdVector2_t *, float * ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_019
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual int8_t ComputeDistortion( uint32_t, float, float, DistortionCoordinates_t * ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual void GetOutputDevice( uint64_t *, uint32_t, VkInstance_T * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetArrayTrackedDeviceProperty( uint32_t, uint32_t, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_1322 *, uint32_t ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_1322 *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t, uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t *, uint32_t ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t IsInputAvailable(  ) = 0;
    virtual int8_t IsSteamVRDrawingControllers(  ) = 0;
    virtual int8_t ShouldApplicationPause(  ) = 0;
    virtual int8_t ShouldApplicationReduceRenderingWork(  ) = 0;
    virtual uint32_t DriverDebugRequest( uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual void AcknowledgeQuit_UserPrompt(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_018
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayRenderModel( uint64_t, char *, uint32_t, HmdColor_t *, uint32_t * ) = 0;
    virtual uint32_t SetOverlayRenderModel( uint64_t, const char *, const HmdColor_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t GetOverlayTransformOverlayRelative( uint64_t, uint64_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformOverlayRelative( uint64_t, uint64_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_1016 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayDualAnalogTransform( uint64_t, uint32_t, const HmdVector2_t *, float ) = 0;
    virtual uint32_t GetOverlayDualAnalogTransform( uint64_t, uint32_t, HmdVector2_t *, float * ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRInput_IVRInput_003
{
#ifdef __cplusplus
    virtual uint32_t SetActionManifestPath( const char * ) = 0;
    virtual uint32_t GetActionSetHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetActionHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetInputSourceHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t UpdateActionState( VRActiveActionSet_t_1015 *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetDigitalActionData( uint64_t, u_InputDigitalActionData_t *, uint32_t ) = 0;
    virtual uint32_t GetAnalogActionData( uint64_t, u_InputAnalogActionData_t *, uint32_t ) = 0;
    virtual uint32_t GetPoseActionData( uint64_t, uint32_t, float, u_InputPoseActionData_t *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalActionData( uint64_t, uint32_t, float, u_InputSkeletonActionData_t *, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalActionDataCompressed( uint64_t, uint32_t, float, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t UncompressSkeletalActionData( void *, uint32_t, uint32_t *, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t TriggerHapticVibrationAction( uint64_t, float, float, float, float ) = 0;
    virtual uint32_t GetActionOrigins( uint64_t, uint64_t, uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetOriginLocalizedName( uint64_t, char *, uint32_t ) = 0;
    virtual uint32_t GetOriginTrackedDeviceInfo( uint64_t, u_InputOriginInfo_t *, uint32_t ) = 0;
    virtual uint32_t ShowActionOrigins( uint64_t, uint64_t ) = 0;
    virtual uint32_t ShowBindingsForActionSet( VRActiveActionSet_t_1015 *, uint32_t, uint32_t, uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRIOBuffer_IVRIOBuffer_001
{
#ifdef __cplusplus
    virtual uint32_t Open( const char *, uint32_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t Close( uint64_t ) = 0;
    virtual uint32_t Read( uint64_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t Write( uint64_t, void *, uint32_t ) = 0;
    virtual uint64_t PropertyContainer( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRRenderModels_IVRRenderModels_006
{
#ifdef __cplusplus
    virtual uint32_t LoadRenderModel_Async( const char *, u_RenderModel_t_0912 ** ) = 0;
    virtual void FreeRenderModel( u_RenderModel_t_0912 * ) = 0;
    virtual uint32_t LoadTexture_Async( int32_t, u_RenderModel_TextureMap_t_1237 ** ) = 0;
    virtual void FreeTexture( u_RenderModel_TextureMap_t_1237 * ) = 0;
    virtual uint32_t LoadTextureD3D11_Async( int32_t, void *, void ** ) = 0;
    virtual uint32_t LoadIntoTextureD3D11_Async( int32_t, void * ) = 0;
    virtual void FreeTextureD3D11( void * ) = 0;
    virtual uint32_t GetRenderModelName( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetRenderModelCount(  ) = 0;
    virtual uint32_t GetComponentCount( const char * ) = 0;
    virtual uint32_t GetComponentName( const char *, uint32_t, char *, uint32_t ) = 0;
    virtual uint64_t GetComponentButtonMask( const char *, const char * ) = 0;
    virtual uint32_t GetComponentRenderModelName( const char *, const char *, char *, uint32_t ) = 0;
    virtual int8_t GetComponentStateForDevicePath( const char *, const char *, uint64_t, const RenderModel_ControllerMode_State_t *, RenderModel_ComponentState_t * ) = 0;
    virtual int8_t GetComponentState( const char *, const char *, const u_VRControllerState001_t *, const RenderModel_ControllerMode_State_t *, RenderModel_ComponentState_t * ) = 0;
    virtual int8_t RenderModelHasComponent( const char *, const char * ) = 0;
    virtual uint32_t GetRenderModelThumbnailURL( const char *, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetRenderModelOriginalPath( const char *, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetRenderModelErrorNameFromEnum( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRInput_IVRInput_004
{
#ifdef __cplusplus
    virtual uint32_t SetActionManifestPath( const char * ) = 0;
    virtual uint32_t GetActionSetHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetActionHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetInputSourceHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t UpdateActionState( VRActiveActionSet_t_1016 *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetDigitalActionData( uint64_t, u_InputDigitalActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetAnalogActionData( uint64_t, u_InputAnalogActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetPoseActionData( uint64_t, uint32_t, float, u_InputPoseActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetSkeletalActionData( uint64_t, u_InputSkeletalActionData_t_1016 *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetSkeletalBoneData( uint64_t, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetSkeletalBoneDataCompressed( uint64_t, uint32_t, uint32_t, void *, uint32_t, uint32_t *, uint64_t ) = 0;
    virtual uint32_t DecompressSkeletalBoneData( void *, uint32_t, uint32_t *, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t TriggerHapticVibrationAction( uint64_t, float, float, float, float, uint64_t ) = 0;
    virtual uint32_t GetActionOrigins( uint64_t, uint64_t, uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetOriginLocalizedName( uint64_t, char *, uint32_t ) = 0;
    virtual uint32_t GetOriginTrackedDeviceInfo( uint64_t, u_InputOriginInfo_t *, uint32_t ) = 0;
    virtual uint32_t ShowActionOrigins( uint64_t, uint64_t ) = 0;
    virtual uint32_t ShowBindingsForActionSet( VRActiveActionSet_t_1016 *, uint32_t, uint32_t, uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRTrackedCamera_IVRTrackedCamera_004
{
#ifdef __cplusplus
    virtual const char * GetCameraErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t HasCamera( uint32_t, int8_t * ) = 0;
    virtual uint32_t GetCameraFrameSize( uint32_t, uint32_t, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetCameraIntrinsics( uint32_t, uint32_t, HmdVector2_t *, HmdVector2_t * ) = 0;
    virtual uint32_t GetCameraProjection( uint32_t, uint32_t, float, float, HmdMatrix44_t * ) = 0;
    virtual uint32_t AcquireVideoStreamingService( uint32_t, uint64_t * ) = 0;
    virtual uint32_t ReleaseVideoStreamingService( uint64_t ) = 0;
    virtual uint32_t GetVideoStreamFrameBuffer( uint64_t, uint32_t, void *, uint32_t, u_CameraVideoStreamFrameHeader_t_1017 *, uint32_t ) = 0;
    virtual uint32_t GetVideoStreamTextureSize( uint32_t, uint32_t, VRTextureBounds_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetVideoStreamTextureD3D11( uint64_t, uint32_t, void *, void **, u_CameraVideoStreamFrameHeader_t_1017 *, uint32_t ) = 0;
    virtual uint32_t GetVideoStreamTextureGL( uint64_t, uint32_t, uint32_t *, u_CameraVideoStreamFrameHeader_t_1017 *, uint32_t ) = 0;
    virtual uint32_t ReleaseVideoStreamTextureGL( uint64_t, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRChaperoneSetup_IVRChaperoneSetup_006
{
#ifdef __cplusplus
    virtual int8_t CommitWorkingCopy( uint32_t ) = 0;
    virtual void RevertWorkingCopy(  ) = 0;
    virtual int8_t GetWorkingPlayAreaSize( float *, float * ) = 0;
    virtual int8_t GetWorkingPlayAreaRect( HmdQuad_t * ) = 0;
    virtual int8_t GetWorkingCollisionBoundsInfo( HmdQuad_t *, uint32_t * ) = 0;
    virtual int8_t GetLiveCollisionBoundsInfo( HmdQuad_t *, uint32_t * ) = 0;
    virtual int8_t GetWorkingSeatedZeroPoseToRawTrackingPose( HmdMatrix34_t * ) = 0;
    virtual int8_t GetWorkingStandingZeroPoseToRawTrackingPose( HmdMatrix34_t * ) = 0;
    virtual void SetWorkingPlayAreaSize( float, float ) = 0;
    virtual void SetWorkingCollisionBoundsInfo( HmdQuad_t *, uint32_t ) = 0;
    virtual void SetWorkingPerimeter( HmdVector2_t *, uint32_t ) = 0;
    virtual void SetWorkingSeatedZeroPoseToRawTrackingPose( const HmdMatrix34_t * ) = 0;
    virtual void SetWorkingStandingZeroPoseToRawTrackingPose( const HmdMatrix34_t * ) = 0;
    virtual void ReloadFromDisk( uint32_t ) = 0;
    virtual int8_t GetLiveSeatedZeroPoseToRawTrackingPose( HmdMatrix34_t * ) = 0;
    virtual int8_t ExportLiveToBuffer( char *, uint32_t * ) = 0;
    virtual int8_t ImportFromBufferToWorking( const char *, uint32_t ) = 0;
    virtual void ShowWorkingSetPreview(  ) = 0;
    virtual void HideWorkingSetPreview(  ) = 0;
    virtual void RoomSetupStarting(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_019
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t SetHighQualityOverlay( uint64_t ) = 0;
    virtual uint64_t GetHighQualityOverlay(  ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayRenderModel( uint64_t, char *, uint32_t, HmdColor_t *, uint32_t * ) = 0;
    virtual uint32_t SetOverlayRenderModel( uint64_t, const char *, const HmdColor_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t GetOverlayTransformOverlayRelative( uint64_t, uint64_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformOverlayRelative( uint64_t, uint64_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_1322 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayDualAnalogTransform( uint64_t, uint32_t, const HmdVector2_t *, float ) = 0;
    virtual uint32_t GetOverlayDualAnalogTransform( uint64_t, uint32_t, HmdVector2_t *, float * ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRTrackedCamera_IVRTrackedCamera_005
{
#ifdef __cplusplus
    virtual const char * GetCameraErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t HasCamera( uint32_t, int8_t * ) = 0;
    virtual uint32_t GetCameraFrameSize( uint32_t, uint32_t, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetCameraIntrinsics( uint32_t, uint32_t, uint32_t, HmdVector2_t *, HmdVector2_t * ) = 0;
    virtual uint32_t GetCameraProjection( uint32_t, uint32_t, uint32_t, float, float, HmdMatrix44_t * ) = 0;
    virtual uint32_t AcquireVideoStreamingService( uint32_t, uint64_t * ) = 0;
    virtual uint32_t ReleaseVideoStreamingService( uint64_t ) = 0;
    virtual uint32_t GetVideoStreamFrameBuffer( uint64_t, uint32_t, void *, uint32_t, u_CameraVideoStreamFrameHeader_t_1017 *, uint32_t ) = 0;
    virtual uint32_t GetVideoStreamTextureSize( uint32_t, uint32_t, VRTextureBounds_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetVideoStreamTextureD3D11( uint64_t, uint32_t, void *, void **, u_CameraVideoStreamFrameHeader_t_1017 *, uint32_t ) = 0;
    virtual uint32_t GetVideoStreamTextureGL( uint64_t, uint32_t, uint32_t *, u_CameraVideoStreamFrameHeader_t_1017 *, uint32_t ) = 0;
    virtual uint32_t ReleaseVideoStreamTextureGL( uint64_t, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRInput_IVRInput_005
{
#ifdef __cplusplus
    virtual uint32_t SetActionManifestPath( const char * ) = 0;
    virtual uint32_t GetActionSetHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetActionHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetInputSourceHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t UpdateActionState( VRActiveActionSet_t_1016 *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetDigitalActionData( uint64_t, u_InputDigitalActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetAnalogActionData( uint64_t, u_InputAnalogActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetPoseActionData( uint64_t, uint32_t, float, u_InputPoseActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetSkeletalActionData( uint64_t, u_InputSkeletalActionData_t_113b *, uint32_t ) = 0;
    virtual uint32_t GetBoneCount( uint64_t, uint32_t * ) = 0;
    virtual uint32_t GetBoneHierarchy( uint64_t, int32_t *, uint32_t ) = 0;
    virtual uint32_t GetBoneName( uint64_t, int32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalReferenceTransforms( uint64_t, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalTrackingLevel( uint64_t, uint32_t * ) = 0;
    virtual uint32_t GetSkeletalBoneData( uint64_t, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalSummaryData( uint64_t, VRSkeletalSummaryData_t * ) = 0;
    virtual uint32_t GetSkeletalBoneDataCompressed( uint64_t, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t DecompressSkeletalBoneData( const void *, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t TriggerHapticVibrationAction( uint64_t, float, float, float, float, uint64_t ) = 0;
    virtual uint32_t GetActionOrigins( uint64_t, uint64_t, uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetOriginLocalizedName( uint64_t, char *, uint32_t, int32_t ) = 0;
    virtual uint32_t GetOriginTrackedDeviceInfo( uint64_t, u_InputOriginInfo_t *, uint32_t ) = 0;
    virtual uint32_t ShowActionOrigins( uint64_t, uint64_t ) = 0;
    virtual uint32_t ShowBindingsForActionSet( VRActiveActionSet_t_1016 *, uint32_t, uint32_t, uint64_t ) = 0;
    virtual int8_t IsUsingLegacyInput(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRIOBuffer_IVRIOBuffer_002
{
#ifdef __cplusplus
    virtual uint32_t Open( const char *, uint32_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t Close( uint64_t ) = 0;
    virtual uint32_t Read( uint64_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t Write( uint64_t, void *, uint32_t ) = 0;
    virtual uint64_t PropertyContainer( uint64_t ) = 0;
    virtual int8_t HasReaders( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRInput_IVRInput_006
{
#ifdef __cplusplus
    virtual uint32_t SetActionManifestPath( const char * ) = 0;
    virtual uint32_t GetActionSetHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetActionHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetInputSourceHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t UpdateActionState( VRActiveActionSet_t_1016 *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetDigitalActionData( uint64_t, u_InputDigitalActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetAnalogActionData( uint64_t, u_InputAnalogActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetPoseActionDataRelativeToNow( uint64_t, uint32_t, float, u_InputPoseActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetPoseActionDataForNextFrame( uint64_t, uint32_t, u_InputPoseActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetSkeletalActionData( uint64_t, u_InputSkeletalActionData_t_113b *, uint32_t ) = 0;
    virtual uint32_t GetBoneCount( uint64_t, uint32_t * ) = 0;
    virtual uint32_t GetBoneHierarchy( uint64_t, int32_t *, uint32_t ) = 0;
    virtual uint32_t GetBoneName( uint64_t, int32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalReferenceTransforms( uint64_t, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalTrackingLevel( uint64_t, uint32_t * ) = 0;
    virtual uint32_t GetSkeletalBoneData( uint64_t, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalSummaryData( uint64_t, uint32_t, VRSkeletalSummaryData_t * ) = 0;
    virtual uint32_t GetSkeletalBoneDataCompressed( uint64_t, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t DecompressSkeletalBoneData( const void *, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t TriggerHapticVibrationAction( uint64_t, float, float, float, float, uint64_t ) = 0;
    virtual uint32_t GetActionOrigins( uint64_t, uint64_t, uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetOriginLocalizedName( uint64_t, char *, uint32_t, int32_t ) = 0;
    virtual uint32_t GetOriginTrackedDeviceInfo( uint64_t, u_InputOriginInfo_t *, uint32_t ) = 0;
    virtual uint32_t ShowActionOrigins( uint64_t, uint64_t ) = 0;
    virtual uint32_t ShowBindingsForActionSet( VRActiveActionSet_t_1016 *, uint32_t, uint32_t, uint64_t ) = 0;
    virtual int8_t IsUsingLegacyInput(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_020
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual int8_t ComputeDistortion( uint32_t, float, float, DistortionCoordinates_t * ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual void GetOutputDevice( uint64_t *, uint32_t, VkInstance_T * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetArrayTrackedDeviceProperty( uint32_t, uint32_t, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_1322 *, uint32_t ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_1322 *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t, uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t *, uint32_t ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t IsInputAvailable(  ) = 0;
    virtual int8_t IsSteamVRDrawingControllers(  ) = 0;
    virtual int8_t ShouldApplicationPause(  ) = 0;
    virtual int8_t ShouldApplicationReduceRenderingWork(  ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual void AcknowledgeQuit_UserPrompt(  ) = 0;
    virtual uint32_t GetAppContainerFilePaths( char *, uint32_t ) = 0;
    virtual const char * GetRuntimeVersion(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRInput_IVRInput_007
{
#ifdef __cplusplus
    virtual uint32_t SetActionManifestPath( const char * ) = 0;
    virtual uint32_t GetActionSetHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetActionHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetInputSourceHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t UpdateActionState( VRActiveActionSet_t_1016 *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetDigitalActionData( uint64_t, u_InputDigitalActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetAnalogActionData( uint64_t, u_InputAnalogActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetPoseActionDataRelativeToNow( uint64_t, uint32_t, float, u_InputPoseActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetPoseActionDataForNextFrame( uint64_t, uint32_t, u_InputPoseActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetSkeletalActionData( uint64_t, u_InputSkeletalActionData_t_113b *, uint32_t ) = 0;
    virtual uint32_t GetBoneCount( uint64_t, uint32_t * ) = 0;
    virtual uint32_t GetBoneHierarchy( uint64_t, int32_t *, uint32_t ) = 0;
    virtual uint32_t GetBoneName( uint64_t, int32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalReferenceTransforms( uint64_t, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalTrackingLevel( uint64_t, uint32_t * ) = 0;
    virtual uint32_t GetSkeletalBoneData( uint64_t, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalSummaryData( uint64_t, uint32_t, VRSkeletalSummaryData_t * ) = 0;
    virtual uint32_t GetSkeletalBoneDataCompressed( uint64_t, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t DecompressSkeletalBoneData( const void *, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t TriggerHapticVibrationAction( uint64_t, float, float, float, float, uint64_t ) = 0;
    virtual uint32_t GetActionOrigins( uint64_t, uint64_t, uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetOriginLocalizedName( uint64_t, char *, uint32_t, int32_t ) = 0;
    virtual uint32_t GetOriginTrackedDeviceInfo( uint64_t, u_InputOriginInfo_t *, uint32_t ) = 0;
    virtual uint32_t GetActionBindingInfo( uint64_t, InputBindingInfo_t_1517 *, uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t ShowActionOrigins( uint64_t, uint64_t ) = 0;
    virtual uint32_t ShowBindingsForActionSet( VRActiveActionSet_t_1016 *, uint32_t, uint32_t, uint64_t ) = 0;
    virtual int8_t IsUsingLegacyInput(  ) = 0;
    virtual uint32_t OpenBindingUI( const char *, uint64_t, uint64_t, int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_020
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float, float ) = 0;
    virtual uint32_t GetOverlayAutoCurveDistanceRangeInMeters( uint64_t, float *, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayRenderModel( uint64_t, char *, uint32_t, HmdColor_t *, uint32_t * ) = 0;
    virtual uint32_t SetOverlayRenderModel( uint64_t, const char *, const HmdColor_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t GetOverlayTransformOverlayRelative( uint64_t, uint64_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformOverlayRelative( uint64_t, uint64_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_1322 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint64_t GetGamepadFocusOverlay(  ) = 0;
    virtual uint32_t SetGamepadFocusOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayNeighbor( uint32_t, uint64_t, uint64_t ) = 0;
    virtual uint32_t MoveGamepadFocusToNeighbor( uint32_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayDualAnalogTransform( uint64_t, uint32_t, const HmdVector2_t *, float ) = 0;
    virtual uint32_t GetOverlayDualAnalogTransform( uint64_t, uint32_t, HmdVector2_t *, float * ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRTrackedCamera_IVRTrackedCamera_006
{
#ifdef __cplusplus
    virtual const char * GetCameraErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t HasCamera( uint32_t, int8_t * ) = 0;
    virtual uint32_t GetCameraFrameSize( uint32_t, uint32_t, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetCameraIntrinsics( uint32_t, uint32_t, uint32_t, HmdVector2_t *, HmdVector2_t * ) = 0;
    virtual uint32_t GetCameraProjection( uint32_t, uint32_t, uint32_t, float, float, HmdMatrix44_t * ) = 0;
    virtual uint32_t AcquireVideoStreamingService( uint32_t, uint64_t * ) = 0;
    virtual uint32_t ReleaseVideoStreamingService( uint64_t ) = 0;
    virtual uint32_t GetVideoStreamFrameBuffer( uint64_t, uint32_t, void *, uint32_t, u_CameraVideoStreamFrameHeader_t_1017 *, uint32_t ) = 0;
    virtual uint32_t GetVideoStreamTextureSize( uint32_t, uint32_t, VRTextureBounds_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetVideoStreamTextureD3D11( uint64_t, uint32_t, void *, void **, u_CameraVideoStreamFrameHeader_t_1017 *, uint32_t ) = 0;
    virtual uint32_t GetVideoStreamTextureGL( uint64_t, uint32_t, uint32_t *, u_CameraVideoStreamFrameHeader_t_1017 *, uint32_t ) = 0;
    virtual uint32_t ReleaseVideoStreamTextureGL( uint64_t, uint32_t ) = 0;
    virtual void SetCameraTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetCameraTrackingSpace(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_021
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual int8_t ComputeDistortion( uint32_t, float, float, DistortionCoordinates_t * ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual void GetOutputDevice( uint64_t *, uint32_t, VkInstance_T * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual void ResetSeatedZeroPose(  ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetArrayTrackedDeviceProperty( uint32_t, uint32_t, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_11030 *, uint32_t ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_11030 *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t, uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t *, uint32_t ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t IsInputAvailable(  ) = 0;
    virtual int8_t IsSteamVRDrawingControllers(  ) = 0;
    virtual int8_t ShouldApplicationPause(  ) = 0;
    virtual int8_t ShouldApplicationReduceRenderingWork(  ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual uint32_t GetAppContainerFilePaths( char *, uint32_t ) = 0;
    virtual const char * GetRuntimeVersion(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRApplications_IVRApplications_007
{
#ifdef __cplusplus
    virtual uint32_t AddApplicationManifest( const char *, int8_t ) = 0;
    virtual uint32_t RemoveApplicationManifest( const char * ) = 0;
    virtual int8_t IsApplicationInstalled( const char * ) = 0;
    virtual uint32_t GetApplicationCount(  ) = 0;
    virtual uint32_t GetApplicationKeyByIndex( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationKeyByProcessId( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t LaunchApplication( const char * ) = 0;
    virtual uint32_t LaunchTemplateApplication( const char *, const char *, const u_AppOverrideKeys_t *, uint32_t ) = 0;
    virtual uint32_t LaunchApplicationFromMimeType( const char *, const char * ) = 0;
    virtual uint32_t LaunchDashboardOverlay( const char * ) = 0;
    virtual int8_t CancelApplicationLaunch( const char * ) = 0;
    virtual uint32_t IdentifyApplication( uint32_t, const char * ) = 0;
    virtual uint32_t GetApplicationProcessId( const char * ) = 0;
    virtual const char * GetApplicationsErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t GetApplicationPropertyString( const char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetApplicationPropertyBool( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetApplicationPropertyUint64( const char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetApplicationAutoLaunch( const char *, int8_t ) = 0;
    virtual int8_t GetApplicationAutoLaunch( const char * ) = 0;
    virtual uint32_t SetDefaultApplicationForMimeType( const char *, const char * ) = 0;
    virtual int8_t GetDefaultApplicationForMimeType( const char *, char *, uint32_t ) = 0;
    virtual int8_t GetApplicationSupportedMimeTypes( const char *, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationsThatSupportMimeType( const char *, char *, uint32_t ) = 0;
    virtual uint32_t GetApplicationLaunchArguments( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetStartingApplication( char *, uint32_t ) = 0;
    virtual uint32_t GetSceneApplicationState(  ) = 0;
    virtual uint32_t PerformApplicationPrelaunchCheck( const char * ) = 0;
    virtual const char * GetSceneApplicationStateNameFromEnum( uint32_t ) = 0;
    virtual uint32_t LaunchInternalProcess( const char *, const char *, const char * ) = 0;
    virtual uint32_t GetCurrentSceneProcessId(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_021
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayCurvature( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayCurvature( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayRenderModel( uint64_t, char *, uint32_t, HmdColor_t *, uint32_t * ) = 0;
    virtual uint32_t SetOverlayRenderModel( uint64_t, const char *, const HmdColor_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t GetOverlayTransformOverlayRelative( uint64_t, uint64_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformOverlayRelative( uint64_t, uint64_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_1322 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayDualAnalogTransform( uint64_t, uint32_t, const HmdVector2_t *, float ) = 0;
    virtual uint32_t GetOverlayDualAnalogTransform( uint64_t, uint32_t, HmdVector2_t *, float * ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSettings_IVRSettings_003
{
#ifdef __cplusplus
    virtual const char * GetSettingsErrorNameFromEnum( uint32_t ) = 0;
    virtual void SetBool( const char *, const char *, int8_t, uint32_t * ) = 0;
    virtual void SetInt32( const char *, const char *, int32_t, uint32_t * ) = 0;
    virtual void SetFloat( const char *, const char *, float, uint32_t * ) = 0;
    virtual void SetString( const char *, const char *, const char *, uint32_t * ) = 0;
    virtual int8_t GetBool( const char *, const char *, uint32_t * ) = 0;
    virtual int32_t GetInt32( const char *, const char *, uint32_t * ) = 0;
    virtual float GetFloat( const char *, const char *, uint32_t * ) = 0;
    virtual void GetString( const char *, const char *, char *, uint32_t, uint32_t * ) = 0;
    virtual void RemoveSection( const char *, uint32_t * ) = 0;
    virtual void RemoveKeyInSection( const char *, const char *, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_024
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_1017 *, uint32_t ) = 0;
    virtual uint32_t GetFrameTimings( u_Compositor_FrameTiming_1017 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_100 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual HmdColor_t GetCurrentFadeColor( int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual float GetCurrentGridAlpha(  ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual void ReleaseMirrorTextureD3D11( void * ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
    virtual uint32_t GetVulkanInstanceExtensionsRequired( char *, uint32_t ) = 0;
    virtual uint32_t GetVulkanDeviceExtensionsRequired( VkPhysicalDevice_T *, char *, uint32_t ) = 0;
    virtual void SetExplicitTimingMode( uint32_t ) = 0;
    virtual uint32_t SubmitExplicitTimingData(  ) = 0;
    virtual int8_t IsMotionSmoothingEnabled(  ) = 0;
    virtual int8_t IsMotionSmoothingSupported(  ) = 0;
    virtual int8_t IsCurrentSceneFocusAppLoading(  ) = 0;
    virtual uint32_t SetStageOverride_Async( const char *, const HmdMatrix34_t *, const Compositor_StageRenderSettings *, uint32_t ) = 0;
    virtual void ClearStageOverride(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_022
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayCurvature( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayCurvature( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayRenderModel( uint64_t, char *, uint32_t, HmdColor_t *, uint32_t * ) = 0;
    virtual uint32_t SetOverlayRenderModel( uint64_t, const char *, const HmdColor_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t GetOverlayTransformOverlayRelative( uint64_t, uint64_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformOverlayRelative( uint64_t, uint64_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformCursor( uint64_t, const HmdVector2_t * ) = 0;
    virtual uint32_t GetOverlayTransformCursor( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_1322 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayDualAnalogTransform( uint64_t, uint32_t, const HmdVector2_t *, float ) = 0;
    virtual uint32_t GetOverlayDualAnalogTransform( uint64_t, uint32_t, HmdVector2_t *, float * ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t TriggerLaserMouseHapticVibration( uint64_t, float, float, float ) = 0;
    virtual uint32_t SetOverlayCursor( uint64_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayCursorPositionOverride( uint64_t, const HmdVector2_t * ) = 0;
    virtual uint32_t ClearOverlayCursorPositionOverride( uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, const char *, uint32_t, const char *, int8_t, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_026
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_1017 *, uint32_t ) = 0;
    virtual uint32_t GetFrameTimings( u_Compositor_FrameTiming_1017 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_100 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual HmdColor_t GetCurrentFadeColor( int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual float GetCurrentGridAlpha(  ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual void ReleaseMirrorTextureD3D11( void * ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
    virtual uint32_t GetVulkanInstanceExtensionsRequired( char *, uint32_t ) = 0;
    virtual uint32_t GetVulkanDeviceExtensionsRequired( VkPhysicalDevice_T *, char *, uint32_t ) = 0;
    virtual void SetExplicitTimingMode( uint32_t ) = 0;
    virtual uint32_t SubmitExplicitTimingData(  ) = 0;
    virtual int8_t IsMotionSmoothingEnabled(  ) = 0;
    virtual int8_t IsMotionSmoothingSupported(  ) = 0;
    virtual int8_t IsCurrentSceneFocusAppLoading(  ) = 0;
    virtual uint32_t SetStageOverride_Async( const char *, const HmdMatrix34_t *, const Compositor_StageRenderSettings *, uint32_t ) = 0;
    virtual void ClearStageOverride(  ) = 0;
    virtual int8_t GetCompositorBenchmarkResults( Compositor_BenchmarkResults *, uint32_t ) = 0;
    virtual uint32_t GetLastPosePredictionIDs( uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetPosesForFrame( uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRHeadsetView_IVRHeadsetView_001
{
#ifdef __cplusplus
    virtual void SetHeadsetViewSize( uint32_t, uint32_t ) = 0;
    virtual void GetHeadsetViewSize( uint32_t *, uint32_t * ) = 0;
    virtual void SetHeadsetViewMode( uint32_t ) = 0;
    virtual uint32_t GetHeadsetViewMode(  ) = 0;
    virtual void SetHeadsetViewCropped( int8_t ) = 0;
    virtual int8_t GetHeadsetViewCropped(  ) = 0;
    virtual float GetHeadsetViewAspectRatio(  ) = 0;
    virtual void SetHeadsetViewBlendRange( float, float ) = 0;
    virtual void GetHeadsetViewBlendRange( float *, float * ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_024
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayCurvature( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayCurvature( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t GetOverlayTransformOverlayRelative( uint64_t, uint64_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformOverlayRelative( uint64_t, uint64_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformCursor( uint64_t, const HmdVector2_t * ) = 0;
    virtual uint32_t GetOverlayTransformCursor( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_11030 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t TriggerLaserMouseHapticVibration( uint64_t, float, float, float ) = 0;
    virtual uint32_t SetOverlayCursor( uint64_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayCursorPositionOverride( uint64_t, const HmdVector2_t * ) = 0;
    virtual uint32_t ClearOverlayCursorPositionOverride( uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, uint32_t, const char *, uint32_t, const char *, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, uint32_t, const char *, uint32_t, const char *, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlayView_IVROverlayView_003
{
#ifdef __cplusplus
    virtual uint32_t AcquireOverlayView( uint64_t, u_VRNativeDevice_t *, u_VROverlayView_t *, uint32_t ) = 0;
    virtual uint32_t ReleaseOverlayView( u_VROverlayView_t * ) = 0;
    virtual void PostOverlayEvent( uint64_t, const u_VREvent_t_223 * ) = 0;
    virtual int8_t IsViewingPermitted( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRInput_IVRInput_010
{
#ifdef __cplusplus
    virtual uint32_t SetActionManifestPath( const char * ) = 0;
    virtual uint32_t GetActionSetHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetActionHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t GetInputSourceHandle( const char *, uint64_t * ) = 0;
    virtual uint32_t UpdateActionState( VRActiveActionSet_t_1016 *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetDigitalActionData( uint64_t, u_InputDigitalActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetAnalogActionData( uint64_t, u_InputAnalogActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetPoseActionDataRelativeToNow( uint64_t, uint32_t, float, u_InputPoseActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetPoseActionDataForNextFrame( uint64_t, uint32_t, u_InputPoseActionData_t *, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetSkeletalActionData( uint64_t, u_InputSkeletalActionData_t_113b *, uint32_t ) = 0;
    virtual uint32_t GetDominantHand( uint32_t * ) = 0;
    virtual uint32_t SetDominantHand( uint32_t ) = 0;
    virtual uint32_t GetBoneCount( uint64_t, uint32_t * ) = 0;
    virtual uint32_t GetBoneHierarchy( uint64_t, int32_t *, uint32_t ) = 0;
    virtual uint32_t GetBoneName( uint64_t, int32_t, char *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalReferenceTransforms( uint64_t, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalTrackingLevel( uint64_t, uint32_t * ) = 0;
    virtual uint32_t GetSkeletalBoneData( uint64_t, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t GetSkeletalSummaryData( uint64_t, uint32_t, VRSkeletalSummaryData_t * ) = 0;
    virtual uint32_t GetSkeletalBoneDataCompressed( uint64_t, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t DecompressSkeletalBoneData( const void *, uint32_t, uint32_t, VRBoneTransform_t *, uint32_t ) = 0;
    virtual uint32_t TriggerHapticVibrationAction( uint64_t, float, float, float, float, uint64_t ) = 0;
    virtual uint32_t GetActionOrigins( uint64_t, uint64_t, uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetOriginLocalizedName( uint64_t, char *, uint32_t, int32_t ) = 0;
    virtual uint32_t GetOriginTrackedDeviceInfo( uint64_t, u_InputOriginInfo_t *, uint32_t ) = 0;
    virtual uint32_t GetActionBindingInfo( uint64_t, InputBindingInfo_t_11030 *, uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t ShowActionOrigins( uint64_t, uint64_t ) = 0;
    virtual uint32_t ShowBindingsForActionSet( VRActiveActionSet_t_1016 *, uint32_t, uint32_t, uint64_t ) = 0;
    virtual uint32_t GetComponentStateForBinding( const char *, const char *, const InputBindingInfo_t_11030 *, uint32_t, uint32_t, RenderModel_ComponentState_t * ) = 0;
    virtual int8_t IsUsingLegacyInput(  ) = 0;
    virtual uint32_t OpenBindingUI( const char *, uint64_t, uint64_t, int8_t ) = 0;
    virtual uint32_t GetBindingVariant( uint64_t, char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRControlPanel_IVRControlPanel_006
{
#ifdef __cplusplus
    virtual uint32_t undoc1(  ) = 0;
    virtual uint32_t undoc2( uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t undoc3( const char * ) = 0;
    virtual uint32_t undoc4( const char * ) = 0;
    virtual uint32_t undoc5( const char *, uint32_t, char *, uint32_t ) = 0;
    virtual uint32_t undoc6( const char *, const char *, char *, uint32_t ) = 0;
    virtual uint32_t undoc7( const char *, const char *, char *, uint32_t ) = 0;
    virtual int8_t undoc8( uint32_t ) = 0;
    virtual void undoc9(  ) = 0;
    virtual void undoc10(  ) = 0;
    virtual int8_t undoc11( uint32_t ) = 0;
    virtual void undoc12(  ) = 0;
    virtual void undoc13( uint32_t ) = 0;
    virtual void undoc14( uint32_t ) = 0;
    virtual uint32_t undoc15(  ) = 0;
    virtual void undoc16( int8_t ) = 0;
    virtual int8_t undoc17(  ) = 0;
    virtual uint32_t undoc18(  ) = 0;
    virtual void undoc19( int8_t ) = 0;
    virtual int8_t undoc20(  ) = 0;
    virtual uint32_t undoc21(  ) = 0;
    virtual void undoc22( uint64_t, const char *, uint32_t, uint32_t, const char * ) = 0;
    virtual int8_t undoc23( const char * ) = 0;
    virtual int8_t undoc24(  ) = 0;
    virtual int8_t undoc25( int8_t ) = 0;
    virtual uint64_t undoc26(  ) = 0;
    virtual uint32_t undoc27( const char * ) = 0;
    virtual void undoc28( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRMailbox_IVRMailbox_001
{
#ifdef __cplusplus
    virtual uint32_t undoc1( const char *, uint64_t * ) = 0;
    virtual uint32_t undoc2( uint64_t ) = 0;
    virtual uint32_t undoc3( uint64_t, const char *, const char * ) = 0;
    virtual uint32_t undoc4( uint64_t, char *, uint32_t, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_IVRSystem_IVRSystem_022
{
#ifdef __cplusplus
    virtual void GetRecommendedRenderTargetSize( uint32_t *, uint32_t * ) = 0;
    virtual HmdMatrix44_t GetProjectionMatrix( uint32_t, float, float ) = 0;
    virtual void GetProjectionRaw( uint32_t, float *, float *, float *, float * ) = 0;
    virtual int8_t ComputeDistortion( uint32_t, float, float, DistortionCoordinates_t * ) = 0;
    virtual HmdMatrix34_t GetEyeToHeadTransform( uint32_t ) = 0;
    virtual int8_t GetTimeSinceLastVsync( float *, uint64_t * ) = 0;
    virtual int32_t GetD3D9AdapterIndex(  ) = 0;
    virtual void GetDXGIOutputInfo( int32_t * ) = 0;
    virtual void GetOutputDevice( uint64_t *, uint32_t, VkInstance_T * ) = 0;
    virtual int8_t IsDisplayOnDesktop(  ) = 0;
    virtual int8_t SetDisplayVisibility( int8_t ) = 0;
    virtual void GetDeviceToAbsoluteTrackingPose( uint32_t, float, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose(  ) = 0;
    virtual uint32_t GetSortedTrackedDeviceIndicesOfClass( uint32_t, uint32_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceActivityLevel( uint32_t ) = 0;
    virtual void ApplyTransform( TrackedDevicePose_t *, const TrackedDevicePose_t *, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetTrackedDeviceIndexForControllerRole( uint32_t ) = 0;
    virtual uint32_t GetControllerRoleForTrackedDeviceIndex( uint32_t ) = 0;
    virtual uint32_t GetTrackedDeviceClass( uint32_t ) = 0;
    virtual int8_t IsTrackedDeviceConnected( uint32_t ) = 0;
    virtual int8_t GetBoolTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual float GetFloatTrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual int32_t GetInt32TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint64_t GetUint64TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual HmdMatrix34_t GetMatrix34TrackedDeviceProperty( uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetArrayTrackedDeviceProperty( uint32_t, uint32_t, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetStringTrackedDeviceProperty( uint32_t, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual const char * GetPropErrorNameFromEnum( uint32_t ) = 0;
    virtual int8_t PollNextEvent( u_VREvent_t_223 *, uint32_t ) = 0;
    virtual int8_t PollNextEventWithPose( uint32_t, u_VREvent_t_223 *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual const char * GetEventTypeNameFromEnum( uint32_t ) = 0;
    virtual u_HiddenAreaMesh_t GetHiddenAreaMesh( uint32_t, uint32_t ) = 0;
    virtual int8_t GetControllerState( uint32_t, u_VRControllerState001_t *, uint32_t ) = 0;
    virtual int8_t GetControllerStateWithPose( uint32_t, uint32_t, u_VRControllerState001_t *, uint32_t, TrackedDevicePose_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual const char * GetButtonIdNameFromEnum( uint32_t ) = 0;
    virtual const char * GetControllerAxisTypeNameFromEnum( uint32_t ) = 0;
    virtual int8_t IsInputAvailable(  ) = 0;
    virtual int8_t IsSteamVRDrawingControllers(  ) = 0;
    virtual int8_t ShouldApplicationPause(  ) = 0;
    virtual int8_t ShouldApplicationReduceRenderingWork(  ) = 0;
    virtual uint32_t PerformFirmwareUpdate( uint32_t ) = 0;
    virtual void AcknowledgeQuit_Exiting(  ) = 0;
    virtual uint32_t GetAppContainerFilePaths( char *, uint32_t ) = 0;
    virtual const char * GetRuntimeVersion(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRChaperone_IVRChaperone_004
{
#ifdef __cplusplus
    virtual uint32_t GetCalibrationState(  ) = 0;
    virtual int8_t GetPlayAreaSize( float *, float * ) = 0;
    virtual int8_t GetPlayAreaRect( HmdQuad_t * ) = 0;
    virtual void ReloadInfo(  ) = 0;
    virtual void SetSceneColor( HmdColor_t ) = 0;
    virtual void GetBoundsColor( HmdColor_t *, int32_t, float, HmdColor_t * ) = 0;
    virtual int8_t AreBoundsVisible(  ) = 0;
    virtual void ForceBoundsVisible( int8_t ) = 0;
    virtual void ResetZeroPose( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_027
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_1017 *, uint32_t ) = 0;
    virtual uint32_t GetFrameTimings( u_Compositor_FrameTiming_1017 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_1267 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual HmdColor_t GetCurrentFadeColor( int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual float GetCurrentGridAlpha(  ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual void ReleaseMirrorTextureD3D11( void * ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
    virtual uint32_t GetVulkanInstanceExtensionsRequired( char *, uint32_t ) = 0;
    virtual uint32_t GetVulkanDeviceExtensionsRequired( VkPhysicalDevice_T *, char *, uint32_t ) = 0;
    virtual void SetExplicitTimingMode( uint32_t ) = 0;
    virtual uint32_t SubmitExplicitTimingData(  ) = 0;
    virtual int8_t IsMotionSmoothingEnabled(  ) = 0;
    virtual int8_t IsMotionSmoothingSupported(  ) = 0;
    virtual int8_t IsCurrentSceneFocusAppLoading(  ) = 0;
    virtual uint32_t SetStageOverride_Async( const char *, const HmdMatrix34_t *, const Compositor_StageRenderSettings *, uint32_t ) = 0;
    virtual void ClearStageOverride(  ) = 0;
    virtual int8_t GetCompositorBenchmarkResults( Compositor_BenchmarkResults *, uint32_t ) = 0;
    virtual uint32_t GetLastPosePredictionIDs( uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetPosesForFrame( uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_025
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayCurvature( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayCurvature( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t GetOverlayTransformOverlayRelative( uint64_t, uint64_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformOverlayRelative( uint64_t, uint64_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformCursor( uint64_t, const HmdVector2_t * ) = 0;
    virtual uint32_t GetOverlayTransformCursor( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayTransformProjection( uint64_t, uint32_t, const HmdMatrix34_t *, const VROverlayProjection_t *, uint32_t ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_1168 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t TriggerLaserMouseHapticVibration( uint64_t, float, float, float ) = 0;
    virtual uint32_t SetOverlayCursor( uint64_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayCursorPositionOverride( uint64_t, const HmdVector2_t * ) = 0;
    virtual uint32_t ClearOverlayCursorPositionOverride( uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, uint32_t, const char *, uint32_t, const char *, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, uint32_t, const char *, uint32_t, const char *, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_026
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayCurvature( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayCurvature( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayPreCurvePitch( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayPreCurvePitch( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t GetOverlayTransformOverlayRelative( uint64_t, uint64_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformOverlayRelative( uint64_t, uint64_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformCursor( uint64_t, const HmdVector2_t * ) = 0;
    virtual uint32_t GetOverlayTransformCursor( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayTransformProjection( uint64_t, uint32_t, const HmdMatrix34_t *, const VROverlayProjection_t *, uint32_t ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual uint32_t WaitFrameSync( uint32_t ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_1168 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t TriggerLaserMouseHapticVibration( uint64_t, float, float, float ) = 0;
    virtual uint32_t SetOverlayCursor( uint64_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayCursorPositionOverride( uint64_t, const HmdVector2_t * ) = 0;
    virtual uint32_t ClearOverlayCursorPositionOverride( uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, uint32_t, const char *, uint32_t, const char *, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, uint32_t, const char *, uint32_t, const char *, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVROverlay_IVROverlay_027
{
#ifdef __cplusplus
    virtual uint32_t FindOverlay( const char *, uint64_t * ) = 0;
    virtual uint32_t CreateOverlay( const char *, const char *, uint64_t * ) = 0;
    virtual uint32_t DestroyOverlay( uint64_t ) = 0;
    virtual uint32_t GetOverlayKey( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetOverlayName( uint64_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayName( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayImageData( uint64_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual const char * GetOverlayErrorNameFromEnum( uint32_t ) = 0;
    virtual uint32_t SetOverlayRenderingPid( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayRenderingPid( uint64_t ) = 0;
    virtual uint32_t SetOverlayFlag( uint64_t, uint32_t, int8_t ) = 0;
    virtual uint32_t GetOverlayFlag( uint64_t, uint32_t, int8_t * ) = 0;
    virtual uint32_t GetOverlayFlags( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayColor( uint64_t, float, float, float ) = 0;
    virtual uint32_t GetOverlayColor( uint64_t, float *, float *, float * ) = 0;
    virtual uint32_t SetOverlayAlpha( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayAlpha( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTexelAspect( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayTexelAspect( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlaySortOrder( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlaySortOrder( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayWidthInMeters( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayWidthInMeters( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayCurvature( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayCurvature( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayPreCurvePitch( uint64_t, float ) = 0;
    virtual uint32_t GetOverlayPreCurvePitch( uint64_t, float * ) = 0;
    virtual uint32_t SetOverlayTextureColorSpace( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayTextureColorSpace( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTextureBounds( uint64_t, const VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTextureBounds( uint64_t, VRTextureBounds_t * ) = 0;
    virtual uint32_t GetOverlayTransformType( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayTransformAbsolute( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformAbsolute( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t, const HmdMatrix34_t * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceRelative( uint64_t, uint32_t *, HmdMatrix34_t * ) = 0;
    virtual uint32_t SetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t, const char * ) = 0;
    virtual uint32_t GetOverlayTransformTrackedDeviceComponent( uint64_t, uint32_t *, char *, uint32_t ) = 0;
    virtual uint32_t SetOverlayTransformCursor( uint64_t, const HmdVector2_t * ) = 0;
    virtual uint32_t GetOverlayTransformCursor( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayTransformProjection( uint64_t, uint32_t, const HmdMatrix34_t *, const VROverlayProjection_t *, uint32_t ) = 0;
    virtual uint32_t ShowOverlay( uint64_t ) = 0;
    virtual uint32_t HideOverlay( uint64_t ) = 0;
    virtual int8_t IsOverlayVisible( uint64_t ) = 0;
    virtual uint32_t GetTransformForOverlayCoordinates( uint64_t, uint32_t, HmdVector2_t, HmdMatrix34_t * ) = 0;
    virtual uint32_t WaitFrameSync( uint32_t ) = 0;
    virtual int8_t PollNextOverlayEvent( uint64_t, u_VREvent_t_223 *, uint32_t ) = 0;
    virtual uint32_t GetOverlayInputMethod( uint64_t, uint32_t * ) = 0;
    virtual uint32_t SetOverlayInputMethod( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetOverlayMouseScale( uint64_t, HmdVector2_t * ) = 0;
    virtual uint32_t SetOverlayMouseScale( uint64_t, const HmdVector2_t * ) = 0;
    virtual int8_t ComputeOverlayIntersection( uint64_t, const VROverlayIntersectionParams_t *, VROverlayIntersectionResults_t * ) = 0;
    virtual int8_t IsHoverTargetOverlay( uint64_t ) = 0;
    virtual uint32_t SetOverlayIntersectionMask( uint64_t, VROverlayIntersectionMaskPrimitive_t *, uint32_t, uint32_t ) = 0;
    virtual uint32_t TriggerLaserMouseHapticVibration( uint64_t, float, float, float ) = 0;
    virtual uint32_t SetOverlayCursor( uint64_t, uint64_t ) = 0;
    virtual uint32_t SetOverlayCursorPositionOverride( uint64_t, const HmdVector2_t * ) = 0;
    virtual uint32_t ClearOverlayCursorPositionOverride( uint64_t ) = 0;
    virtual uint32_t SetOverlayTexture( uint64_t, const u_Texture_t * ) = 0;
    virtual uint32_t ClearOverlayTexture( uint64_t ) = 0;
    virtual uint32_t SetOverlayRaw( uint64_t, void *, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint32_t SetOverlayFromFile( uint64_t, const char * ) = 0;
    virtual uint32_t GetOverlayTexture( uint64_t, void **, void *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, VRTextureBounds_t * ) = 0;
    virtual uint32_t ReleaseNativeOverlayHandle( uint64_t, void * ) = 0;
    virtual uint32_t GetOverlayTextureSize( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t CreateDashboardOverlay( const char *, const char *, uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsDashboardVisible(  ) = 0;
    virtual int8_t IsActiveDashboardOverlay( uint64_t ) = 0;
    virtual uint32_t SetDashboardOverlaySceneProcess( uint64_t, uint32_t ) = 0;
    virtual uint32_t GetDashboardOverlaySceneProcess( uint64_t, uint32_t * ) = 0;
    virtual void ShowDashboard( const char * ) = 0;
    virtual uint32_t GetPrimaryDashboardDevice(  ) = 0;
    virtual uint32_t ShowKeyboard( uint32_t, uint32_t, uint32_t, const char *, uint32_t, const char *, uint64_t ) = 0;
    virtual uint32_t ShowKeyboardForOverlay( uint64_t, uint32_t, uint32_t, uint32_t, const char *, uint32_t, const char *, uint64_t ) = 0;
    virtual uint32_t GetKeyboardText( char *, uint32_t ) = 0;
    virtual void HideKeyboard(  ) = 0;
    virtual void SetKeyboardTransformAbsolute( uint32_t, const HmdMatrix34_t * ) = 0;
    virtual void SetKeyboardPositionForOverlay( uint64_t, HmdRect2_t ) = 0;
    virtual uint32_t ShowMessageOverlay( const char *, const char *, const char *, const char *, const char *, const char * ) = 0;
    virtual void CloseMessageOverlay(  ) = 0;
#endif /* __cplusplus */
};

struct u_IVRCompositor_IVRCompositor_028
{
#ifdef __cplusplus
    virtual void SetTrackingSpace( uint32_t ) = 0;
    virtual uint32_t GetTrackingSpace(  ) = 0;
    virtual uint32_t WaitGetPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoses( TrackedDevicePose_t *, uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
    virtual uint32_t GetLastPoseForTrackedDeviceIndex( uint32_t, TrackedDevicePose_t *, TrackedDevicePose_t * ) = 0;
    virtual uint32_t Submit( uint32_t, const u_Texture_t *, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual uint32_t SubmitWithArrayIndex( uint32_t, const u_Texture_t *, uint32_t, const VRTextureBounds_t *, uint32_t ) = 0;
    virtual void ClearLastSubmittedFrame(  ) = 0;
    virtual void PostPresentHandoff(  ) = 0;
    virtual int8_t GetFrameTiming( u_Compositor_FrameTiming_1017 *, uint32_t ) = 0;
    virtual uint32_t GetFrameTimings( u_Compositor_FrameTiming_1017 *, uint32_t ) = 0;
    virtual float GetFrameTimeRemaining(  ) = 0;
    virtual void GetCumulativeStats( Compositor_CumulativeStats_1267 *, uint32_t ) = 0;
    virtual void FadeToColor( float, float, float, float, float, int8_t ) = 0;
    virtual HmdColor_t GetCurrentFadeColor( int8_t ) = 0;
    virtual void FadeGrid( float, int8_t ) = 0;
    virtual float GetCurrentGridAlpha(  ) = 0;
    virtual uint32_t SetSkyboxOverride( const u_Texture_t *, uint32_t ) = 0;
    virtual void ClearSkyboxOverride(  ) = 0;
    virtual void CompositorBringToFront(  ) = 0;
    virtual void CompositorGoToBack(  ) = 0;
    virtual void CompositorQuit(  ) = 0;
    virtual int8_t IsFullscreen(  ) = 0;
    virtual uint32_t GetCurrentSceneFocusProcess(  ) = 0;
    virtual uint32_t GetLastFrameRenderer(  ) = 0;
    virtual int8_t CanRenderScene(  ) = 0;
    virtual void ShowMirrorWindow(  ) = 0;
    virtual void HideMirrorWindow(  ) = 0;
    virtual int8_t IsMirrorWindowVisible(  ) = 0;
    virtual void CompositorDumpImages(  ) = 0;
    virtual int8_t ShouldAppRenderWithLowResources(  ) = 0;
    virtual void ForceInterleavedReprojectionOn( int8_t ) = 0;
    virtual void ForceReconnectProcess(  ) = 0;
    virtual void SuspendRendering( int8_t ) = 0;
    virtual uint32_t GetMirrorTextureD3D11( uint32_t, void *, void ** ) = 0;
    virtual void ReleaseMirrorTextureD3D11( void * ) = 0;
    virtual uint32_t GetMirrorTextureGL( uint32_t, uint32_t *, void ** ) = 0;
    virtual int8_t ReleaseSharedGLTexture( uint32_t, void * ) = 0;
    virtual void LockGLSharedTextureForAccess( void * ) = 0;
    virtual void UnlockGLSharedTextureForAccess( void * ) = 0;
    virtual uint32_t GetVulkanInstanceExtensionsRequired( char *, uint32_t ) = 0;
    virtual uint32_t GetVulkanDeviceExtensionsRequired( VkPhysicalDevice_T *, char *, uint32_t ) = 0;
    virtual void SetExplicitTimingMode( uint32_t ) = 0;
    virtual uint32_t SubmitExplicitTimingData(  ) = 0;
    virtual int8_t IsMotionSmoothingEnabled(  ) = 0;
    virtual int8_t IsMotionSmoothingSupported(  ) = 0;
    virtual int8_t IsCurrentSceneFocusAppLoading(  ) = 0;
    virtual uint32_t SetStageOverride_Async( const char *, const HmdMatrix34_t *, const Compositor_StageRenderSettings *, uint32_t ) = 0;
    virtual void ClearStageOverride(  ) = 0;
    virtual int8_t GetCompositorBenchmarkResults( Compositor_BenchmarkResults *, uint32_t ) = 0;
    virtual uint32_t GetLastPosePredictionIDs( uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetPosesForFrame( uint32_t, TrackedDevicePose_t *, uint32_t ) = 0;
#endif /* __cplusplus */
};


NTSTATUS IVRApplications_IVRApplications_001_AddApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_001_RemoveApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_001_IsApplicationInstalled( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetApplicationCount( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetApplicationKeyByIndex( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetApplicationKeyByProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_001_LaunchApplication( void * );
NTSTATUS IVRApplications_IVRApplications_001_LaunchDashboardOverlay( void * );
NTSTATUS IVRApplications_IVRApplications_001_IdentifyApplication( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetApplicationProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetApplicationsErrorNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetApplicationPropertyString( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetApplicationPropertyBool( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetHomeApplication( void * );
NTSTATUS IVRApplications_IVRApplications_001_SetHomeApplication( void * );
NTSTATUS IVRApplications_IVRApplications_001_SetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetStartingApplication( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetTransitionState( void * );
NTSTATUS IVRApplications_IVRApplications_001_PerformApplicationPrelaunchCheck( void * );
NTSTATUS IVRApplications_IVRApplications_001_GetApplicationsTransitionStateNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_002_AddApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_002_RemoveApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_002_IsApplicationInstalled( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetApplicationCount( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetApplicationKeyByIndex( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetApplicationKeyByProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_002_LaunchApplication( void * );
NTSTATUS IVRApplications_IVRApplications_002_LaunchDashboardOverlay( void * );
NTSTATUS IVRApplications_IVRApplications_002_IdentifyApplication( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetApplicationProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetApplicationsErrorNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetApplicationPropertyString( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetApplicationPropertyBool( void * );
NTSTATUS IVRApplications_IVRApplications_002_SetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetStartingApplication( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetTransitionState( void * );
NTSTATUS IVRApplications_IVRApplications_002_PerformApplicationPrelaunchCheck( void * );
NTSTATUS IVRApplications_IVRApplications_002_GetApplicationsTransitionStateNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_002_IsQuitUserPromptRequested( void * );
NTSTATUS IVRApplications_IVRApplications_003_AddApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_003_RemoveApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_003_IsApplicationInstalled( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetApplicationCount( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetApplicationKeyByIndex( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetApplicationKeyByProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_003_LaunchApplication( void * );
NTSTATUS IVRApplications_IVRApplications_003_LaunchDashboardOverlay( void * );
NTSTATUS IVRApplications_IVRApplications_003_IdentifyApplication( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetApplicationProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetApplicationsErrorNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetApplicationPropertyString( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetApplicationPropertyBool( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetApplicationPropertyUint64( void * );
NTSTATUS IVRApplications_IVRApplications_003_SetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetStartingApplication( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetTransitionState( void * );
NTSTATUS IVRApplications_IVRApplications_003_PerformApplicationPrelaunchCheck( void * );
NTSTATUS IVRApplications_IVRApplications_003_GetApplicationsTransitionStateNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_003_IsQuitUserPromptRequested( void * );
NTSTATUS IVRApplications_IVRApplications_004_AddApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_004_RemoveApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_004_IsApplicationInstalled( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetApplicationCount( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetApplicationKeyByIndex( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetApplicationKeyByProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_004_LaunchApplication( void * );
NTSTATUS IVRApplications_IVRApplications_004_LaunchDashboardOverlay( void * );
NTSTATUS IVRApplications_IVRApplications_004_CancelApplicationLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_004_IdentifyApplication( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetApplicationProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetApplicationsErrorNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetApplicationPropertyString( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetApplicationPropertyBool( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetApplicationPropertyUint64( void * );
NTSTATUS IVRApplications_IVRApplications_004_SetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetStartingApplication( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetTransitionState( void * );
NTSTATUS IVRApplications_IVRApplications_004_PerformApplicationPrelaunchCheck( void * );
NTSTATUS IVRApplications_IVRApplications_004_GetApplicationsTransitionStateNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_004_IsQuitUserPromptRequested( void * );
NTSTATUS IVRApplications_IVRApplications_004_LaunchInternalProcess( void * );
NTSTATUS IVRApplications_IVRApplications_005_AddApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_005_RemoveApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_005_IsApplicationInstalled( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetApplicationCount( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetApplicationKeyByIndex( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetApplicationKeyByProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_005_LaunchApplication( void * );
NTSTATUS IVRApplications_IVRApplications_005_LaunchTemplateApplication( void * );
NTSTATUS IVRApplications_IVRApplications_005_LaunchDashboardOverlay( void * );
NTSTATUS IVRApplications_IVRApplications_005_CancelApplicationLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_005_IdentifyApplication( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetApplicationProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetApplicationsErrorNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetApplicationPropertyString( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetApplicationPropertyBool( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetApplicationPropertyUint64( void * );
NTSTATUS IVRApplications_IVRApplications_005_SetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetStartingApplication( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetTransitionState( void * );
NTSTATUS IVRApplications_IVRApplications_005_PerformApplicationPrelaunchCheck( void * );
NTSTATUS IVRApplications_IVRApplications_005_GetApplicationsTransitionStateNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_005_IsQuitUserPromptRequested( void * );
NTSTATUS IVRApplications_IVRApplications_005_LaunchInternalProcess( void * );
NTSTATUS IVRApplications_IVRApplications_006_AddApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_006_RemoveApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_006_IsApplicationInstalled( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationCount( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationKeyByIndex( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationKeyByProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_006_LaunchApplication( void * );
NTSTATUS IVRApplications_IVRApplications_006_LaunchTemplateApplication( void * );
NTSTATUS IVRApplications_IVRApplications_006_LaunchApplicationFromMimeType( void * );
NTSTATUS IVRApplications_IVRApplications_006_LaunchDashboardOverlay( void * );
NTSTATUS IVRApplications_IVRApplications_006_CancelApplicationLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_006_IdentifyApplication( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationsErrorNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationPropertyString( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationPropertyBool( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationPropertyUint64( void * );
NTSTATUS IVRApplications_IVRApplications_006_SetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_006_SetDefaultApplicationForMimeType( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetDefaultApplicationForMimeType( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationSupportedMimeTypes( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationsThatSupportMimeType( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationLaunchArguments( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetStartingApplication( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetTransitionState( void * );
NTSTATUS IVRApplications_IVRApplications_006_PerformApplicationPrelaunchCheck( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetApplicationsTransitionStateNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_006_IsQuitUserPromptRequested( void * );
NTSTATUS IVRApplications_IVRApplications_006_LaunchInternalProcess( void * );
NTSTATUS IVRApplications_IVRApplications_006_GetCurrentSceneProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_007_AddApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_007_RemoveApplicationManifest( void * );
NTSTATUS IVRApplications_IVRApplications_007_IsApplicationInstalled( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationCount( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationKeyByIndex( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationKeyByProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_007_LaunchApplication( void * );
NTSTATUS IVRApplications_IVRApplications_007_LaunchTemplateApplication( void * );
NTSTATUS IVRApplications_IVRApplications_007_LaunchApplicationFromMimeType( void * );
NTSTATUS IVRApplications_IVRApplications_007_LaunchDashboardOverlay( void * );
NTSTATUS IVRApplications_IVRApplications_007_CancelApplicationLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_007_IdentifyApplication( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationProcessId( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationsErrorNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationPropertyString( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationPropertyBool( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationPropertyUint64( void * );
NTSTATUS IVRApplications_IVRApplications_007_SetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationAutoLaunch( void * );
NTSTATUS IVRApplications_IVRApplications_007_SetDefaultApplicationForMimeType( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetDefaultApplicationForMimeType( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationSupportedMimeTypes( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationsThatSupportMimeType( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetApplicationLaunchArguments( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetStartingApplication( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetSceneApplicationState( void * );
NTSTATUS IVRApplications_IVRApplications_007_PerformApplicationPrelaunchCheck( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetSceneApplicationStateNameFromEnum( void * );
NTSTATUS IVRApplications_IVRApplications_007_LaunchInternalProcess( void * );
NTSTATUS IVRApplications_IVRApplications_007_GetCurrentSceneProcessId( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_CommitWorkingCopy( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_RevertWorkingCopy( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_GetWorkingPlayAreaSize( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_GetWorkingPlayAreaRect( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_GetWorkingCollisionBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_GetLiveCollisionBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_GetWorkingSeatedZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_GetWorkingStandingZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_SetWorkingPlayAreaSize( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_SetWorkingCollisionBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_SetWorkingSeatedZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_SetWorkingStandingZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_ReloadFromDisk( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_GetLiveSeatedZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_SetWorkingWallTagInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_004_GetLiveWallTagInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_CommitWorkingCopy( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_RevertWorkingCopy( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_GetWorkingPlayAreaSize( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_GetWorkingPlayAreaRect( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_GetWorkingCollisionBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_GetLiveCollisionBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_GetWorkingSeatedZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_GetWorkingStandingZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_SetWorkingPlayAreaSize( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_SetWorkingCollisionBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_SetWorkingSeatedZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_SetWorkingStandingZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_ReloadFromDisk( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_GetLiveSeatedZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_SetWorkingCollisionBoundsTagsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_GetLiveCollisionBoundsTagsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_SetWorkingPhysicalBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_GetLivePhysicalBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_ExportLiveToBuffer( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_005_ImportFromBufferToWorking( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_CommitWorkingCopy( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_RevertWorkingCopy( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_GetWorkingPlayAreaSize( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_GetWorkingPlayAreaRect( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_GetWorkingCollisionBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_GetLiveCollisionBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_GetWorkingSeatedZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_GetWorkingStandingZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_SetWorkingPlayAreaSize( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_SetWorkingCollisionBoundsInfo( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_SetWorkingPerimeter( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_SetWorkingSeatedZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_SetWorkingStandingZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_ReloadFromDisk( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_GetLiveSeatedZeroPoseToRawTrackingPose( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_ExportLiveToBuffer( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_ImportFromBufferToWorking( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_ShowWorkingSetPreview( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_HideWorkingSetPreview( void * );
NTSTATUS IVRChaperoneSetup_IVRChaperoneSetup_006_RoomSetupStarting( void * );
NTSTATUS IVRChaperone_IVRChaperone_002_GetCalibrationState( void * );
NTSTATUS IVRChaperone_IVRChaperone_002_GetSoftBoundsInfo( void * );
NTSTATUS IVRChaperone_IVRChaperone_002_GetHardBoundsInfo( void * );
NTSTATUS IVRChaperone_IVRChaperone_002_GetSeatedBoundsInfo( void * );
NTSTATUS IVRChaperone_IVRChaperone_002_ReloadInfo( void * );
NTSTATUS IVRChaperone_IVRChaperone_002_SetSceneColor( void * );
NTSTATUS IVRChaperone_IVRChaperone_002_GetBoundsColor( void * );
NTSTATUS IVRChaperone_IVRChaperone_002_AreBoundsVisible( void * );
NTSTATUS IVRChaperone_IVRChaperone_002_ForceBoundsVisible( void * );
NTSTATUS IVRChaperone_IVRChaperone_003_GetCalibrationState( void * );
NTSTATUS IVRChaperone_IVRChaperone_003_GetPlayAreaSize( void * );
NTSTATUS IVRChaperone_IVRChaperone_003_GetPlayAreaRect( void * );
NTSTATUS IVRChaperone_IVRChaperone_003_ReloadInfo( void * );
NTSTATUS IVRChaperone_IVRChaperone_003_SetSceneColor( void * );
NTSTATUS IVRChaperone_IVRChaperone_003_GetBoundsColor( void * );
NTSTATUS IVRChaperone_IVRChaperone_003_AreBoundsVisible( void * );
NTSTATUS IVRChaperone_IVRChaperone_003_ForceBoundsVisible( void * );
NTSTATUS IVRChaperone_IVRChaperone_004_GetCalibrationState( void * );
NTSTATUS IVRChaperone_IVRChaperone_004_GetPlayAreaSize( void * );
NTSTATUS IVRChaperone_IVRChaperone_004_GetPlayAreaRect( void * );
NTSTATUS IVRChaperone_IVRChaperone_004_ReloadInfo( void * );
NTSTATUS IVRChaperone_IVRChaperone_004_SetSceneColor( void * );
NTSTATUS IVRChaperone_IVRChaperone_004_GetBoundsColor( void * );
NTSTATUS IVRChaperone_IVRChaperone_004_AreBoundsVisible( void * );
NTSTATUS IVRChaperone_IVRChaperone_004_ForceBoundsVisible( void * );
NTSTATUS IVRChaperone_IVRChaperone_004_ResetZeroPose( void * );
NTSTATUS IVRClientCore_IVRClientCore_002_Init( void * );
NTSTATUS IVRClientCore_IVRClientCore_002_Cleanup( void * );
NTSTATUS IVRClientCore_IVRClientCore_002_IsInterfaceVersionValid( void * );
NTSTATUS IVRClientCore_IVRClientCore_002_GetGenericInterface( void * );
NTSTATUS IVRClientCore_IVRClientCore_002_BIsHmdPresent( void * );
NTSTATUS IVRClientCore_IVRClientCore_002_GetEnglishStringForHmdError( void * );
NTSTATUS IVRClientCore_IVRClientCore_002_GetIDForVRInitError( void * );
NTSTATUS IVRClientCore_IVRClientCore_003_Init( void * );
NTSTATUS IVRClientCore_IVRClientCore_003_Cleanup( void * );
NTSTATUS IVRClientCore_IVRClientCore_003_IsInterfaceVersionValid( void * );
NTSTATUS IVRClientCore_IVRClientCore_003_GetGenericInterface( void * );
NTSTATUS IVRClientCore_IVRClientCore_003_BIsHmdPresent( void * );
NTSTATUS IVRClientCore_IVRClientCore_003_GetEnglishStringForHmdError( void * );
NTSTATUS IVRClientCore_IVRClientCore_003_GetIDForVRInitError( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_GetLastError( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_SetVSync( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_GetVSync( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_SetGamma( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_GetGamma( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_SetGraphicsDevice( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_GetOverlayDefaults( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_SetOverlay( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_SetOverlayRaw( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_SetOverlayFromFile( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_ClearOverlay( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_ComputeOverlayIntersection( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_005_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_GetLastError( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_SetVSync( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_GetVSync( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_SetGamma( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_GetGamma( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_SetGraphicsDevice( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_006_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_GetLastError( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_SetVSync( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_GetVSync( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_SetGamma( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_GetGamma( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_007_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_GetLastError( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_SetVSync( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_GetVSync( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_SetGamma( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_GetGamma( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_008_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_009_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_010_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_011_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_012_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_013_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_014_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_RequestScreenshot( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetCurrentScreenshotType( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_015_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_016_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetFrameTimings( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_017_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetFrameTimings( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetCurrentFadeColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetCurrentGridAlpha( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_018_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetFrameTimings( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetCurrentFadeColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetCurrentGridAlpha( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetVulkanInstanceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_019_GetVulkanDeviceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetFrameTimings( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetCurrentFadeColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetCurrentGridAlpha( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_ReleaseMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetVulkanInstanceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_020_GetVulkanDeviceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetFrameTimings( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetCurrentFadeColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetCurrentGridAlpha( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_ReleaseMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetVulkanInstanceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_GetVulkanDeviceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_SetExplicitTimingMode( void * );
NTSTATUS IVRCompositor_IVRCompositor_021_SubmitExplicitTimingData( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetFrameTimings( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetCurrentFadeColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetCurrentGridAlpha( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_ReleaseMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetVulkanInstanceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_GetVulkanDeviceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_SetExplicitTimingMode( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_SubmitExplicitTimingData( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_IsMotionSmoothingEnabled( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_IsMotionSmoothingSupported( void * );
NTSTATUS IVRCompositor_IVRCompositor_022_IsCurrentSceneFocusAppLoading( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetFrameTimings( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetCurrentFadeColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetCurrentGridAlpha( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_ReleaseMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetVulkanInstanceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_GetVulkanDeviceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_SetExplicitTimingMode( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_SubmitExplicitTimingData( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_IsMotionSmoothingEnabled( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_IsMotionSmoothingSupported( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_IsCurrentSceneFocusAppLoading( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_SetStageOverride_Async( void * );
NTSTATUS IVRCompositor_IVRCompositor_024_ClearStageOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetFrameTimings( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetCurrentFadeColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetCurrentGridAlpha( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_ReleaseMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetVulkanInstanceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetVulkanDeviceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_SetExplicitTimingMode( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_SubmitExplicitTimingData( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_IsMotionSmoothingEnabled( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_IsMotionSmoothingSupported( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_IsCurrentSceneFocusAppLoading( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_SetStageOverride_Async( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_ClearStageOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetCompositorBenchmarkResults( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetLastPosePredictionIDs( void * );
NTSTATUS IVRCompositor_IVRCompositor_026_GetPosesForFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetFrameTimings( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetCurrentFadeColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetCurrentGridAlpha( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_ReleaseMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetVulkanInstanceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetVulkanDeviceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_SetExplicitTimingMode( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_SubmitExplicitTimingData( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_IsMotionSmoothingEnabled( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_IsMotionSmoothingSupported( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_IsCurrentSceneFocusAppLoading( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_SetStageOverride_Async( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_ClearStageOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetCompositorBenchmarkResults( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetLastPosePredictionIDs( void * );
NTSTATUS IVRCompositor_IVRCompositor_027_GetPosesForFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_SetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetTrackingSpace( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_WaitGetPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetLastPoses( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetLastPoseForTrackedDeviceIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_Submit( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_SubmitWithArrayIndex( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_ClearLastSubmittedFrame( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_PostPresentHandoff( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetFrameTiming( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetFrameTimings( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetFrameTimeRemaining( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetCumulativeStats( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_FadeToColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetCurrentFadeColor( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_FadeGrid( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetCurrentGridAlpha( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_SetSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_ClearSkyboxOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_CompositorBringToFront( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_CompositorGoToBack( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_CompositorQuit( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_IsFullscreen( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetCurrentSceneFocusProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetLastFrameRenderer( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_CanRenderScene( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_ShowMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_HideMirrorWindow( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_IsMirrorWindowVisible( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_CompositorDumpImages( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_ShouldAppRenderWithLowResources( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_ForceInterleavedReprojectionOn( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_ForceReconnectProcess( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_SuspendRendering( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_ReleaseMirrorTextureD3D11( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetMirrorTextureGL( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_ReleaseSharedGLTexture( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_LockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_UnlockGLSharedTextureForAccess( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetVulkanInstanceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetVulkanDeviceExtensionsRequired( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_SetExplicitTimingMode( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_SubmitExplicitTimingData( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_IsMotionSmoothingEnabled( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_IsMotionSmoothingSupported( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_IsCurrentSceneFocusAppLoading( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_SetStageOverride_Async( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_ClearStageOverride( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetCompositorBenchmarkResults( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetLastPosePredictionIDs( void * );
NTSTATUS IVRCompositor_IVRCompositor_028_GetPosesForFrame( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc1( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc2( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc3( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc4( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc5( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc6( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc7( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc8( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc9( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc10( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc11( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc12( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc13( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc14( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc15( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc16( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc17( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc18( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc19( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc20( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc21( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc22( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc23( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc24( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc25( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc26( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc27( void * );
NTSTATUS IVRControlPanel_IVRControlPanel_006_undoc28( void * );
NTSTATUS IVRDriverManager_IVRDriverManager_001_GetDriverCount( void * );
NTSTATUS IVRDriverManager_IVRDriverManager_001_GetDriverName( void * );
NTSTATUS IVRDriverManager_IVRDriverManager_001_GetDriverHandle( void * );
NTSTATUS IVRDriverManager_IVRDriverManager_001_IsEnabled( void * );
NTSTATUS IVRExtendedDisplay_IVRExtendedDisplay_001_GetWindowBounds( void * );
NTSTATUS IVRExtendedDisplay_IVRExtendedDisplay_001_GetEyeOutputViewport( void * );
NTSTATUS IVRExtendedDisplay_IVRExtendedDisplay_001_GetDXGIOutputInfo( void * );
NTSTATUS IVRHeadsetView_IVRHeadsetView_001_SetHeadsetViewSize( void * );
NTSTATUS IVRHeadsetView_IVRHeadsetView_001_GetHeadsetViewSize( void * );
NTSTATUS IVRHeadsetView_IVRHeadsetView_001_SetHeadsetViewMode( void * );
NTSTATUS IVRHeadsetView_IVRHeadsetView_001_GetHeadsetViewMode( void * );
NTSTATUS IVRHeadsetView_IVRHeadsetView_001_SetHeadsetViewCropped( void * );
NTSTATUS IVRHeadsetView_IVRHeadsetView_001_GetHeadsetViewCropped( void * );
NTSTATUS IVRHeadsetView_IVRHeadsetView_001_GetHeadsetViewAspectRatio( void * );
NTSTATUS IVRHeadsetView_IVRHeadsetView_001_SetHeadsetViewBlendRange( void * );
NTSTATUS IVRHeadsetView_IVRHeadsetView_001_GetHeadsetViewBlendRange( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_001_Open( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_001_Close( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_001_Read( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_001_Write( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_001_PropertyContainer( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_002_Open( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_002_Close( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_002_Read( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_002_Write( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_002_PropertyContainer( void * );
NTSTATUS IVRIOBuffer_IVRIOBuffer_002_HasReaders( void * );
NTSTATUS IVRInput_IVRInput_003_SetActionManifestPath( void * );
NTSTATUS IVRInput_IVRInput_003_GetActionSetHandle( void * );
NTSTATUS IVRInput_IVRInput_003_GetActionHandle( void * );
NTSTATUS IVRInput_IVRInput_003_GetInputSourceHandle( void * );
NTSTATUS IVRInput_IVRInput_003_UpdateActionState( void * );
NTSTATUS IVRInput_IVRInput_003_GetDigitalActionData( void * );
NTSTATUS IVRInput_IVRInput_003_GetAnalogActionData( void * );
NTSTATUS IVRInput_IVRInput_003_GetPoseActionData( void * );
NTSTATUS IVRInput_IVRInput_003_GetSkeletalActionData( void * );
NTSTATUS IVRInput_IVRInput_003_GetSkeletalActionDataCompressed( void * );
NTSTATUS IVRInput_IVRInput_003_UncompressSkeletalActionData( void * );
NTSTATUS IVRInput_IVRInput_003_TriggerHapticVibrationAction( void * );
NTSTATUS IVRInput_IVRInput_003_GetActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_003_GetOriginLocalizedName( void * );
NTSTATUS IVRInput_IVRInput_003_GetOriginTrackedDeviceInfo( void * );
NTSTATUS IVRInput_IVRInput_003_ShowActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_003_ShowBindingsForActionSet( void * );
NTSTATUS IVRInput_IVRInput_004_SetActionManifestPath( void * );
NTSTATUS IVRInput_IVRInput_004_GetActionSetHandle( void * );
NTSTATUS IVRInput_IVRInput_004_GetActionHandle( void * );
NTSTATUS IVRInput_IVRInput_004_GetInputSourceHandle( void * );
NTSTATUS IVRInput_IVRInput_004_UpdateActionState( void * );
NTSTATUS IVRInput_IVRInput_004_GetDigitalActionData( void * );
NTSTATUS IVRInput_IVRInput_004_GetAnalogActionData( void * );
NTSTATUS IVRInput_IVRInput_004_GetPoseActionData( void * );
NTSTATUS IVRInput_IVRInput_004_GetSkeletalActionData( void * );
NTSTATUS IVRInput_IVRInput_004_GetSkeletalBoneData( void * );
NTSTATUS IVRInput_IVRInput_004_GetSkeletalBoneDataCompressed( void * );
NTSTATUS IVRInput_IVRInput_004_DecompressSkeletalBoneData( void * );
NTSTATUS IVRInput_IVRInput_004_TriggerHapticVibrationAction( void * );
NTSTATUS IVRInput_IVRInput_004_GetActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_004_GetOriginLocalizedName( void * );
NTSTATUS IVRInput_IVRInput_004_GetOriginTrackedDeviceInfo( void * );
NTSTATUS IVRInput_IVRInput_004_ShowActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_004_ShowBindingsForActionSet( void * );
NTSTATUS IVRInput_IVRInput_005_SetActionManifestPath( void * );
NTSTATUS IVRInput_IVRInput_005_GetActionSetHandle( void * );
NTSTATUS IVRInput_IVRInput_005_GetActionHandle( void * );
NTSTATUS IVRInput_IVRInput_005_GetInputSourceHandle( void * );
NTSTATUS IVRInput_IVRInput_005_UpdateActionState( void * );
NTSTATUS IVRInput_IVRInput_005_GetDigitalActionData( void * );
NTSTATUS IVRInput_IVRInput_005_GetAnalogActionData( void * );
NTSTATUS IVRInput_IVRInput_005_GetPoseActionData( void * );
NTSTATUS IVRInput_IVRInput_005_GetSkeletalActionData( void * );
NTSTATUS IVRInput_IVRInput_005_GetBoneCount( void * );
NTSTATUS IVRInput_IVRInput_005_GetBoneHierarchy( void * );
NTSTATUS IVRInput_IVRInput_005_GetBoneName( void * );
NTSTATUS IVRInput_IVRInput_005_GetSkeletalReferenceTransforms( void * );
NTSTATUS IVRInput_IVRInput_005_GetSkeletalTrackingLevel( void * );
NTSTATUS IVRInput_IVRInput_005_GetSkeletalBoneData( void * );
NTSTATUS IVRInput_IVRInput_005_GetSkeletalSummaryData( void * );
NTSTATUS IVRInput_IVRInput_005_GetSkeletalBoneDataCompressed( void * );
NTSTATUS IVRInput_IVRInput_005_DecompressSkeletalBoneData( void * );
NTSTATUS IVRInput_IVRInput_005_TriggerHapticVibrationAction( void * );
NTSTATUS IVRInput_IVRInput_005_GetActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_005_GetOriginLocalizedName( void * );
NTSTATUS IVRInput_IVRInput_005_GetOriginTrackedDeviceInfo( void * );
NTSTATUS IVRInput_IVRInput_005_ShowActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_005_ShowBindingsForActionSet( void * );
NTSTATUS IVRInput_IVRInput_005_IsUsingLegacyInput( void * );
NTSTATUS IVRInput_IVRInput_006_SetActionManifestPath( void * );
NTSTATUS IVRInput_IVRInput_006_GetActionSetHandle( void * );
NTSTATUS IVRInput_IVRInput_006_GetActionHandle( void * );
NTSTATUS IVRInput_IVRInput_006_GetInputSourceHandle( void * );
NTSTATUS IVRInput_IVRInput_006_UpdateActionState( void * );
NTSTATUS IVRInput_IVRInput_006_GetDigitalActionData( void * );
NTSTATUS IVRInput_IVRInput_006_GetAnalogActionData( void * );
NTSTATUS IVRInput_IVRInput_006_GetPoseActionDataRelativeToNow( void * );
NTSTATUS IVRInput_IVRInput_006_GetPoseActionDataForNextFrame( void * );
NTSTATUS IVRInput_IVRInput_006_GetSkeletalActionData( void * );
NTSTATUS IVRInput_IVRInput_006_GetBoneCount( void * );
NTSTATUS IVRInput_IVRInput_006_GetBoneHierarchy( void * );
NTSTATUS IVRInput_IVRInput_006_GetBoneName( void * );
NTSTATUS IVRInput_IVRInput_006_GetSkeletalReferenceTransforms( void * );
NTSTATUS IVRInput_IVRInput_006_GetSkeletalTrackingLevel( void * );
NTSTATUS IVRInput_IVRInput_006_GetSkeletalBoneData( void * );
NTSTATUS IVRInput_IVRInput_006_GetSkeletalSummaryData( void * );
NTSTATUS IVRInput_IVRInput_006_GetSkeletalBoneDataCompressed( void * );
NTSTATUS IVRInput_IVRInput_006_DecompressSkeletalBoneData( void * );
NTSTATUS IVRInput_IVRInput_006_TriggerHapticVibrationAction( void * );
NTSTATUS IVRInput_IVRInput_006_GetActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_006_GetOriginLocalizedName( void * );
NTSTATUS IVRInput_IVRInput_006_GetOriginTrackedDeviceInfo( void * );
NTSTATUS IVRInput_IVRInput_006_ShowActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_006_ShowBindingsForActionSet( void * );
NTSTATUS IVRInput_IVRInput_006_IsUsingLegacyInput( void * );
NTSTATUS IVRInput_IVRInput_007_SetActionManifestPath( void * );
NTSTATUS IVRInput_IVRInput_007_GetActionSetHandle( void * );
NTSTATUS IVRInput_IVRInput_007_GetActionHandle( void * );
NTSTATUS IVRInput_IVRInput_007_GetInputSourceHandle( void * );
NTSTATUS IVRInput_IVRInput_007_UpdateActionState( void * );
NTSTATUS IVRInput_IVRInput_007_GetDigitalActionData( void * );
NTSTATUS IVRInput_IVRInput_007_GetAnalogActionData( void * );
NTSTATUS IVRInput_IVRInput_007_GetPoseActionDataRelativeToNow( void * );
NTSTATUS IVRInput_IVRInput_007_GetPoseActionDataForNextFrame( void * );
NTSTATUS IVRInput_IVRInput_007_GetSkeletalActionData( void * );
NTSTATUS IVRInput_IVRInput_007_GetBoneCount( void * );
NTSTATUS IVRInput_IVRInput_007_GetBoneHierarchy( void * );
NTSTATUS IVRInput_IVRInput_007_GetBoneName( void * );
NTSTATUS IVRInput_IVRInput_007_GetSkeletalReferenceTransforms( void * );
NTSTATUS IVRInput_IVRInput_007_GetSkeletalTrackingLevel( void * );
NTSTATUS IVRInput_IVRInput_007_GetSkeletalBoneData( void * );
NTSTATUS IVRInput_IVRInput_007_GetSkeletalSummaryData( void * );
NTSTATUS IVRInput_IVRInput_007_GetSkeletalBoneDataCompressed( void * );
NTSTATUS IVRInput_IVRInput_007_DecompressSkeletalBoneData( void * );
NTSTATUS IVRInput_IVRInput_007_TriggerHapticVibrationAction( void * );
NTSTATUS IVRInput_IVRInput_007_GetActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_007_GetOriginLocalizedName( void * );
NTSTATUS IVRInput_IVRInput_007_GetOriginTrackedDeviceInfo( void * );
NTSTATUS IVRInput_IVRInput_007_GetActionBindingInfo( void * );
NTSTATUS IVRInput_IVRInput_007_ShowActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_007_ShowBindingsForActionSet( void * );
NTSTATUS IVRInput_IVRInput_007_IsUsingLegacyInput( void * );
NTSTATUS IVRInput_IVRInput_007_OpenBindingUI( void * );
NTSTATUS IVRInput_IVRInput_010_SetActionManifestPath( void * );
NTSTATUS IVRInput_IVRInput_010_GetActionSetHandle( void * );
NTSTATUS IVRInput_IVRInput_010_GetActionHandle( void * );
NTSTATUS IVRInput_IVRInput_010_GetInputSourceHandle( void * );
NTSTATUS IVRInput_IVRInput_010_UpdateActionState( void * );
NTSTATUS IVRInput_IVRInput_010_GetDigitalActionData( void * );
NTSTATUS IVRInput_IVRInput_010_GetAnalogActionData( void * );
NTSTATUS IVRInput_IVRInput_010_GetPoseActionDataRelativeToNow( void * );
NTSTATUS IVRInput_IVRInput_010_GetPoseActionDataForNextFrame( void * );
NTSTATUS IVRInput_IVRInput_010_GetSkeletalActionData( void * );
NTSTATUS IVRInput_IVRInput_010_GetDominantHand( void * );
NTSTATUS IVRInput_IVRInput_010_SetDominantHand( void * );
NTSTATUS IVRInput_IVRInput_010_GetBoneCount( void * );
NTSTATUS IVRInput_IVRInput_010_GetBoneHierarchy( void * );
NTSTATUS IVRInput_IVRInput_010_GetBoneName( void * );
NTSTATUS IVRInput_IVRInput_010_GetSkeletalReferenceTransforms( void * );
NTSTATUS IVRInput_IVRInput_010_GetSkeletalTrackingLevel( void * );
NTSTATUS IVRInput_IVRInput_010_GetSkeletalBoneData( void * );
NTSTATUS IVRInput_IVRInput_010_GetSkeletalSummaryData( void * );
NTSTATUS IVRInput_IVRInput_010_GetSkeletalBoneDataCompressed( void * );
NTSTATUS IVRInput_IVRInput_010_DecompressSkeletalBoneData( void * );
NTSTATUS IVRInput_IVRInput_010_TriggerHapticVibrationAction( void * );
NTSTATUS IVRInput_IVRInput_010_GetActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_010_GetOriginLocalizedName( void * );
NTSTATUS IVRInput_IVRInput_010_GetOriginTrackedDeviceInfo( void * );
NTSTATUS IVRInput_IVRInput_010_GetActionBindingInfo( void * );
NTSTATUS IVRInput_IVRInput_010_ShowActionOrigins( void * );
NTSTATUS IVRInput_IVRInput_010_ShowBindingsForActionSet( void * );
NTSTATUS IVRInput_IVRInput_010_GetComponentStateForBinding( void * );
NTSTATUS IVRInput_IVRInput_010_IsUsingLegacyInput( void * );
NTSTATUS IVRInput_IVRInput_010_OpenBindingUI( void * );
NTSTATUS IVRInput_IVRInput_010_GetBindingVariant( void * );
NTSTATUS IVRMailbox_IVRMailbox_001_undoc1( void * );
NTSTATUS IVRMailbox_IVRMailbox_001_undoc2( void * );
NTSTATUS IVRMailbox_IVRMailbox_001_undoc3( void * );
NTSTATUS IVRMailbox_IVRMailbox_001_undoc4( void * );
NTSTATUS IVRNotifications_IVRNotifications_001_GetErrorString( void * );
NTSTATUS IVRNotifications_IVRNotifications_001_CreateNotification( void * );
NTSTATUS IVRNotifications_IVRNotifications_001_DismissNotification( void * );
NTSTATUS IVRNotifications_IVRNotifications_002_CreateNotification( void * );
NTSTATUS IVRNotifications_IVRNotifications_002_RemoveNotification( void * );
NTSTATUS IVROverlayView_IVROverlayView_003_AcquireOverlayView( void * );
NTSTATUS IVROverlayView_IVROverlayView_003_ReleaseOverlayView( void * );
NTSTATUS IVROverlayView_IVROverlayView_003_PostOverlayEvent( void * );
NTSTATUS IVROverlayView_IVROverlayView_003_IsViewingPermitted( void * );
NTSTATUS IVROverlay_IVROverlay_001_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_001_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_001_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayGamma( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayGamma( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayVisibility( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayVisibility( void * );
NTSTATUS IVROverlay_IVROverlay_001_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_001_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_001_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_001_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_001_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_001_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_001_IsSystemOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_001_IsActiveSystemOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_001_SetSystemOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_001_GetSystemOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_002_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_002_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_002_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayGamma( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayGamma( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_002_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_002_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_002_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_002_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_002_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_002_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_002_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_002_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_002_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_002_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_002_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_002_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_003_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_003_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_003_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayGamma( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayGamma( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_003_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_003_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_003_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_003_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_003_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_003_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_003_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_003_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_003_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_003_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_003_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_003_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_003_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_004_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_004_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_004_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayGamma( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayGamma( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_004_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_004_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_004_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_004_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_004_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_004_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_004_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_004_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_004_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_004_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_004_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_004_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_004_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_005_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_005_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_005_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayGamma( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayGamma( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_005_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_005_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_005_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_005_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_005_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_005_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_005_IsFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_005_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_005_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_005_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_005_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_005_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_005_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_005_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_005_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_005_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_007_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_007_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_007_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_007_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_007_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_007_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_007_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_007_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_007_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_007_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_007_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_007_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_007_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_007_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_007_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_008_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_008_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_008_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_008_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_008_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_008_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_008_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_008_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_008_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_008_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_008_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_008_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_008_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_008_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_008_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_008_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_010_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_010_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_010_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_010_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_010_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_010_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_010_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_010_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_010_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_010_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_010_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_010_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_010_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_010_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_010_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_011_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_011_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_011_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_011_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_011_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_011_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_011_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_011_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_011_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_011_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_011_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_011_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_011_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_011_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_011_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_011_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_012_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_012_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_012_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_012_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_012_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_012_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_012_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_012_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_012_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_012_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_012_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_012_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_012_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_012_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_012_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_012_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_013_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_013_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_013_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_013_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_013_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_013_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_013_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_013_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_013_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_013_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_013_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_013_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_013_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_013_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_013_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_014_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_014_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_014_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_014_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_014_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_014_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_014_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_014_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_014_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_014_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_014_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_014_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_014_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_014_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_014_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_014_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_014_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_014_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_016_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_016_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_016_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_016_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_016_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_016_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_016_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_016_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_016_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_016_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_016_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_016_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_016_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_016_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_016_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_016_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_016_CloseMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_017_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_017_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_017_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_017_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVROverlay_IVROverlay_017_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_017_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_017_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_017_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_017_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_017_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_017_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_017_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_017_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_017_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_017_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_017_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_017_CloseMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_018_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_018_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_018_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_018_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_018_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_018_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_018_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_018_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_018_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_018_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_018_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_018_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_018_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_018_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_018_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_018_CloseMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetHighQualityOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_019_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_019_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_019_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_019_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_019_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_019_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_019_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_019_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_019_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_019_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_019_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_019_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_019_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_019_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_019_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_019_CloseMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayAutoCurveDistanceRangeInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_020_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_020_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_020_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_020_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetGamepadFocusOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_020_MoveGamepadFocusToNeighbor( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_020_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_020_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_020_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_020_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_020_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_020_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_020_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_020_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_020_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_020_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_020_CloseMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_021_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_021_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_021_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_021_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_021_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_021_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_021_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_021_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_021_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_021_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_021_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_021_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_021_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_021_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_021_CloseMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayRenderModel( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayTransformCursor( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTransformCursor( void * );
NTSTATUS IVROverlay_IVROverlay_022_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_022_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_022_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_022_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayDualAnalogTransform( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_022_TriggerLaserMouseHapticVibration( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayCursor( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayCursorPositionOverride( void * );
NTSTATUS IVROverlay_IVROverlay_022_ClearOverlayCursorPositionOverride( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_022_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_022_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_022_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_022_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_022_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_022_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_022_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_022_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_022_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_022_CloseMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayTransformCursor( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTransformCursor( void * );
NTSTATUS IVROverlay_IVROverlay_024_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_024_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_024_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_024_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_024_TriggerLaserMouseHapticVibration( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayCursor( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayCursorPositionOverride( void * );
NTSTATUS IVROverlay_IVROverlay_024_ClearOverlayCursorPositionOverride( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_024_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_024_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_024_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_024_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_024_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_024_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_024_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_024_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_024_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_024_CloseMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayTransformCursor( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTransformCursor( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayTransformProjection( void * );
NTSTATUS IVROverlay_IVROverlay_025_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_025_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_025_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_025_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_025_TriggerLaserMouseHapticVibration( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayCursor( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayCursorPositionOverride( void * );
NTSTATUS IVROverlay_IVROverlay_025_ClearOverlayCursorPositionOverride( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_025_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_025_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_025_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_025_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_025_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_025_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_025_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_025_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_025_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_025_CloseMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayPreCurvePitch( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayPreCurvePitch( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayTransformOverlayRelative( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayTransformCursor( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTransformCursor( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayTransformProjection( void * );
NTSTATUS IVROverlay_IVROverlay_026_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_026_WaitFrameSync( void * );
NTSTATUS IVROverlay_IVROverlay_026_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_026_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_026_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_026_TriggerLaserMouseHapticVibration( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayCursor( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayCursorPositionOverride( void * );
NTSTATUS IVROverlay_IVROverlay_026_ClearOverlayCursorPositionOverride( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_026_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_026_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_026_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_026_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_026_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_026_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_026_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_026_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_026_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_026_CloseMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_FindOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_CreateOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_DestroyOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayKey( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayName( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayImageData( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayErrorNameFromEnum( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayRenderingPid( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayFlag( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayFlags( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayColor( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayAlpha( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayTexelAspect( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlaySortOrder( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayWidthInMeters( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayCurvature( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayPreCurvePitch( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayPreCurvePitch( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayTextureColorSpace( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayTextureBounds( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayTransformType( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayTransformTrackedDeviceRelative( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayTransformTrackedDeviceComponent( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayTransformCursor( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayTransformCursor( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayTransformProjection( void * );
NTSTATUS IVROverlay_IVROverlay_027_ShowOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_HideOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_IsOverlayVisible( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetTransformForOverlayCoordinates( void * );
NTSTATUS IVROverlay_IVROverlay_027_WaitFrameSync( void * );
NTSTATUS IVROverlay_IVROverlay_027_PollNextOverlayEvent( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayInputMethod( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayMouseScale( void * );
NTSTATUS IVROverlay_IVROverlay_027_ComputeOverlayIntersection( void * );
NTSTATUS IVROverlay_IVROverlay_027_IsHoverTargetOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayIntersectionMask( void * );
NTSTATUS IVROverlay_IVROverlay_027_TriggerLaserMouseHapticVibration( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayCursor( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayCursorPositionOverride( void * );
NTSTATUS IVROverlay_IVROverlay_027_ClearOverlayCursorPositionOverride( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_027_ClearOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayRaw( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetOverlayFromFile( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayTexture( void * );
NTSTATUS IVROverlay_IVROverlay_027_ReleaseNativeOverlayHandle( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetOverlayTextureSize( void * );
NTSTATUS IVROverlay_IVROverlay_027_CreateDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_IsDashboardVisible( void * );
NTSTATUS IVROverlay_IVROverlay_027_IsActiveDashboardOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetDashboardOverlaySceneProcess( void * );
NTSTATUS IVROverlay_IVROverlay_027_ShowDashboard( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetPrimaryDashboardDevice( void * );
NTSTATUS IVROverlay_IVROverlay_027_ShowKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_027_ShowKeyboardForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_GetKeyboardText( void * );
NTSTATUS IVROverlay_IVROverlay_027_HideKeyboard( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetKeyboardTransformAbsolute( void * );
NTSTATUS IVROverlay_IVROverlay_027_SetKeyboardPositionForOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_ShowMessageOverlay( void * );
NTSTATUS IVROverlay_IVROverlay_027_CloseMessageOverlay( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_001_LoadRenderModel( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_001_FreeRenderModel( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_001_GetRenderModelName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_001_GetRenderModelCount( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_LoadRenderModel( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_FreeRenderModel( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_LoadTexture( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_FreeTexture( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_GetRenderModelName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_GetRenderModelCount( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_GetComponentCount( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_GetComponentName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_GetComponentButtonMask( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_GetComponentRenderModelName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_GetComponentState( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_002_RenderModelHasComponent( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_LoadRenderModel_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_FreeRenderModel( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_LoadTexture_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_FreeTexture( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_LoadTextureD3D11_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_FreeTextureD3D11( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_GetRenderModelName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_GetRenderModelCount( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_GetComponentCount( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_GetComponentName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_GetComponentButtonMask( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_GetComponentRenderModelName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_GetComponentState( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_004_RenderModelHasComponent( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_LoadRenderModel_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_FreeRenderModel( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_LoadTexture_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_FreeTexture( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_LoadTextureD3D11_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_LoadIntoTextureD3D11_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_FreeTextureD3D11( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_GetRenderModelName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_GetRenderModelCount( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_GetComponentCount( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_GetComponentName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_GetComponentButtonMask( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_GetComponentRenderModelName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_GetComponentState( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_RenderModelHasComponent( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_GetRenderModelThumbnailURL( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_GetRenderModelOriginalPath( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_005_GetRenderModelErrorNameFromEnum( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_LoadRenderModel_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_FreeRenderModel( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_LoadTexture_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_FreeTexture( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_LoadTextureD3D11_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_LoadIntoTextureD3D11_Async( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_FreeTextureD3D11( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetRenderModelName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetRenderModelCount( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetComponentCount( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetComponentName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetComponentButtonMask( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetComponentRenderModelName( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetComponentStateForDevicePath( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetComponentState( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_RenderModelHasComponent( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetRenderModelThumbnailURL( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetRenderModelOriginalPath( void * );
NTSTATUS IVRRenderModels_IVRRenderModels_006_GetRenderModelErrorNameFromEnum( void * );
NTSTATUS IVRResources_IVRResources_001_LoadSharedResource( void * );
NTSTATUS IVRResources_IVRResources_001_GetResourceFullPath( void * );
NTSTATUS IVRScreenshots_IVRScreenshots_001_RequestScreenshot( void * );
NTSTATUS IVRScreenshots_IVRScreenshots_001_HookScreenshot( void * );
NTSTATUS IVRScreenshots_IVRScreenshots_001_GetScreenshotPropertyType( void * );
NTSTATUS IVRScreenshots_IVRScreenshots_001_GetScreenshotPropertyFilename( void * );
NTSTATUS IVRScreenshots_IVRScreenshots_001_UpdateScreenshotProgress( void * );
NTSTATUS IVRScreenshots_IVRScreenshots_001_TakeStereoScreenshot( void * );
NTSTATUS IVRScreenshots_IVRScreenshots_001_SubmitScreenshot( void * );
NTSTATUS IVRSettings_IVRSettings_001_GetSettingsErrorNameFromEnum( void * );
NTSTATUS IVRSettings_IVRSettings_001_Sync( void * );
NTSTATUS IVRSettings_IVRSettings_001_GetBool( void * );
NTSTATUS IVRSettings_IVRSettings_001_SetBool( void * );
NTSTATUS IVRSettings_IVRSettings_001_GetInt32( void * );
NTSTATUS IVRSettings_IVRSettings_001_SetInt32( void * );
NTSTATUS IVRSettings_IVRSettings_001_GetFloat( void * );
NTSTATUS IVRSettings_IVRSettings_001_SetFloat( void * );
NTSTATUS IVRSettings_IVRSettings_001_GetString( void * );
NTSTATUS IVRSettings_IVRSettings_001_SetString( void * );
NTSTATUS IVRSettings_IVRSettings_001_RemoveSection( void * );
NTSTATUS IVRSettings_IVRSettings_001_RemoveKeyInSection( void * );
NTSTATUS IVRSettings_IVRSettings_002_GetSettingsErrorNameFromEnum( void * );
NTSTATUS IVRSettings_IVRSettings_002_Sync( void * );
NTSTATUS IVRSettings_IVRSettings_002_SetBool( void * );
NTSTATUS IVRSettings_IVRSettings_002_SetInt32( void * );
NTSTATUS IVRSettings_IVRSettings_002_SetFloat( void * );
NTSTATUS IVRSettings_IVRSettings_002_SetString( void * );
NTSTATUS IVRSettings_IVRSettings_002_GetBool( void * );
NTSTATUS IVRSettings_IVRSettings_002_GetInt32( void * );
NTSTATUS IVRSettings_IVRSettings_002_GetFloat( void * );
NTSTATUS IVRSettings_IVRSettings_002_GetString( void * );
NTSTATUS IVRSettings_IVRSettings_002_RemoveSection( void * );
NTSTATUS IVRSettings_IVRSettings_002_RemoveKeyInSection( void * );
NTSTATUS IVRSettings_IVRSettings_003_GetSettingsErrorNameFromEnum( void * );
NTSTATUS IVRSettings_IVRSettings_003_SetBool( void * );
NTSTATUS IVRSettings_IVRSettings_003_SetInt32( void * );
NTSTATUS IVRSettings_IVRSettings_003_SetFloat( void * );
NTSTATUS IVRSettings_IVRSettings_003_SetString( void * );
NTSTATUS IVRSettings_IVRSettings_003_GetBool( void * );
NTSTATUS IVRSettings_IVRSettings_003_GetInt32( void * );
NTSTATUS IVRSettings_IVRSettings_003_GetFloat( void * );
NTSTATUS IVRSettings_IVRSettings_003_GetString( void * );
NTSTATUS IVRSettings_IVRSettings_003_RemoveSection( void * );
NTSTATUS IVRSettings_IVRSettings_003_RemoveKeyInSection( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetWindowBounds( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetEyeOutputViewport( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_003_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_003_AttachToWindow( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_003_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_003_LoadRenderModel( void * );
NTSTATUS IVRSystem_IVRSystem_003_FreeRenderModel( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_003_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_003_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_003_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_003_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_003_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_003_HandleControllerOverlayInteractionAsMouse( void * );
NTSTATUS IVRSystem_IVRSystem_003_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_003_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_003_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetWindowBounds( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetEyeOutputViewport( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_004_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_004_AttachToWindow( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_004_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_004_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_004_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_004_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_004_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_004_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_004_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_004_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_004_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_004_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetWindowBounds( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetEyeOutputViewport( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_005_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_005_AttachToWindow( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_005_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_005_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_005_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_005_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_005_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_005_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_005_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_005_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_005_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_005_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetWindowBounds( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetEyeOutputViewport( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_006_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_006_AttachToWindow( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_006_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_006_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_006_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_006_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_006_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_006_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_006_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_006_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_006_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_006_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_006_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_006_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_006_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_009_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_009_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_009_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_009_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_009_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_009_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_009_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_009_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_009_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_009_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_009_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_009_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_009_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_009_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_009_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_009_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_009_AcknowledgeQuit_UserPrompt( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_010_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_010_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_010_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_010_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_010_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_010_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_010_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_010_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_010_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_010_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_010_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_010_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_010_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_010_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_010_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_010_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_010_AcknowledgeQuit_UserPrompt( void * );
NTSTATUS IVRSystem_IVRSystem_010_PerformanceTestEnableCapture( void * );
NTSTATUS IVRSystem_IVRSystem_010_PerformanceTestReportFidelityLevelChange( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_011_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_011_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_011_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_011_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_011_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_011_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_011_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_011_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_011_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_011_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_011_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_011_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_011_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_011_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_011_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_011_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_011_AcknowledgeQuit_UserPrompt( void * );
NTSTATUS IVRSystem_IVRSystem_011_PerformanceTestEnableCapture( void * );
NTSTATUS IVRSystem_IVRSystem_011_PerformanceTestReportFidelityLevelChange( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_012_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_012_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_012_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_012_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_012_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_012_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_012_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_012_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_012_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_012_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_012_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_012_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_012_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_012_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_012_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_012_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_012_AcknowledgeQuit_UserPrompt( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_014_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_014_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_014_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_014_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_014_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_014_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_014_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_014_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_014_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_014_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_014_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_014_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_014_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_014_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_014_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_014_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_014_AcknowledgeQuit_UserPrompt( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_015_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_015_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_015_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_015_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_015_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_015_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_015_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_015_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_015_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_015_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_015_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_015_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_015_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_015_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_015_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_015_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_015_AcknowledgeQuit_UserPrompt( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_016_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetOutputDevice( void * );
NTSTATUS IVRSystem_IVRSystem_016_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_016_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_016_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_016_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_016_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_016_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_016_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_016_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_016_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_016_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_016_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_016_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_016_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_016_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_016_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_016_AcknowledgeQuit_UserPrompt( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_017_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetOutputDevice( void * );
NTSTATUS IVRSystem_IVRSystem_017_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_017_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_017_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_017_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_017_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_017_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_017_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_017_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_017_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_017_CaptureInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_017_ReleaseInputFocus( void * );
NTSTATUS IVRSystem_IVRSystem_017_IsInputFocusCapturedByAnotherProcess( void * );
NTSTATUS IVRSystem_IVRSystem_017_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_017_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_017_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_017_AcknowledgeQuit_UserPrompt( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_019_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetOutputDevice( void * );
NTSTATUS IVRSystem_IVRSystem_019_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_019_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_019_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_019_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_019_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetArrayTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_019_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_019_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_019_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_019_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_019_IsInputAvailable( void * );
NTSTATUS IVRSystem_IVRSystem_019_IsSteamVRDrawingControllers( void * );
NTSTATUS IVRSystem_IVRSystem_019_ShouldApplicationPause( void * );
NTSTATUS IVRSystem_IVRSystem_019_ShouldApplicationReduceRenderingWork( void * );
NTSTATUS IVRSystem_IVRSystem_019_DriverDebugRequest( void * );
NTSTATUS IVRSystem_IVRSystem_019_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_019_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_019_AcknowledgeQuit_UserPrompt( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_020_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetOutputDevice( void * );
NTSTATUS IVRSystem_IVRSystem_020_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_020_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_020_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_020_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_020_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetArrayTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_020_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_020_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_020_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_020_IsInputAvailable( void * );
NTSTATUS IVRSystem_IVRSystem_020_IsSteamVRDrawingControllers( void * );
NTSTATUS IVRSystem_IVRSystem_020_ShouldApplicationPause( void * );
NTSTATUS IVRSystem_IVRSystem_020_ShouldApplicationReduceRenderingWork( void * );
NTSTATUS IVRSystem_IVRSystem_020_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_020_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_020_AcknowledgeQuit_UserPrompt( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetAppContainerFilePaths( void * );
NTSTATUS IVRSystem_IVRSystem_020_GetRuntimeVersion( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_021_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetOutputDevice( void * );
NTSTATUS IVRSystem_IVRSystem_021_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_021_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_021_ResetSeatedZeroPose( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_021_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_021_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetArrayTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_021_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_021_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_021_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_021_IsInputAvailable( void * );
NTSTATUS IVRSystem_IVRSystem_021_IsSteamVRDrawingControllers( void * );
NTSTATUS IVRSystem_IVRSystem_021_ShouldApplicationPause( void * );
NTSTATUS IVRSystem_IVRSystem_021_ShouldApplicationReduceRenderingWork( void * );
NTSTATUS IVRSystem_IVRSystem_021_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_021_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetAppContainerFilePaths( void * );
NTSTATUS IVRSystem_IVRSystem_021_GetRuntimeVersion( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetRecommendedRenderTargetSize( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetProjectionMatrix( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetProjectionRaw( void * );
NTSTATUS IVRSystem_IVRSystem_022_ComputeDistortion( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetEyeToHeadTransform( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetTimeSinceLastVsync( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetD3D9AdapterIndex( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetDXGIOutputInfo( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetOutputDevice( void * );
NTSTATUS IVRSystem_IVRSystem_022_IsDisplayOnDesktop( void * );
NTSTATUS IVRSystem_IVRSystem_022_SetDisplayVisibility( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetDeviceToAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetSeatedZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetRawZeroPoseToStandingAbsoluteTrackingPose( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetSortedTrackedDeviceIndicesOfClass( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetTrackedDeviceActivityLevel( void * );
NTSTATUS IVRSystem_IVRSystem_022_ApplyTransform( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetTrackedDeviceIndexForControllerRole( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetControllerRoleForTrackedDeviceIndex( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetTrackedDeviceClass( void * );
NTSTATUS IVRSystem_IVRSystem_022_IsTrackedDeviceConnected( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetBoolTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetFloatTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetInt32TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetUint64TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetMatrix34TrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetArrayTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetStringTrackedDeviceProperty( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetPropErrorNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_022_PollNextEvent( void * );
NTSTATUS IVRSystem_IVRSystem_022_PollNextEventWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetEventTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetHiddenAreaMesh( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetControllerState( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetControllerStateWithPose( void * );
NTSTATUS IVRSystem_IVRSystem_022_TriggerHapticPulse( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetButtonIdNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetControllerAxisTypeNameFromEnum( void * );
NTSTATUS IVRSystem_IVRSystem_022_IsInputAvailable( void * );
NTSTATUS IVRSystem_IVRSystem_022_IsSteamVRDrawingControllers( void * );
NTSTATUS IVRSystem_IVRSystem_022_ShouldApplicationPause( void * );
NTSTATUS IVRSystem_IVRSystem_022_ShouldApplicationReduceRenderingWork( void * );
NTSTATUS IVRSystem_IVRSystem_022_PerformFirmwareUpdate( void * );
NTSTATUS IVRSystem_IVRSystem_022_AcknowledgeQuit_Exiting( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetAppContainerFilePaths( void * );
NTSTATUS IVRSystem_IVRSystem_022_GetRuntimeVersion( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_HasCamera( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_GetCameraFirmwareDescription( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_GetCameraFrameDimensions( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_SetCameraVideoStreamFormat( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_GetCameraVideoStreamFormat( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_EnableCameraForStreaming( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_StartVideoStream( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_StopVideoStream( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_IsVideoStreamActive( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_GetVideoStreamElapsedTime( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_GetVideoStreamFrame( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_ReleaseVideoStreamFrame( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_SetAutoExposure( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_PauseVideoStream( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_ResumeVideoStream( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_IsVideoStreamPaused( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_GetCameraDistortion( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_001_GetCameraProjection( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_002_GetCameraErrorNameFromEnum( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_002_HasCamera( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_002_GetCameraFrameSize( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_002_GetCameraIntrinisics( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_002_GetCameraProjection( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_002_AcquireVideoStreamingService( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_002_ReleaseVideoStreamingService( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_002_GetVideoStreamFrameBuffer( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_GetCameraErrorNameFromEnum( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_HasCamera( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_GetCameraFrameSize( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_GetCameraIntrinsics( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_GetCameraProjection( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_AcquireVideoStreamingService( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_ReleaseVideoStreamingService( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_GetVideoStreamFrameBuffer( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_GetVideoStreamTextureSize( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_GetVideoStreamTextureD3D11( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_GetVideoStreamTextureGL( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_003_ReleaseVideoStreamTextureGL( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_GetCameraErrorNameFromEnum( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_HasCamera( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_GetCameraFrameSize( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_GetCameraIntrinsics( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_GetCameraProjection( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_AcquireVideoStreamingService( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_ReleaseVideoStreamingService( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_GetVideoStreamFrameBuffer( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_GetVideoStreamTextureSize( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_GetVideoStreamTextureD3D11( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_GetVideoStreamTextureGL( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_004_ReleaseVideoStreamTextureGL( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_GetCameraErrorNameFromEnum( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_HasCamera( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_GetCameraFrameSize( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_GetCameraIntrinsics( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_GetCameraProjection( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_AcquireVideoStreamingService( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_ReleaseVideoStreamingService( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_GetVideoStreamFrameBuffer( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_GetVideoStreamTextureSize( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_GetVideoStreamTextureD3D11( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_GetVideoStreamTextureGL( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_005_ReleaseVideoStreamTextureGL( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_GetCameraErrorNameFromEnum( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_HasCamera( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_GetCameraFrameSize( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_GetCameraIntrinsics( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_GetCameraProjection( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_AcquireVideoStreamingService( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_ReleaseVideoStreamingService( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_GetVideoStreamFrameBuffer( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_GetVideoStreamTextureSize( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_GetVideoStreamTextureD3D11( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_GetVideoStreamTextureGL( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_ReleaseVideoStreamTextureGL( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_SetCameraTrackingSpace( void * );
NTSTATUS IVRTrackedCamera_IVRTrackedCamera_006_GetCameraTrackingSpace( void * );

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */
